
Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d0c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009f04  08009f04  00019f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f5c  08009f5c  0002018c  2**0
                  CONTENTS
  4 .ARM          00000008  08009f5c  08009f5c  00019f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f64  08009f64  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f64  08009f64  00019f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f68  08009f68  00019f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  08009f6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ee4  2000018c  0800a0f8  0002018c  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20002070  0800a0f8  00022070  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001531d  00000000  00000000  000201ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a81  00000000  00000000  000354d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  00038f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e48  00000000  00000000  00039f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bc9d  00000000  00000000  0003adb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000162b0  00000000  00000000  00066a4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa871  00000000  00000000  0007ccfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017756e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004174  00000000  00000000  001775c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000018c 	.word	0x2000018c
 8000214:	00000000 	.word	0x00000000
 8000218:	08009eec 	.word	0x08009eec

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000190 	.word	0x20000190
 8000234:	08009eec 	.word	0x08009eec

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <MX_CAN1_Init>:
uint32_t CAN_PRESCALER = 3;
uint32_t CAN_TIMESEQ1 = CAN_BS1_12TQ;
uint32_t CAN_TIMESEQ2 = CAN_BS2_3TQ;
/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000540:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000542:	4a19      	ldr	r2, [pc, #100]	; (80005a8 <MX_CAN1_Init+0x6c>)
 8000544:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = CAN_PRESCALER;
 8000546:	4b19      	ldr	r3, [pc, #100]	; (80005ac <MX_CAN1_Init+0x70>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a16      	ldr	r2, [pc, #88]	; (80005a4 <MX_CAN1_Init+0x68>)
 800054c:	6053      	str	r3, [r2, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800054e:	4b15      	ldr	r3, [pc, #84]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000554:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000556:	2200      	movs	r2, #0
 8000558:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_TIMESEQ1;
 800055a:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <MX_CAN1_Init+0x74>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a11      	ldr	r2, [pc, #68]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000560:	6113      	str	r3, [r2, #16]
  hcan1.Init.TimeSeg2 = CAN_TIMESEQ2;
 8000562:	4b14      	ldr	r3, [pc, #80]	; (80005b4 <MX_CAN1_Init+0x78>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a0f      	ldr	r2, [pc, #60]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000568:	6153      	str	r3, [r2, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <MX_CAN1_Init+0x68>)
 800056c:	2200      	movs	r2, #0
 800056e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000572:	2200      	movs	r2, #0
 8000574:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000576:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000578:	2200      	movs	r2, #0
 800057a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800057c:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <MX_CAN1_Init+0x68>)
 800057e:	2200      	movs	r2, #0
 8000580:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000584:	2200      	movs	r2, #0
 8000586:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <MX_CAN1_Init+0x68>)
 800058a:	2201      	movs	r2, #1
 800058c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800058e:	4805      	ldr	r0, [pc, #20]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000590:	f001 f992 	bl	80018b8 <HAL_CAN_Init>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800059a:	f000 fd09 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000594 	.word	0x20000594
 80005a8:	40006400 	.word	0x40006400
 80005ac:	20000000 	.word	0x20000000
 80005b0:	20000004 	.word	0x20000004
 80005b4:	20000008 	.word	0x20000008

080005b8 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80005bc:	4b18      	ldr	r3, [pc, #96]	; (8000620 <MX_CAN2_Init+0x68>)
 80005be:	4a19      	ldr	r2, [pc, #100]	; (8000624 <MX_CAN2_Init+0x6c>)
 80005c0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = CAN_PRESCALER;
 80005c2:	4b19      	ldr	r3, [pc, #100]	; (8000628 <MX_CAN2_Init+0x70>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a16      	ldr	r2, [pc, #88]	; (8000620 <MX_CAN2_Init+0x68>)
 80005c8:	6053      	str	r3, [r2, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80005ca:	4b15      	ldr	r3, [pc, #84]	; (8000620 <MX_CAN2_Init+0x68>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005d0:	4b13      	ldr	r3, [pc, #76]	; (8000620 <MX_CAN2_Init+0x68>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_TIMESEQ1;
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <MX_CAN2_Init+0x74>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a11      	ldr	r2, [pc, #68]	; (8000620 <MX_CAN2_Init+0x68>)
 80005dc:	6113      	str	r3, [r2, #16]
  hcan2.Init.TimeSeg2 = CAN_TIMESEQ2;
 80005de:	4b14      	ldr	r3, [pc, #80]	; (8000630 <MX_CAN2_Init+0x78>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a0f      	ldr	r2, [pc, #60]	; (8000620 <MX_CAN2_Init+0x68>)
 80005e4:	6153      	str	r3, [r2, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <MX_CAN2_Init+0x68>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <MX_CAN2_Init+0x68>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80005f2:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <MX_CAN2_Init+0x68>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80005f8:	4b09      	ldr	r3, [pc, #36]	; (8000620 <MX_CAN2_Init+0x68>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80005fe:	4b08      	ldr	r3, [pc, #32]	; (8000620 <MX_CAN2_Init+0x68>)
 8000600:	2200      	movs	r2, #0
 8000602:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <MX_CAN2_Init+0x68>)
 8000606:	2200      	movs	r2, #0
 8000608:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800060a:	4805      	ldr	r0, [pc, #20]	; (8000620 <MX_CAN2_Init+0x68>)
 800060c:	f001 f954 	bl	80018b8 <HAL_CAN_Init>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 8000616:	f000 fccb 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	200005bc 	.word	0x200005bc
 8000624:	40006800 	.word	0x40006800
 8000628:	20000000 	.word	0x20000000
 800062c:	20000004 	.word	0x20000004
 8000630:	20000008 	.word	0x20000008

08000634 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8000638:	4b17      	ldr	r3, [pc, #92]	; (8000698 <MX_CAN3_Init+0x64>)
 800063a:	4a18      	ldr	r2, [pc, #96]	; (800069c <MX_CAN3_Init+0x68>)
 800063c:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 16;
 800063e:	4b16      	ldr	r3, [pc, #88]	; (8000698 <MX_CAN3_Init+0x64>)
 8000640:	2210      	movs	r2, #16
 8000642:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8000644:	4b14      	ldr	r3, [pc, #80]	; (8000698 <MX_CAN3_Init+0x64>)
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800064a:	4b13      	ldr	r3, [pc, #76]	; (8000698 <MX_CAN3_Init+0x64>)
 800064c:	2200      	movs	r2, #0
 800064e:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_TIMESEQ1;
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <MX_CAN3_Init+0x6c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a10      	ldr	r2, [pc, #64]	; (8000698 <MX_CAN3_Init+0x64>)
 8000656:	6113      	str	r3, [r2, #16]
  hcan3.Init.TimeSeg2 = CAN_TIMESEQ2;
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MX_CAN3_Init+0x70>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a0e      	ldr	r2, [pc, #56]	; (8000698 <MX_CAN3_Init+0x64>)
 800065e:	6153      	str	r3, [r2, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8000660:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <MX_CAN3_Init+0x64>)
 8000662:	2200      	movs	r2, #0
 8000664:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8000666:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_CAN3_Init+0x64>)
 8000668:	2200      	movs	r2, #0
 800066a:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 800066c:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <MX_CAN3_Init+0x64>)
 800066e:	2200      	movs	r2, #0
 8000670:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_CAN3_Init+0x64>)
 8000674:	2200      	movs	r2, #0
 8000676:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8000678:	4b07      	ldr	r3, [pc, #28]	; (8000698 <MX_CAN3_Init+0x64>)
 800067a:	2200      	movs	r2, #0
 800067c:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_CAN3_Init+0x64>)
 8000680:	2200      	movs	r2, #0
 8000682:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8000684:	4804      	ldr	r0, [pc, #16]	; (8000698 <MX_CAN3_Init+0x64>)
 8000686:	f001 f917 	bl	80018b8 <HAL_CAN_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8000690:	f000 fc8e 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200005e4 	.word	0x200005e4
 800069c:	40003400 	.word	0x40003400
 80006a0:	20000004 	.word	0x20000004
 80006a4:	20000008 	.word	0x20000008

080006a8 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;
static uint32_t HAL_RCC_CAN3_CLK_ENABLED=0;
static uint32_t HAL_RCC_CAN2_CLK_ENABLED=0;
void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b092      	sub	sp, #72	; 0x48
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a95      	ldr	r2, [pc, #596]	; (800091c <HAL_CAN_MspInit+0x274>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d142      	bne.n	8000750 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80006ca:	4b95      	ldr	r3, [pc, #596]	; (8000920 <HAL_CAN_MspInit+0x278>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	3301      	adds	r3, #1
 80006d0:	4a93      	ldr	r2, [pc, #588]	; (8000920 <HAL_CAN_MspInit+0x278>)
 80006d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80006d4:	4b92      	ldr	r3, [pc, #584]	; (8000920 <HAL_CAN_MspInit+0x278>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d10b      	bne.n	80006f4 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80006dc:	4b91      	ldr	r3, [pc, #580]	; (8000924 <HAL_CAN_MspInit+0x27c>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	4a90      	ldr	r2, [pc, #576]	; (8000924 <HAL_CAN_MspInit+0x27c>)
 80006e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006e6:	6413      	str	r3, [r2, #64]	; 0x40
 80006e8:	4b8e      	ldr	r3, [pc, #568]	; (8000924 <HAL_CAN_MspInit+0x27c>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006f0:	633b      	str	r3, [r7, #48]	; 0x30
 80006f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f4:	4b8b      	ldr	r3, [pc, #556]	; (8000924 <HAL_CAN_MspInit+0x27c>)
 80006f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f8:	4a8a      	ldr	r2, [pc, #552]	; (8000924 <HAL_CAN_MspInit+0x27c>)
 80006fa:	f043 0302 	orr.w	r3, r3, #2
 80006fe:	6313      	str	r3, [r2, #48]	; 0x30
 8000700:	4b88      	ldr	r3, [pc, #544]	; (8000924 <HAL_CAN_MspInit+0x27c>)
 8000702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000704:	f003 0302 	and.w	r3, r3, #2
 8000708:	62fb      	str	r3, [r7, #44]	; 0x2c
 800070a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800070c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000710:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000712:	2302      	movs	r3, #2
 8000714:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071a:	2303      	movs	r3, #3
 800071c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800071e:	2309      	movs	r3, #9
 8000720:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000722:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000726:	4619      	mov	r1, r3
 8000728:	487f      	ldr	r0, [pc, #508]	; (8000928 <HAL_CAN_MspInit+0x280>)
 800072a:	f002 f83b 	bl	80027a4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 3, 0);
 800072e:	2200      	movs	r2, #0
 8000730:	2103      	movs	r1, #3
 8000732:	2013      	movs	r0, #19
 8000734:	f001 ffff 	bl	8002736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000738:	2013      	movs	r0, #19
 800073a:	f002 f818 	bl	800276e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 3, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2103      	movs	r1, #3
 8000742:	2014      	movs	r0, #20
 8000744:	f001 fff7 	bl	8002736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000748:	2014      	movs	r0, #20
 800074a:	f002 f810 	bl	800276e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 800074e:	e0e0      	b.n	8000912 <HAL_CAN_MspInit+0x26a>
  else if(canHandle->Instance==CAN2)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a75      	ldr	r2, [pc, #468]	; (800092c <HAL_CAN_MspInit+0x284>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d16b      	bne.n	8000832 <HAL_CAN_MspInit+0x18a>
	    HAL_RCC_CAN3_CLK_ENABLED++;
 800075a:	4b75      	ldr	r3, [pc, #468]	; (8000930 <HAL_CAN_MspInit+0x288>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	3301      	adds	r3, #1
 8000760:	4a73      	ldr	r2, [pc, #460]	; (8000930 <HAL_CAN_MspInit+0x288>)
 8000762:	6013      	str	r3, [r2, #0]
	    if(HAL_RCC_CAN3_CLK_ENABLED==1){
 8000764:	4b72      	ldr	r3, [pc, #456]	; (8000930 <HAL_CAN_MspInit+0x288>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d10b      	bne.n	8000784 <HAL_CAN_MspInit+0xdc>
	      __HAL_RCC_CAN3_CLK_ENABLE();
 800076c:	4b6d      	ldr	r3, [pc, #436]	; (8000924 <HAL_CAN_MspInit+0x27c>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	4a6c      	ldr	r2, [pc, #432]	; (8000924 <HAL_CAN_MspInit+0x27c>)
 8000772:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000776:	6413      	str	r3, [r2, #64]	; 0x40
 8000778:	4b6a      	ldr	r3, [pc, #424]	; (8000924 <HAL_CAN_MspInit+0x27c>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000780:	62bb      	str	r3, [r7, #40]	; 0x28
 8000782:	6abb      	ldr	r3, [r7, #40]	; 0x28
	    HAL_RCC_CAN2_CLK_ENABLED++;
 8000784:	4b6b      	ldr	r3, [pc, #428]	; (8000934 <HAL_CAN_MspInit+0x28c>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	3301      	adds	r3, #1
 800078a:	4a6a      	ldr	r2, [pc, #424]	; (8000934 <HAL_CAN_MspInit+0x28c>)
 800078c:	6013      	str	r3, [r2, #0]
	    if(HAL_RCC_CAN2_CLK_ENABLED==1){
 800078e:	4b69      	ldr	r3, [pc, #420]	; (8000934 <HAL_CAN_MspInit+0x28c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d10b      	bne.n	80007ae <HAL_CAN_MspInit+0x106>
	      __HAL_RCC_CAN2_CLK_ENABLE();
 8000796:	4b63      	ldr	r3, [pc, #396]	; (8000924 <HAL_CAN_MspInit+0x27c>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079a:	4a62      	ldr	r2, [pc, #392]	; (8000924 <HAL_CAN_MspInit+0x27c>)
 800079c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80007a0:	6413      	str	r3, [r2, #64]	; 0x40
 80007a2:	4b60      	ldr	r3, [pc, #384]	; (8000924 <HAL_CAN_MspInit+0x27c>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
 80007ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	    HAL_RCC_CAN1_CLK_ENABLED++;
 80007ae:	4b5c      	ldr	r3, [pc, #368]	; (8000920 <HAL_CAN_MspInit+0x278>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	3301      	adds	r3, #1
 80007b4:	4a5a      	ldr	r2, [pc, #360]	; (8000920 <HAL_CAN_MspInit+0x278>)
 80007b6:	6013      	str	r3, [r2, #0]
	    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80007b8:	4b59      	ldr	r3, [pc, #356]	; (8000920 <HAL_CAN_MspInit+0x278>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d10b      	bne.n	80007d8 <HAL_CAN_MspInit+0x130>
	      __HAL_RCC_CAN1_CLK_ENABLE();
 80007c0:	4b58      	ldr	r3, [pc, #352]	; (8000924 <HAL_CAN_MspInit+0x27c>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	4a57      	ldr	r2, [pc, #348]	; (8000924 <HAL_CAN_MspInit+0x27c>)
 80007c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007ca:	6413      	str	r3, [r2, #64]	; 0x40
 80007cc:	4b55      	ldr	r3, [pc, #340]	; (8000924 <HAL_CAN_MspInit+0x27c>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007d4:	623b      	str	r3, [r7, #32]
 80007d6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d8:	4b52      	ldr	r3, [pc, #328]	; (8000924 <HAL_CAN_MspInit+0x27c>)
 80007da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007dc:	4a51      	ldr	r2, [pc, #324]	; (8000924 <HAL_CAN_MspInit+0x27c>)
 80007de:	f043 0302 	orr.w	r3, r3, #2
 80007e2:	6313      	str	r3, [r2, #48]	; 0x30
 80007e4:	4b4f      	ldr	r3, [pc, #316]	; (8000924 <HAL_CAN_MspInit+0x27c>)
 80007e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e8:	f003 0302 	and.w	r3, r3, #2
 80007ec:	61fb      	str	r3, [r7, #28]
 80007ee:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80007f0:	2360      	movs	r3, #96	; 0x60
 80007f2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f4:	2302      	movs	r3, #2
 80007f6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fc:	2303      	movs	r3, #3
 80007fe:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000800:	2309      	movs	r3, #9
 8000802:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000804:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000808:	4619      	mov	r1, r3
 800080a:	4847      	ldr	r0, [pc, #284]	; (8000928 <HAL_CAN_MspInit+0x280>)
 800080c:	f001 ffca 	bl	80027a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 8000810:	2200      	movs	r2, #0
 8000812:	2105      	movs	r1, #5
 8000814:	203f      	movs	r0, #63	; 0x3f
 8000816:	f001 ff8e 	bl	8002736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 800081a:	203f      	movs	r0, #63	; 0x3f
 800081c:	f001 ffa7 	bl	800276e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8000820:	2200      	movs	r2, #0
 8000822:	2105      	movs	r1, #5
 8000824:	2040      	movs	r0, #64	; 0x40
 8000826:	f001 ff86 	bl	8002736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800082a:	2040      	movs	r0, #64	; 0x40
 800082c:	f001 ff9f 	bl	800276e <HAL_NVIC_EnableIRQ>
}
 8000830:	e06f      	b.n	8000912 <HAL_CAN_MspInit+0x26a>
  else if(canHandle->Instance==CAN3)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a40      	ldr	r2, [pc, #256]	; (8000938 <HAL_CAN_MspInit+0x290>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d16a      	bne.n	8000912 <HAL_CAN_MspInit+0x26a>
	    HAL_RCC_CAN3_CLK_ENABLED++;
 800083c:	4b3c      	ldr	r3, [pc, #240]	; (8000930 <HAL_CAN_MspInit+0x288>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	3301      	adds	r3, #1
 8000842:	4a3b      	ldr	r2, [pc, #236]	; (8000930 <HAL_CAN_MspInit+0x288>)
 8000844:	6013      	str	r3, [r2, #0]
	    if(HAL_RCC_CAN3_CLK_ENABLED==1){
 8000846:	4b3a      	ldr	r3, [pc, #232]	; (8000930 <HAL_CAN_MspInit+0x288>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d10b      	bne.n	8000866 <HAL_CAN_MspInit+0x1be>
	      __HAL_RCC_CAN3_CLK_ENABLE();
 800084e:	4b35      	ldr	r3, [pc, #212]	; (8000924 <HAL_CAN_MspInit+0x27c>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	4a34      	ldr	r2, [pc, #208]	; (8000924 <HAL_CAN_MspInit+0x27c>)
 8000854:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000858:	6413      	str	r3, [r2, #64]	; 0x40
 800085a:	4b32      	ldr	r3, [pc, #200]	; (8000924 <HAL_CAN_MspInit+0x27c>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000862:	61bb      	str	r3, [r7, #24]
 8000864:	69bb      	ldr	r3, [r7, #24]
	    HAL_RCC_CAN2_CLK_ENABLED++;
 8000866:	4b33      	ldr	r3, [pc, #204]	; (8000934 <HAL_CAN_MspInit+0x28c>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	3301      	adds	r3, #1
 800086c:	4a31      	ldr	r2, [pc, #196]	; (8000934 <HAL_CAN_MspInit+0x28c>)
 800086e:	6013      	str	r3, [r2, #0]
	    if(HAL_RCC_CAN2_CLK_ENABLED==1){
 8000870:	4b30      	ldr	r3, [pc, #192]	; (8000934 <HAL_CAN_MspInit+0x28c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d10b      	bne.n	8000890 <HAL_CAN_MspInit+0x1e8>
	      __HAL_RCC_CAN2_CLK_ENABLE();
 8000878:	4b2a      	ldr	r3, [pc, #168]	; (8000924 <HAL_CAN_MspInit+0x27c>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087c:	4a29      	ldr	r2, [pc, #164]	; (8000924 <HAL_CAN_MspInit+0x27c>)
 800087e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000882:	6413      	str	r3, [r2, #64]	; 0x40
 8000884:	4b27      	ldr	r3, [pc, #156]	; (8000924 <HAL_CAN_MspInit+0x27c>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000888:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800088c:	617b      	str	r3, [r7, #20]
 800088e:	697b      	ldr	r3, [r7, #20]
	    HAL_RCC_CAN1_CLK_ENABLED++;
 8000890:	4b23      	ldr	r3, [pc, #140]	; (8000920 <HAL_CAN_MspInit+0x278>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	3301      	adds	r3, #1
 8000896:	4a22      	ldr	r2, [pc, #136]	; (8000920 <HAL_CAN_MspInit+0x278>)
 8000898:	6013      	str	r3, [r2, #0]
	    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800089a:	4b21      	ldr	r3, [pc, #132]	; (8000920 <HAL_CAN_MspInit+0x278>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d10b      	bne.n	80008ba <HAL_CAN_MspInit+0x212>
	      __HAL_RCC_CAN1_CLK_ENABLE();
 80008a2:	4b20      	ldr	r3, [pc, #128]	; (8000924 <HAL_CAN_MspInit+0x27c>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	4a1f      	ldr	r2, [pc, #124]	; (8000924 <HAL_CAN_MspInit+0x27c>)
 80008a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008ac:	6413      	str	r3, [r2, #64]	; 0x40
 80008ae:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <HAL_CAN_MspInit+0x27c>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ba:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <HAL_CAN_MspInit+0x27c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a19      	ldr	r2, [pc, #100]	; (8000924 <HAL_CAN_MspInit+0x27c>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b17      	ldr	r3, [pc, #92]	; (8000924 <HAL_CAN_MspInit+0x27c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80008d2:	2318      	movs	r3, #24
 80008d4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008de:	2303      	movs	r3, #3
 80008e0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 80008e2:	230b      	movs	r3, #11
 80008e4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008ea:	4619      	mov	r1, r3
 80008ec:	480e      	ldr	r0, [pc, #56]	; (8000928 <HAL_CAN_MspInit+0x280>)
 80008ee:	f001 ff59 	bl	80027a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN3_TX_IRQn, 5, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2105      	movs	r1, #5
 80008f6:	2068      	movs	r0, #104	; 0x68
 80008f8:	f001 ff1d 	bl	8002736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN3_TX_IRQn);
 80008fc:	2068      	movs	r0, #104	; 0x68
 80008fe:	f001 ff36 	bl	800276e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 5, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2105      	movs	r1, #5
 8000906:	2069      	movs	r0, #105	; 0x69
 8000908:	f001 ff15 	bl	8002736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 800090c:	2069      	movs	r0, #105	; 0x69
 800090e:	f001 ff2e 	bl	800276e <HAL_NVIC_EnableIRQ>
}
 8000912:	bf00      	nop
 8000914:	3748      	adds	r7, #72	; 0x48
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40006400 	.word	0x40006400
 8000920:	2000060c 	.word	0x2000060c
 8000924:	40023800 	.word	0x40023800
 8000928:	40020400 	.word	0x40020400
 800092c:	40006800 	.word	0x40006800
 8000930:	20000610 	.word	0x20000610
 8000934:	20000614 	.word	0x20000614
 8000938:	40003400 	.word	0x40003400

0800093c <CAN1_Config_Filters>:
  }
}

/* USER CODE BEGIN 1 */

void CAN1_Config_Filters(void) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	hcan1.Instance = CAN1;
 8000942:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <CAN1_Config_Filters+0x74>)
 8000944:	4a1b      	ldr	r2, [pc, #108]	; (80009b4 <CAN1_Config_Filters+0x78>)
 8000946:	601a      	str	r2, [r3, #0]

	//##-2- Configure the CAN Filter ###########################################
  sFilterConfig.FilterBank = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800094c:	2300      	movs	r3, #0
 800094e:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000950:	2301      	movs	r3, #1
 8000952:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000954:	2300      	movs	r3, #0
 8000956:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000958:	2300      	movs	r3, #0
 800095a:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000968:	2301      	movs	r3, #1
 800096a:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 800096c:	230e      	movs	r3, #14
 800096e:	627b      	str	r3, [r7, #36]	; 0x24

  if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8000970:	463b      	mov	r3, r7
 8000972:	4619      	mov	r1, r3
 8000974:	480e      	ldr	r0, [pc, #56]	; (80009b0 <CAN1_Config_Filters+0x74>)
 8000976:	f001 f89b 	bl	8001ab0 <HAL_CAN_ConfigFilter>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <CAN1_Config_Filters+0x48>
    // Filter configuration Error
    Error_Handler();
 8000980:	f000 fb16 	bl	8000fb0 <Error_Handler>
  }
  if(HAL_CAN_Start(&hcan1) != HAL_OK){
 8000984:	480a      	ldr	r0, [pc, #40]	; (80009b0 <CAN1_Config_Filters+0x74>)
 8000986:	f001 f97f 	bl	8001c88 <HAL_CAN_Start>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <CAN1_Config_Filters+0x58>
      Error_Handler();
 8000990:	f000 fb0e 	bl	8000fb0 <Error_Handler>
  }
  if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 8000994:	2102      	movs	r1, #2
 8000996:	4806      	ldr	r0, [pc, #24]	; (80009b0 <CAN1_Config_Filters+0x74>)
 8000998:	f001 fb9c 	bl	80020d4 <HAL_CAN_ActivateNotification>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <CAN1_Config_Filters+0x6a>
      Error_Handler();
 80009a2:	f000 fb05 	bl	8000fb0 <Error_Handler>
  }

}
 80009a6:	bf00      	nop
 80009a8:	3728      	adds	r7, #40	; 0x28
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000594 	.word	0x20000594
 80009b4:	40006400 	.word	0x40006400

080009b8 <CAN2_Config_Filters>:
  * @brief  Configures the CAN2.
  * @param  None
  * @retval None
  * @ref	http://schulz-m.github.io/2017/03/23/stm32-can-id-filter/
  */
void CAN2_Config_Filters(void) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	; 0x28
 80009bc:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	hcan2.Instance = CAN2;
 80009be:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <CAN2_Config_Filters+0x74>)
 80009c0:	4a1b      	ldr	r2, [pc, #108]	; (8000a30 <CAN2_Config_Filters+0x78>)
 80009c2:	601a      	str	r2, [r3, #0]

	//##-2- Configure the CAN Filter ###########################################
  sFilterConfig.FilterBank = 14;		// 14..27 CAN2
 80009c4:	230e      	movs	r3, #14
 80009c6:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80009cc:	2301      	movs	r3, #1
 80009ce:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;			// Which IDs to catch
 80009d0:	2300      	movs	r3, #0
 80009d2:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80009d4:	2300      	movs	r3, #0
 80009d6:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;	// mask of 0x00 means that all IDs gets passed
 80009d8:	2300      	movs	r3, #0
 80009da:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80009e4:	2301      	movs	r3, #1
 80009e6:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;		// Must be equal to FilterNumber
 80009e8:	230e      	movs	r3, #14
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24

  if(HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 80009ec:	463b      	mov	r3, r7
 80009ee:	4619      	mov	r1, r3
 80009f0:	480e      	ldr	r0, [pc, #56]	; (8000a2c <CAN2_Config_Filters+0x74>)
 80009f2:	f001 f85d 	bl	8001ab0 <HAL_CAN_ConfigFilter>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <CAN2_Config_Filters+0x48>
    // Filter configuration Error
    Error_Handler();
 80009fc:	f000 fad8 	bl	8000fb0 <Error_Handler>
  }
  if(HAL_CAN_Start(&hcan2) != HAL_OK){
 8000a00:	480a      	ldr	r0, [pc, #40]	; (8000a2c <CAN2_Config_Filters+0x74>)
 8000a02:	f001 f941 	bl	8001c88 <HAL_CAN_Start>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <CAN2_Config_Filters+0x58>
        Error_Handler();
 8000a0c:	f000 fad0 	bl	8000fb0 <Error_Handler>
  }
  if(HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 8000a10:	2102      	movs	r1, #2
 8000a12:	4806      	ldr	r0, [pc, #24]	; (8000a2c <CAN2_Config_Filters+0x74>)
 8000a14:	f001 fb5e 	bl	80020d4 <HAL_CAN_ActivateNotification>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <CAN2_Config_Filters+0x6a>
      Error_Handler();
 8000a1e:	f000 fac7 	bl	8000fb0 <Error_Handler>
  }


}
 8000a22:	bf00      	nop
 8000a24:	3728      	adds	r7, #40	; 0x28
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200005bc 	.word	0x200005bc
 8000a30:	40006800 	.word	0x40006800

08000a34 <CAN3_Config_Filters>:
  * @brief  Configures the CAN3.
  * @param  None
  * @retval None
  * @ref	http://schulz-m.github.io/2017/03/23/stm32-can-id-filter/
  */
void CAN3_Config_Filters(void) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	; 0x28
 8000a38:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	hcan3.Instance = CAN3;
 8000a3a:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <CAN3_Config_Filters+0x74>)
 8000a3c:	4a1b      	ldr	r2, [pc, #108]	; (8000aac <CAN3_Config_Filters+0x78>)
 8000a3e:	601a      	str	r2, [r3, #0]

	//##-2- Configure the CAN Filter ###########################################
  sFilterConfig.FilterBank = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000a50:	2300      	movs	r3, #0
 8000a52:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000a60:	2301      	movs	r3, #1
 8000a62:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24

  if(HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig) != HAL_OK) {
 8000a68:	463b      	mov	r3, r7
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	480e      	ldr	r0, [pc, #56]	; (8000aa8 <CAN3_Config_Filters+0x74>)
 8000a6e:	f001 f81f 	bl	8001ab0 <HAL_CAN_ConfigFilter>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <CAN3_Config_Filters+0x48>
    // Filter configuration Error
    Error_Handler();
 8000a78:	f000 fa9a 	bl	8000fb0 <Error_Handler>
  }
  if(HAL_CAN_Start(&hcan3) != HAL_OK){
 8000a7c:	480a      	ldr	r0, [pc, #40]	; (8000aa8 <CAN3_Config_Filters+0x74>)
 8000a7e:	f001 f903 	bl	8001c88 <HAL_CAN_Start>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <CAN3_Config_Filters+0x58>
        Error_Handler();
 8000a88:	f000 fa92 	bl	8000fb0 <Error_Handler>
  }
  if(HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 8000a8c:	2102      	movs	r1, #2
 8000a8e:	4806      	ldr	r0, [pc, #24]	; (8000aa8 <CAN3_Config_Filters+0x74>)
 8000a90:	f001 fb20 	bl	80020d4 <HAL_CAN_ActivateNotification>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <CAN3_Config_Filters+0x6a>
      Error_Handler();
 8000a9a:	f000 fa89 	bl	8000fb0 <Error_Handler>
  }

}
 8000a9e:	bf00      	nop
 8000aa0:	3728      	adds	r7, #40	; 0x28
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200005e4 	.word	0x200005e4
 8000aac:	40003400 	.word	0x40003400

08000ab0 <CANTransmit>:
 * @param	uint8_t		buffer[]:		CAN data
 * @param	size_t		buffer_size:	Size of CAN messages
 * @retval	HAL_StatusTypeDef: 			HAL status
 */
HAL_StatusTypeDef CANTransmit(CAN_TypeDef *device_id, uint8_t buffer[], CAN_TxHeaderTypeDef   tx_header)
{
 8000ab0:	b082      	sub	sp, #8
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b084      	sub	sp, #16
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
 8000aba:	6039      	str	r1, [r7, #0]
 8000abc:	f107 0118 	add.w	r1, r7, #24
 8000ac0:	e881 000c 	stmia.w	r1, {r2, r3}
	uint32_t              tx_mailbox;
	uint8_t 			    transmit_status;

	transmit_status = HAL_ERROR;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	73fb      	strb	r3, [r7, #15]

	if (device_id == CAN1)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4a19      	ldr	r2, [pc, #100]	; (8000b30 <CANTransmit+0x80>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d10a      	bne.n	8000ae6 <CANTransmit+0x36>
	{
			transmit_status = HAL_CAN_AddTxMessage(&hcan1, &tx_header, buffer, &tx_mailbox);
 8000ad0:	f107 0308 	add.w	r3, r7, #8
 8000ad4:	683a      	ldr	r2, [r7, #0]
 8000ad6:	f107 0118 	add.w	r1, r7, #24
 8000ada:	4816      	ldr	r0, [pc, #88]	; (8000b34 <CANTransmit+0x84>)
 8000adc:	f001 f918 	bl	8001d10 <HAL_CAN_AddTxMessage>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	73fb      	strb	r3, [r7, #15]
 8000ae4:	e01c      	b.n	8000b20 <CANTransmit+0x70>
			if (transmit_status != HAL_OK)
			{
				//Error Handler
			}
	}
	else if (device_id == CAN2)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a13      	ldr	r2, [pc, #76]	; (8000b38 <CANTransmit+0x88>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d10a      	bne.n	8000b04 <CANTransmit+0x54>
	{
		transmit_status = HAL_CAN_AddTxMessage(&hcan2, &tx_header, buffer, &tx_mailbox);
 8000aee:	f107 0308 	add.w	r3, r7, #8
 8000af2:	683a      	ldr	r2, [r7, #0]
 8000af4:	f107 0118 	add.w	r1, r7, #24
 8000af8:	4810      	ldr	r0, [pc, #64]	; (8000b3c <CANTransmit+0x8c>)
 8000afa:	f001 f909 	bl	8001d10 <HAL_CAN_AddTxMessage>
 8000afe:	4603      	mov	r3, r0
 8000b00:	73fb      	strb	r3, [r7, #15]
 8000b02:	e00d      	b.n	8000b20 <CANTransmit+0x70>
		if (transmit_status != HAL_OK)
		{
			//Error Handler
		}
	}
	else if (device_id == CAN3)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a0e      	ldr	r2, [pc, #56]	; (8000b40 <CANTransmit+0x90>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d109      	bne.n	8000b20 <CANTransmit+0x70>
	{
		transmit_status = HAL_CAN_AddTxMessage(&hcan3, &tx_header, buffer, &tx_mailbox);
 8000b0c:	f107 0308 	add.w	r3, r7, #8
 8000b10:	683a      	ldr	r2, [r7, #0]
 8000b12:	f107 0118 	add.w	r1, r7, #24
 8000b16:	480b      	ldr	r0, [pc, #44]	; (8000b44 <CANTransmit+0x94>)
 8000b18:	f001 f8fa 	bl	8001d10 <HAL_CAN_AddTxMessage>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	73fb      	strb	r3, [r7, #15]
	}

	//handleCANMessage(can_msg_id, buffer, device_id);


	return transmit_status;
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b2c:	b002      	add	sp, #8
 8000b2e:	4770      	bx	lr
 8000b30:	40006400 	.word	0x40006400
 8000b34:	20000594 	.word	0x20000594
 8000b38:	40006800 	.word	0x40006800
 8000b3c:	200005bc 	.word	0x200005bc
 8000b40:	40003400 	.word	0x40003400
 8000b44:	200005e4 	.word	0x200005e4

08000b48 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @brief  Rx FIFO 0 message pending callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b09b      	sub	sp, #108	; 0x6c
 8000b4c:	af06      	add	r7, sp, #24
 8000b4e:	6078      	str	r0, [r7, #4]
	uint8_t  rx_data[8];
	uint8_t Frame[30];
	uint8_t FrameLength;

	//Receive message. NB! This function must be called here, otherwise interrupt flags won't be cleared.
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data) != HAL_OK)
 8000b50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b54:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000b58:	2100      	movs	r1, #0
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f001 f9a8 	bl	8001eb0 <HAL_CAN_GetRxMessage>
	{
		 //Reception Error;
	}


	if (hcan->Instance == CAN1) {
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a16      	ldr	r2, [pc, #88]	; (8000bc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d103      	bne.n	8000b72 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
		blinkLED(LED_CAN1_RECEIVE);
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f000 fd86 	bl	800167c <blinkLED>
 8000b70:	e010      	b.n	8000b94 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
		//buildCanFrameToUSB(rx_data, rx_header, Frame, &FrameLength);
		//vcp_send (Frame, FrameLength); //sample data to store in the fifo to send to the USB when this intterrupt is triggereed

	} else if (hcan->Instance == CAN2) {
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a13      	ldr	r2, [pc, #76]	; (8000bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d103      	bne.n	8000b84 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
		blinkLED(LED_CAN2_RECEIVE);
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f000 fd7d 	bl	800167c <blinkLED>
 8000b82:	e007      	b.n	8000b94 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>

	} else if (hcan->Instance == CAN3) {
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a0f      	ldr	r2, [pc, #60]	; (8000bc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d102      	bne.n	8000b94 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
		blinkLED(LED_CAN3_RECEIVE);
 8000b8e:	2002      	movs	r0, #2
 8000b90:	f000 fd74 	bl	800167c <blinkLED>
	}
	// this can be handle in a task in RTOS is used
	handleCANMessage(rx_header, rx_data, hcan->Instance);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	9304      	str	r3, [sp, #16]
 8000b9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b9e:	9303      	str	r3, [sp, #12]
 8000ba0:	466c      	mov	r4, sp
 8000ba2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ba6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000baa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000bae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bb4:	f000 f80a 	bl	8000bcc <handleCANMessage>

}
 8000bb8:	bf00      	nop
 8000bba:	3754      	adds	r7, #84	; 0x54
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd90      	pop	{r4, r7, pc}
 8000bc0:	40006400 	.word	0x40006400
 8000bc4:	40006800 	.word	0x40006800
 8000bc8:	40003400 	.word	0x40003400

08000bcc <handleCANMessage>:

void handleCANMessage(CAN_RxHeaderTypeDef  rx_header, uint8_t rx_data[], CAN_TypeDef *hcan)
{
 8000bcc:	b084      	sub	sp, #16
 8000bce:	b590      	push	{r4, r7, lr}
 8000bd0:	b099      	sub	sp, #100	; 0x64
 8000bd2:	af06      	add	r7, sp, #24
 8000bd4:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000bd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int decision;
	uint8_t Frame[30];
	uint8_t FrameLength;
	uint32_t can_msg_id;
	CAN_TxHeaderTypeDef tx_header;
	if (rx_header.IDE == CAN_ID_STD)
 8000bdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d105      	bne.n	8000bee <handleCANMessage+0x22>
	{
		can_msg_id = rx_header.StdId;
 8000be2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000be4:	63fb      	str	r3, [r7, #60]	; 0x3c
		tx_header.IDE = CAN_ID_STD;
 8000be6:	2300      	movs	r3, #0
 8000be8:	60bb      	str	r3, [r7, #8]
		tx_header.StdId = rx_header.StdId;
 8000bea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000bec:	603b      	str	r3, [r7, #0]
	}
	{
		can_msg_id = rx_header.ExtId;
 8000bee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
		tx_header.IDE = CAN_ID_EXT;
 8000bf2:	2304      	movs	r3, #4
 8000bf4:	60bb      	str	r3, [r7, #8]
		tx_header.StdId = rx_header.ExtId;
 8000bf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000bf8:	603b      	str	r3, [r7, #0]
	}
	tx_header.DLC = rx_header.DLC;
 8000bfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000bfc:	613b      	str	r3, [r7, #16]

	if (hcan == CAN1)
 8000bfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <handleCANMessage+0x108>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d11a      	bne.n	8000c3c <handleCANMessage+0x70>
	{
		//CANTransmit(CAN2, rx_data, tx_header);
		//CANTransmit(CAN3, rx_data, tx_header); //usb will replaces CAN3 for filtering
		//store in buffer for usb transmission
		buildCanFrameToUSB(rx_data, rx_header, Frame, &FrameLength);
 8000c06:	f107 031b 	add.w	r3, r7, #27
 8000c0a:	9305      	str	r3, [sp, #20]
 8000c0c:	f107 031c 	add.w	r3, r7, #28
 8000c10:	9304      	str	r3, [sp, #16]
 8000c12:	466c      	mov	r4, sp
 8000c14:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000c1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c24:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000c26:	f000 fc4c 	bl	80014c2 <buildCanFrameToUSB>
		vcp_send (Frame, FrameLength);
 8000c2a:	7efb      	ldrb	r3, [r7, #27]
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	4611      	mov	r1, r2
 8000c34:	4618      	mov	r0, r3
 8000c36:	f008 facf 	bl	80091d8 <vcp_send>
		arr[count] = can_msg_id;
		count++;

	}*/

}
 8000c3a:	e043      	b.n	8000cc4 <handleCANMessage+0xf8>
	else if (hcan == CAN2)
 8000c3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000c3e:	4a26      	ldr	r2, [pc, #152]	; (8000cd8 <handleCANMessage+0x10c>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d13f      	bne.n	8000cc4 <handleCANMessage+0xf8>
		for (int i = 0; i < count; i++)
 8000c44:	2300      	movs	r3, #0
 8000c46:	643b      	str	r3, [r7, #64]	; 0x40
 8000c48:	e00e      	b.n	8000c68 <handleCANMessage+0x9c>
			if (arr[i] == can_msg_id)
 8000c4a:	4a24      	ldr	r2, [pc, #144]	; (8000cdc <handleCANMessage+0x110>)
 8000c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d102      	bne.n	8000c5e <handleCANMessage+0x92>
				decision = 1;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	647b      	str	r3, [r7, #68]	; 0x44
				break;
 8000c5c:	e009      	b.n	8000c72 <handleCANMessage+0xa6>
				decision = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	647b      	str	r3, [r7, #68]	; 0x44
		for (int i = 0; i < count; i++)
 8000c62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c64:	3301      	adds	r3, #1
 8000c66:	643b      	str	r3, [r7, #64]	; 0x40
 8000c68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000c6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <handleCANMessage+0x114>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d3eb      	bcc.n	8000c4a <handleCANMessage+0x7e>
		if(!decision)
 8000c72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d125      	bne.n	8000cc4 <handleCANMessage+0xf8>
			CANTransmit(CAN2, rx_data, tx_header);
 8000c78:	466c      	mov	r4, sp
 8000c7a:	f107 0308 	add.w	r3, r7, #8
 8000c7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000c84:	463b      	mov	r3, r7
 8000c86:	cb0c      	ldmia	r3, {r2, r3}
 8000c88:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8000c8a:	4813      	ldr	r0, [pc, #76]	; (8000cd8 <handleCANMessage+0x10c>)
 8000c8c:	f7ff ff10 	bl	8000ab0 <CANTransmit>
			buildCanFrameToUSB(rx_data, rx_header, Frame, &FrameLength);
 8000c90:	f107 031b 	add.w	r3, r7, #27
 8000c94:	9305      	str	r3, [sp, #20]
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	9304      	str	r3, [sp, #16]
 8000c9c:	466c      	mov	r4, sp
 8000c9e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ca2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ca4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000ca8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000cac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cae:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000cb0:	f000 fc07 	bl	80014c2 <buildCanFrameToUSB>
			vcp_send (Frame, FrameLength);
 8000cb4:	7efb      	ldrb	r3, [r7, #27]
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	f107 031c 	add.w	r3, r7, #28
 8000cbc:	4611      	mov	r1, r2
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f008 fa8a 	bl	80091d8 <vcp_send>
}
 8000cc4:	bf00      	nop
 8000cc6:	374c      	adds	r7, #76	; 0x4c
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000cce:	b004      	add	sp, #16
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	40006400 	.word	0x40006400
 8000cd8:	40006800 	.word	0x40006800
 8000cdc:	200001a8 	.word	0x200001a8
 8000ce0:	20000590 	.word	0x20000590

08000ce4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08c      	sub	sp, #48	; 0x30
 8000ce8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cea:	f107 031c 	add.w	r3, r7, #28
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfa:	4b45      	ldr	r3, [pc, #276]	; (8000e10 <MX_GPIO_Init+0x12c>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a44      	ldr	r2, [pc, #272]	; (8000e10 <MX_GPIO_Init+0x12c>)
 8000d00:	f043 0304 	orr.w	r3, r3, #4
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b42      	ldr	r3, [pc, #264]	; (8000e10 <MX_GPIO_Init+0x12c>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0304 	and.w	r3, r3, #4
 8000d0e:	61bb      	str	r3, [r7, #24]
 8000d10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d12:	4b3f      	ldr	r3, [pc, #252]	; (8000e10 <MX_GPIO_Init+0x12c>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a3e      	ldr	r2, [pc, #248]	; (8000e10 <MX_GPIO_Init+0x12c>)
 8000d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b3c      	ldr	r3, [pc, #240]	; (8000e10 <MX_GPIO_Init+0x12c>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d2a:	4b39      	ldr	r3, [pc, #228]	; (8000e10 <MX_GPIO_Init+0x12c>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a38      	ldr	r2, [pc, #224]	; (8000e10 <MX_GPIO_Init+0x12c>)
 8000d30:	f043 0310 	orr.w	r3, r3, #16
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b36      	ldr	r3, [pc, #216]	; (8000e10 <MX_GPIO_Init+0x12c>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0310 	and.w	r3, r3, #16
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d42:	4b33      	ldr	r3, [pc, #204]	; (8000e10 <MX_GPIO_Init+0x12c>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a32      	ldr	r2, [pc, #200]	; (8000e10 <MX_GPIO_Init+0x12c>)
 8000d48:	f043 0308 	orr.w	r3, r3, #8
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b30      	ldr	r3, [pc, #192]	; (8000e10 <MX_GPIO_Init+0x12c>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0308 	and.w	r3, r3, #8
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	4b2d      	ldr	r3, [pc, #180]	; (8000e10 <MX_GPIO_Init+0x12c>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a2c      	ldr	r2, [pc, #176]	; (8000e10 <MX_GPIO_Init+0x12c>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b2a      	ldr	r3, [pc, #168]	; (8000e10 <MX_GPIO_Init+0x12c>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d72:	4b27      	ldr	r3, [pc, #156]	; (8000e10 <MX_GPIO_Init+0x12c>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a26      	ldr	r2, [pc, #152]	; (8000e10 <MX_GPIO_Init+0x12c>)
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b24      	ldr	r3, [pc, #144]	; (8000e10 <MX_GPIO_Init+0x12c>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RGB_R_2_Pin|RGB_G_2_Pin|RGB_B_2_Pin, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f44f 5128 	mov.w	r1, #10752	; 0x2a00
 8000d90:	4820      	ldr	r0, [pc, #128]	; (8000e14 <MX_GPIO_Init+0x130>)
 8000d92:	f001 feb3 	bl	8002afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RGB_R_1_Pin|RGB_G_1_Pin|RGB_B_1_Pin, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000d9c:	481e      	ldr	r0, [pc, #120]	; (8000e18 <MX_GPIO_Init+0x134>)
 8000d9e:	f001 fead 	bl	8002afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RGB_R_3_Pin|RGB_G_3_Pin|RGB_B_3_Pin, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8000da8:	481c      	ldr	r0, [pc, #112]	; (8000e1c <MX_GPIO_Init+0x138>)
 8000daa:	f001 fea7 	bl	8002afc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = RGB_R_2_Pin|RGB_G_2_Pin|RGB_B_2_Pin;
 8000dae:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8000db2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db4:	2301      	movs	r3, #1
 8000db6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dc0:	f107 031c 	add.w	r3, r7, #28
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4813      	ldr	r0, [pc, #76]	; (8000e14 <MX_GPIO_Init+0x130>)
 8000dc8:	f001 fcec 	bl	80027a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = RGB_R_1_Pin|RGB_G_1_Pin|RGB_B_1_Pin;
 8000dcc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dde:	f107 031c 	add.w	r3, r7, #28
 8000de2:	4619      	mov	r1, r3
 8000de4:	480c      	ldr	r0, [pc, #48]	; (8000e18 <MX_GPIO_Init+0x134>)
 8000de6:	f001 fcdd 	bl	80027a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RGB_R_3_Pin|RGB_G_3_Pin|RGB_B_3_Pin;
 8000dea:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000dee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df0:	2301      	movs	r3, #1
 8000df2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	4619      	mov	r1, r3
 8000e02:	4806      	ldr	r0, [pc, #24]	; (8000e1c <MX_GPIO_Init+0x138>)
 8000e04:	f001 fcce 	bl	80027a4 <HAL_GPIO_Init>

}
 8000e08:	bf00      	nop
 8000e0a:	3730      	adds	r7, #48	; 0x30
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40021000 	.word	0x40021000
 8000e18:	40020c00 	.word	0x40020c00
 8000e1c:	40020800 	.word	0x40020800

08000e20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e20:	b5b0      	push	{r4, r5, r7, lr}
 8000e22:	b0a6      	sub	sp, #152	; 0x98
 8000e24:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e26:	f000 fcc6 	bl	80017b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e2a:	f000 f853 	bl	8000ed4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e2e:	f7ff ff59 	bl	8000ce4 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000e32:	f7ff fb83 	bl	800053c <MX_CAN1_Init>
  MX_CAN2_Init();
 8000e36:	f7ff fbbf 	bl	80005b8 <MX_CAN2_Init>
  MX_CAN3_Init();
 8000e3a:	f7ff fbfb 	bl	8000634 <MX_CAN3_Init>
  MX_USB_DEVICE_Init();
 8000e3e:	f008 f869 	bl	8008f14 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8000e42:	f000 f8bb 	bl	8000fbc <MX_RTC_Init>
	uint8_t FrameLength;
  uint8_t data[8];
  CAN_TxHeaderTypeDef   tx_header;

  /* USER CODE END 2 */
  allLEDsOff();
 8000e46:	f000 fa1f 	bl	8001288 <allLEDsOff>
  CAN1_Config_Filters();
 8000e4a:	f7ff fd77 	bl	800093c <CAN1_Config_Filters>
  CAN2_Config_Filters();
 8000e4e:	f7ff fdb3 	bl	80009b8 <CAN2_Config_Filters>
  CAN3_Config_Filters();
 8000e52:	f7ff fdef 	bl	8000a34 <CAN3_Config_Filters>
  vcp_init ();	//initialised FiFo
 8000e56:	f008 f9af 	bl	80091b8 <vcp_init>
uint8_t len;
  while (1)
  {
    /* USER CODE END WHILE */
	  // VCP demonstration - Echo all data received over VCP back to the host
	      len = vcp_recv (buf, 30);  // Read up to 1000 bytes
 8000e5a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000e5e:	211e      	movs	r1, #30
 8000e60:	4618      	mov	r0, r3
 8000e62:	f008 fa1b 	bl	800929c <vcp_recv>
 8000e66:	4603      	mov	r3, r0
 8000e68:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	      if (len > 0)
 8000e6c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d0f2      	beq.n	8000e5a <main+0x3a>
	      {
	    	  if (buf[0] == 0x74 || buf[0] == 0x54)
 8000e74:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000e78:	2b74      	cmp	r3, #116	; 0x74
 8000e7a:	d003      	beq.n	8000e84 <main+0x64>
 8000e7c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000e80:	2b54      	cmp	r3, #84	; 0x54
 8000e82:	d1ea      	bne.n	8000e5a <main+0x3a>
	    	  {
	    		  buildCanFrameUSB(buf, data, &tx_header);
 8000e84:	1d3a      	adds	r2, r7, #4
 8000e86:	f107 011c 	add.w	r1, r7, #28
 8000e8a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 fa38 	bl	8001304 <buildCanFrameUSB>
	    		  CANTransmit(CAN1, data, tx_header);
 8000e94:	f107 051c 	add.w	r5, r7, #28
 8000e98:	466c      	mov	r4, sp
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ea0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	cb0c      	ldmia	r3, {r2, r3}
 8000ea8:	4629      	mov	r1, r5
 8000eaa:	4807      	ldr	r0, [pc, #28]	; (8000ec8 <main+0xa8>)
 8000eac:	f7ff fe00 	bl	8000ab0 <CANTransmit>
	    		  arr[count] = tx_header.StdId;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <main+0xac>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	4906      	ldr	r1, [pc, #24]	; (8000ed0 <main+0xb0>)
 8000eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    		  count++;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <main+0xac>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	4a02      	ldr	r2, [pc, #8]	; (8000ecc <main+0xac>)
 8000ec4:	6013      	str	r3, [r2, #0]
	      len = vcp_recv (buf, 30);  // Read up to 1000 bytes
 8000ec6:	e7c8      	b.n	8000e5a <main+0x3a>
 8000ec8:	40006400 	.word	0x40006400
 8000ecc:	20000590 	.word	0x20000590
 8000ed0:	200001a8 	.word	0x200001a8

08000ed4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b094      	sub	sp, #80	; 0x50
 8000ed8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eda:	f107 031c 	add.w	r3, r7, #28
 8000ede:	2234      	movs	r2, #52	; 0x34
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f008 fefc 	bl	8009ce0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee8:	f107 0308 	add.w	r3, r7, #8
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ef8:	f003 f8ec 	bl	80040d4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efc:	4b2a      	ldr	r3, [pc, #168]	; (8000fa8 <SystemClock_Config+0xd4>)
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	4a29      	ldr	r2, [pc, #164]	; (8000fa8 <SystemClock_Config+0xd4>)
 8000f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f06:	6413      	str	r3, [r2, #64]	; 0x40
 8000f08:	4b27      	ldr	r3, [pc, #156]	; (8000fa8 <SystemClock_Config+0xd4>)
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f14:	4b25      	ldr	r3, [pc, #148]	; (8000fac <SystemClock_Config+0xd8>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f1c:	4a23      	ldr	r2, [pc, #140]	; (8000fac <SystemClock_Config+0xd8>)
 8000f1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f22:	6013      	str	r3, [r2, #0]
 8000f24:	4b21      	ldr	r3, [pc, #132]	; (8000fac <SystemClock_Config+0xd8>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f2c:	603b      	str	r3, [r7, #0]
 8000f2e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000f30:	2309      	movs	r3, #9
 8000f32:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f38:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f46:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000f48:	230f      	movs	r3, #15
 8000f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000f4c:	2390      	movs	r3, #144	; 0x90
 8000f4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f50:	2302      	movs	r3, #2
 8000f52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000f54:	2305      	movs	r3, #5
 8000f56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f5c:	f107 031c 	add.w	r3, r7, #28
 8000f60:	4618      	mov	r0, r3
 8000f62:	f003 f8c7 	bl	80040f4 <HAL_RCC_OscConfig>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000f6c:	f000 f820 	bl	8000fb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f70:	230f      	movs	r3, #15
 8000f72:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f74:	2302      	movs	r3, #2
 8000f76:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f7c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f86:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	2103      	movs	r1, #3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f003 fb5e 	bl	8004650 <HAL_RCC_ClockConfig>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000f9a:	f000 f809 	bl	8000fb0 <Error_Handler>
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	3750      	adds	r7, #80	; 0x50
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40007000 	.word	0x40007000

08000fb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb4:	b672      	cpsid	i
}
 8000fb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <Error_Handler+0x8>
	...

08000fbc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fd4:	4b24      	ldr	r3, [pc, #144]	; (8001068 <MX_RTC_Init+0xac>)
 8000fd6:	4a25      	ldr	r2, [pc, #148]	; (800106c <MX_RTC_Init+0xb0>)
 8000fd8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000fda:	4b23      	ldr	r3, [pc, #140]	; (8001068 <MX_RTC_Init+0xac>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000fe0:	4b21      	ldr	r3, [pc, #132]	; (8001068 <MX_RTC_Init+0xac>)
 8000fe2:	227f      	movs	r2, #127	; 0x7f
 8000fe4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000fe6:	4b20      	ldr	r3, [pc, #128]	; (8001068 <MX_RTC_Init+0xac>)
 8000fe8:	22ff      	movs	r2, #255	; 0xff
 8000fea:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fec:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <MX_RTC_Init+0xac>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ff2:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <MX_RTC_Init+0xac>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ff8:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <MX_RTC_Init+0xac>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ffe:	481a      	ldr	r0, [pc, #104]	; (8001068 <MX_RTC_Init+0xac>)
 8001000:	f004 f90c 	bl	800521c <HAL_RTC_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800100a:	f7ff ffd1 	bl	8000fb0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800100e:	2300      	movs	r3, #0
 8001010:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001012:	2300      	movs	r3, #0
 8001014:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001016:	2300      	movs	r3, #0
 8001018:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	2201      	movs	r2, #1
 8001026:	4619      	mov	r1, r3
 8001028:	480f      	ldr	r0, [pc, #60]	; (8001068 <MX_RTC_Init+0xac>)
 800102a:	f004 f97b 	bl	8005324 <HAL_RTC_SetTime>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001034:	f7ff ffbc 	bl	8000fb0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001038:	2301      	movs	r3, #1
 800103a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800103c:	2301      	movs	r3, #1
 800103e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001040:	2301      	movs	r3, #1
 8001042:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001044:	2300      	movs	r3, #0
 8001046:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001048:	463b      	mov	r3, r7
 800104a:	2201      	movs	r2, #1
 800104c:	4619      	mov	r1, r3
 800104e:	4806      	ldr	r0, [pc, #24]	; (8001068 <MX_RTC_Init+0xac>)
 8001050:	f004 fa02 	bl	8005458 <HAL_RTC_SetDate>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800105a:	f7ff ffa9 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000630 	.word	0x20000630
 800106c:	40002800 	.word	0x40002800

08001070 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b0a6      	sub	sp, #152	; 0x98
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001078:	f107 0308 	add.w	r3, r7, #8
 800107c:	2290      	movs	r2, #144	; 0x90
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f008 fe2d 	bl	8009ce0 <memset>
  if(rtcHandle->Instance==RTC)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a0e      	ldr	r2, [pc, #56]	; (80010c4 <HAL_RTC_MspInit+0x54>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d114      	bne.n	80010ba <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001090:	2320      	movs	r3, #32
 8001092:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001094:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001098:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800109a:	f107 0308 	add.w	r3, r7, #8
 800109e:	4618      	mov	r0, r3
 80010a0:	f003 fc94 	bl	80049cc <HAL_RCCEx_PeriphCLKConfig>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80010aa:	f7ff ff81 	bl	8000fb0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_RTC_MspInit+0x58>)
 80010b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010b2:	4a05      	ldr	r2, [pc, #20]	; (80010c8 <HAL_RTC_MspInit+0x58>)
 80010b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010b8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80010ba:	bf00      	nop
 80010bc:	3798      	adds	r7, #152	; 0x98
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40002800 	.word	0x40002800
 80010c8:	40023800 	.word	0x40023800

080010cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <HAL_MspInit+0x44>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	4a0e      	ldr	r2, [pc, #56]	; (8001110 <HAL_MspInit+0x44>)
 80010d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010dc:	6413      	str	r3, [r2, #64]	; 0x40
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <HAL_MspInit+0x44>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <HAL_MspInit+0x44>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	4a08      	ldr	r2, [pc, #32]	; (8001110 <HAL_MspInit+0x44>)
 80010f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f4:	6453      	str	r3, [r2, #68]	; 0x44
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_MspInit+0x44>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800

08001114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <NMI_Handler+0x4>

0800111a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <HardFault_Handler+0x4>

08001120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <MemManage_Handler+0x4>

08001126 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <BusFault_Handler+0x4>

0800112c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <UsageFault_Handler+0x4>

08001132 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001160:	f000 fb66 	bl	8001830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  vcp_service ();
 8001164:	f007 ffde 	bl	8009124 <vcp_service>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}

0800116c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001170:	4802      	ldr	r0, [pc, #8]	; (800117c <CAN1_TX_IRQHandler+0x10>)
 8001172:	f000 ffd5 	bl	8002120 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000594 	.word	0x20000594

08001180 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001184:	4802      	ldr	r0, [pc, #8]	; (8001190 <CAN1_RX0_IRQHandler+0x10>)
 8001186:	f000 ffcb 	bl	8002120 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000594 	.word	0x20000594

08001194 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001198:	4802      	ldr	r0, [pc, #8]	; (80011a4 <CAN2_TX_IRQHandler+0x10>)
 800119a:	f000 ffc1 	bl	8002120 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200005bc 	.word	0x200005bc

080011a8 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80011ac:	4802      	ldr	r0, [pc, #8]	; (80011b8 <CAN2_RX0_IRQHandler+0x10>)
 80011ae:	f000 ffb7 	bl	8002120 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200005bc 	.word	0x200005bc

080011bc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <OTG_FS_IRQHandler+0x10>)
 80011c2:	f001 fe14 	bl	8002dee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20001b58 	.word	0x20001b58

080011d0 <CAN3_TX_IRQHandler>:

/**
  * @brief This function handles CAN3 TX interrupt.
  */
void CAN3_TX_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_TX_IRQn 0 */

  /* USER CODE END CAN3_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 80011d4:	4802      	ldr	r0, [pc, #8]	; (80011e0 <CAN3_TX_IRQHandler+0x10>)
 80011d6:	f000 ffa3 	bl	8002120 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_TX_IRQn 1 */

  /* USER CODE END CAN3_TX_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200005e4 	.word	0x200005e4

080011e4 <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX0_IRQn 0 */

  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 80011e8:	4802      	ldr	r0, [pc, #8]	; (80011f4 <CAN3_RX0_IRQHandler+0x10>)
 80011ea:	f000 ff99 	bl	8002120 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */

  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200005e4 	.word	0x200005e4

080011f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001200:	4a14      	ldr	r2, [pc, #80]	; (8001254 <_sbrk+0x5c>)
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <_sbrk+0x60>)
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800120c:	4b13      	ldr	r3, [pc, #76]	; (800125c <_sbrk+0x64>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d102      	bne.n	800121a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <_sbrk+0x64>)
 8001216:	4a12      	ldr	r2, [pc, #72]	; (8001260 <_sbrk+0x68>)
 8001218:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <_sbrk+0x64>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	429a      	cmp	r2, r3
 8001226:	d207      	bcs.n	8001238 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001228:	f008 fd12 	bl	8009c50 <__errno>
 800122c:	4603      	mov	r3, r0
 800122e:	220c      	movs	r2, #12
 8001230:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001232:	f04f 33ff 	mov.w	r3, #4294967295
 8001236:	e009      	b.n	800124c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <_sbrk+0x64>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800123e:	4b07      	ldr	r3, [pc, #28]	; (800125c <_sbrk+0x64>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4413      	add	r3, r2
 8001246:	4a05      	ldr	r2, [pc, #20]	; (800125c <_sbrk+0x64>)
 8001248:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800124a:	68fb      	ldr	r3, [r7, #12]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20080000 	.word	0x20080000
 8001258:	00004000 	.word	0x00004000
 800125c:	20000650 	.word	0x20000650
 8001260:	20002070 	.word	0x20002070

08001264 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <SystemInit+0x20>)
 800126a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800126e:	4a05      	ldr	r2, [pc, #20]	; (8001284 <SystemInit+0x20>)
 8001270:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001274:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <allLEDsOff>:
/* Private function prototypes -----------------------------------------------*/

/* Private function prototypes -----------------------------------------------*/

/* USER CODE BEGIN 1 */
void allLEDsOff(void) {
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RGB_R_1_GPIO_Port, RGB_R_1_Pin, GPIO_PIN_SET);
 800128c:	2201      	movs	r2, #1
 800128e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001292:	4819      	ldr	r0, [pc, #100]	; (80012f8 <allLEDsOff+0x70>)
 8001294:	f001 fc32 	bl	8002afc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RGB_G_1_GPIO_Port, RGB_G_1_Pin, GPIO_PIN_SET);
 8001298:	2201      	movs	r2, #1
 800129a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800129e:	4816      	ldr	r0, [pc, #88]	; (80012f8 <allLEDsOff+0x70>)
 80012a0:	f001 fc2c 	bl	8002afc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RGB_B_1_GPIO_Port, RGB_B_1_Pin, GPIO_PIN_SET);
 80012a4:	2201      	movs	r2, #1
 80012a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012aa:	4813      	ldr	r0, [pc, #76]	; (80012f8 <allLEDsOff+0x70>)
 80012ac:	f001 fc26 	bl	8002afc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RGB_R_2_GPIO_Port, RGB_R_2_Pin, GPIO_PIN_SET);
 80012b0:	2201      	movs	r2, #1
 80012b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012b6:	4811      	ldr	r0, [pc, #68]	; (80012fc <allLEDsOff+0x74>)
 80012b8:	f001 fc20 	bl	8002afc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RGB_G_2_GPIO_Port, RGB_G_2_Pin, GPIO_PIN_SET);
 80012bc:	2201      	movs	r2, #1
 80012be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012c2:	480e      	ldr	r0, [pc, #56]	; (80012fc <allLEDsOff+0x74>)
 80012c4:	f001 fc1a 	bl	8002afc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RGB_B_2_GPIO_Port, RGB_B_2_Pin, GPIO_PIN_SET);
 80012c8:	2201      	movs	r2, #1
 80012ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ce:	480b      	ldr	r0, [pc, #44]	; (80012fc <allLEDsOff+0x74>)
 80012d0:	f001 fc14 	bl	8002afc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RGB_R_3_GPIO_Port, RGB_R_3_Pin, GPIO_PIN_SET);
 80012d4:	2201      	movs	r2, #1
 80012d6:	2140      	movs	r1, #64	; 0x40
 80012d8:	4809      	ldr	r0, [pc, #36]	; (8001300 <allLEDsOff+0x78>)
 80012da:	f001 fc0f 	bl	8002afc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RGB_G_3_GPIO_Port, RGB_G_3_Pin, GPIO_PIN_SET);
 80012de:	2201      	movs	r2, #1
 80012e0:	2180      	movs	r1, #128	; 0x80
 80012e2:	4807      	ldr	r0, [pc, #28]	; (8001300 <allLEDsOff+0x78>)
 80012e4:	f001 fc0a 	bl	8002afc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RGB_B_3_GPIO_Port, RGB_B_3_Pin, GPIO_PIN_SET);
 80012e8:	2201      	movs	r2, #1
 80012ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ee:	4804      	ldr	r0, [pc, #16]	; (8001300 <allLEDsOff+0x78>)
 80012f0:	f001 fc04 	bl	8002afc <HAL_GPIO_WritePin>
}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40020c00 	.word	0x40020c00
 80012fc:	40021000 	.word	0x40021000
 8001300:	40020800 	.word	0x40020800

08001304 <buildCanFrameUSB>:
		break;
	}
}

void buildCanFrameUSB(uint8_t* Frame, uint8_t data[],  CAN_TxHeaderTypeDef*  tx_header)
{
 8001304:	b480      	push	{r7}
 8001306:	b08d      	sub	sp, #52	; 0x34
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
	uint8_t idx = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t messageID = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t messageLength = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	75fb      	strb	r3, [r7, #23]
	if(Frame[idx] == 0x74)
 800131e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	4413      	add	r3, r2
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b74      	cmp	r3, #116	; 0x74
 800132a:	d12c      	bne.n	8001386 <buildCanFrameUSB+0x82>
	{
		for (int i = idx + 1; i <= 3; ++i)
 800132c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001330:	3301      	adds	r3, #1
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
 8001334:	e01d      	b.n	8001372 <buildCanFrameUSB+0x6e>
		{
			messageID = (messageID << 4) | (Frame[i] < 0x39 ? Frame[i] & 0x0F : (Frame[i] + 0xA) - 0x41);
 8001336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001338:	011a      	lsls	r2, r3, #4
 800133a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133c:	68f9      	ldr	r1, [r7, #12]
 800133e:	440b      	add	r3, r1
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b38      	cmp	r3, #56	; 0x38
 8001344:	d806      	bhi.n	8001354 <buildCanFrameUSB+0x50>
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	68f9      	ldr	r1, [r7, #12]
 800134a:	440b      	add	r3, r1
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	e004      	b.n	800135e <buildCanFrameUSB+0x5a>
 8001354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001356:	68f9      	ldr	r1, [r7, #12]
 8001358:	440b      	add	r3, r1
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	3b37      	subs	r3, #55	; 0x37
 800135e:	4313      	orrs	r3, r2
 8001360:	62bb      	str	r3, [r7, #40]	; 0x28
			idx++;
 8001362:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001366:	3301      	adds	r3, #1
 8001368:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (int i = idx + 1; i <= 3; ++i)
 800136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136e:	3301      	adds	r3, #1
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	2b03      	cmp	r3, #3
 8001376:	ddde      	ble.n	8001336 <buildCanFrameUSB+0x32>
		}
		tx_header->IDE = CAN_ID_STD;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
		tx_header->StdId = messageID;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	e03d      	b.n	8001402 <buildCanFrameUSB+0xfe>

	}
	else
	{
		for (int i = idx + 1; i < 3; ++i)
 8001386:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800138a:	3301      	adds	r3, #1
 800138c:	623b      	str	r3, [r7, #32]
 800138e:	e02f      	b.n	80013f0 <buildCanFrameUSB+0xec>
		{
			messageID = (messageID << 4) | (Frame[idx += 1] < 0x39 ? Frame[idx += 1] & 0x0F : (Frame[idx += 1] + 0xA) - 0x41);
 8001390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001392:	011a      	lsls	r2, r3, #4
 8001394:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001398:	3301      	adds	r3, #1
 800139a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800139e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013a2:	68f9      	ldr	r1, [r7, #12]
 80013a4:	440b      	add	r3, r1
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b38      	cmp	r3, #56	; 0x38
 80013aa:	d80c      	bhi.n	80013c6 <buildCanFrameUSB+0xc2>
 80013ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013b0:	3301      	adds	r3, #1
 80013b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80013b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013ba:	68f9      	ldr	r1, [r7, #12]
 80013bc:	440b      	add	r3, r1
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	f003 030f 	and.w	r3, r3, #15
 80013c4:	e00a      	b.n	80013dc <buildCanFrameUSB+0xd8>
 80013c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013ca:	3301      	adds	r3, #1
 80013cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80013d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013d4:	68f9      	ldr	r1, [r7, #12]
 80013d6:	440b      	add	r3, r1
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	3b37      	subs	r3, #55	; 0x37
 80013dc:	4313      	orrs	r3, r2
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
			idx++;
 80013e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013e4:	3301      	adds	r3, #1
 80013e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (int i = idx + 1; i < 3; ++i)
 80013ea:	6a3b      	ldr	r3, [r7, #32]
 80013ec:	3301      	adds	r3, #1
 80013ee:	623b      	str	r3, [r7, #32]
 80013f0:	6a3b      	ldr	r3, [r7, #32]
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	ddcc      	ble.n	8001390 <buildCanFrameUSB+0x8c>
		}
		tx_header->IDE = CAN_ID_EXT;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2204      	movs	r2, #4
 80013fa:	609a      	str	r2, [r3, #8]
		tx_header->ExtId = messageID;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001400:	605a      	str	r2, [r3, #4]
	}

	messageLength = Frame[idx + 1] & 0x0F;
 8001402:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001406:	3301      	adds	r3, #1
 8001408:	68fa      	ldr	r2, [r7, #12]
 800140a:	4413      	add	r3, r2
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	75fb      	strb	r3, [r7, #23]
	idx++;
 8001414:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001418:	3301      	adds	r3, #1
 800141a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	for(int i = 0; i < messageLength; ++i)
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
 8001422:	e03e      	b.n	80014a2 <buildCanFrameUSB+0x19e>
	{
		data[i] = 0;
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	4413      	add	r3, r2
 800142a:	2200      	movs	r2, #0
 800142c:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 2; ++j)
 800142e:	2300      	movs	r3, #0
 8001430:	61bb      	str	r3, [r7, #24]
 8001432:	e030      	b.n	8001496 <buildCanFrameUSB+0x192>
		{
			data[i] = (data[i] << 4) | (Frame[idx + 1] < 0x39 ? Frame[idx + 1] & 0x0F : (Frame[idx + 1] + 0xA) - 0x41);
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	4413      	add	r3, r2
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	011b      	lsls	r3, r3, #4
 800143e:	b25a      	sxtb	r2, r3
 8001440:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001444:	3301      	adds	r3, #1
 8001446:	68f9      	ldr	r1, [r7, #12]
 8001448:	440b      	add	r3, r1
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b38      	cmp	r3, #56	; 0x38
 800144e:	d80a      	bhi.n	8001466 <buildCanFrameUSB+0x162>
 8001450:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001454:	3301      	adds	r3, #1
 8001456:	68f9      	ldr	r1, [r7, #12]
 8001458:	440b      	add	r3, r1
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	b25b      	sxtb	r3, r3
 800145e:	f003 030f 	and.w	r3, r3, #15
 8001462:	b25b      	sxtb	r3, r3
 8001464:	e008      	b.n	8001478 <buildCanFrameUSB+0x174>
 8001466:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800146a:	3301      	adds	r3, #1
 800146c:	68f9      	ldr	r1, [r7, #12]
 800146e:	440b      	add	r3, r1
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	3b37      	subs	r3, #55	; 0x37
 8001474:	b2db      	uxtb	r3, r3
 8001476:	b25b      	sxtb	r3, r3
 8001478:	4313      	orrs	r3, r2
 800147a:	b259      	sxtb	r1, r3
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	4413      	add	r3, r2
 8001482:	b2ca      	uxtb	r2, r1
 8001484:	701a      	strb	r2, [r3, #0]
			idx++;
 8001486:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800148a:	3301      	adds	r3, #1
 800148c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (int j = 0; j < 2; ++j)
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	3301      	adds	r3, #1
 8001494:	61bb      	str	r3, [r7, #24]
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	2b01      	cmp	r3, #1
 800149a:	ddcb      	ble.n	8001434 <buildCanFrameUSB+0x130>
	for(int i = 0; i < messageLength; ++i)
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	3301      	adds	r3, #1
 80014a0:	61fb      	str	r3, [r7, #28]
 80014a2:	7dfb      	ldrb	r3, [r7, #23]
 80014a4:	69fa      	ldr	r2, [r7, #28]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	dbbc      	blt.n	8001424 <buildCanFrameUSB+0x120>
		}
	}
	tx_header->DLC = messageLength;
 80014aa:	7dfa      	ldrb	r2, [r7, #23]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	611a      	str	r2, [r3, #16]
	tx_header->RTR = CAN_RTR_DATA;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	60da      	str	r2, [r3, #12]

}
 80014b6:	bf00      	nop
 80014b8:	3734      	adds	r7, #52	; 0x34
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <buildCanFrameToUSB>:



void buildCanFrameToUSB(uint8_t data[], CAN_RxHeaderTypeDef  rx_header, uint8_t* Frame, uint8_t* FrameLength )
{
 80014c2:	b084      	sub	sp, #16
 80014c4:	b480      	push	{r7}
 80014c6:	b089      	sub	sp, #36	; 0x24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80014d0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t idx = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	77fb      	strb	r3, [r7, #31]
	uint32_t can_msg_id;
	uint8_t first = 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	75fb      	strb	r3, [r7, #23]
	if (rx_header.IDE == 0)
 80014dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d107      	bne.n	80014f2 <buildCanFrameToUSB+0x30>
	{
		Frame[idx] = 0x74;
 80014e2:	7ffb      	ldrb	r3, [r7, #31]
 80014e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80014e6:	4413      	add	r3, r2
 80014e8:	2274      	movs	r2, #116	; 0x74
 80014ea:	701a      	strb	r2, [r3, #0]
		can_msg_id = rx_header.StdId;
 80014ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ee:	61bb      	str	r3, [r7, #24]
 80014f0:	e006      	b.n	8001500 <buildCanFrameToUSB+0x3e>
	}
	else
	{
		Frame[idx] = 0x54;
 80014f2:	7ffb      	ldrb	r3, [r7, #31]
 80014f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80014f6:	4413      	add	r3, r2
 80014f8:	2254      	movs	r2, #84	; 0x54
 80014fa:	701a      	strb	r2, [r3, #0]
		can_msg_id = rx_header.ExtId;
 80014fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014fe:	61bb      	str	r3, [r7, #24]
	}


	for(int i = 0; i < 8; i++)
 8001500:	2300      	movs	r3, #0
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	e03c      	b.n	8001580 <buildCanFrameToUSB+0xbe>
	{
		if (can_msg_id >> 28)
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	0f1b      	lsrs	r3, r3, #28
 800150a:	2b00      	cmp	r3, #0
 800150c:	d019      	beq.n	8001542 <buildCanFrameToUSB+0x80>
		{
			Frame[idx += 1] = (((can_msg_id >> 28) & 0xFF) < 0xA) ? (can_msg_id >> 28) + '0' : (can_msg_id >> 28) + 'A' - 10;
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	0f1b      	lsrs	r3, r3, #28
 8001512:	2b09      	cmp	r3, #9
 8001514:	d805      	bhi.n	8001522 <buildCanFrameToUSB+0x60>
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	0f1b      	lsrs	r3, r3, #28
 800151a:	b2db      	uxtb	r3, r3
 800151c:	3330      	adds	r3, #48	; 0x30
 800151e:	b2db      	uxtb	r3, r3
 8001520:	e004      	b.n	800152c <buildCanFrameToUSB+0x6a>
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	0f1b      	lsrs	r3, r3, #28
 8001526:	b2db      	uxtb	r3, r3
 8001528:	3337      	adds	r3, #55	; 0x37
 800152a:	b2db      	uxtb	r3, r3
 800152c:	7ffa      	ldrb	r2, [r7, #31]
 800152e:	3201      	adds	r2, #1
 8001530:	77fa      	strb	r2, [r7, #31]
 8001532:	7ffa      	ldrb	r2, [r7, #31]
 8001534:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001536:	440a      	add	r2, r1
 8001538:	7013      	strb	r3, [r2, #0]
			first++;
 800153a:	7dfb      	ldrb	r3, [r7, #23]
 800153c:	3301      	adds	r3, #1
 800153e:	75fb      	strb	r3, [r7, #23]
 8001540:	e018      	b.n	8001574 <buildCanFrameToUSB+0xb2>

		}
		else if( first != 0)
 8001542:	7dfb      	ldrb	r3, [r7, #23]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d015      	beq.n	8001574 <buildCanFrameToUSB+0xb2>
		{
		    Frame[idx += 1] = (((can_msg_id >> 28) & 0xFF) < 0xA) ? (can_msg_id >> 28) + '0' : (can_msg_id >> 28) + 'A' - 10;
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	0f1b      	lsrs	r3, r3, #28
 800154c:	2b09      	cmp	r3, #9
 800154e:	d805      	bhi.n	800155c <buildCanFrameToUSB+0x9a>
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	0f1b      	lsrs	r3, r3, #28
 8001554:	b2db      	uxtb	r3, r3
 8001556:	3330      	adds	r3, #48	; 0x30
 8001558:	b2db      	uxtb	r3, r3
 800155a:	e004      	b.n	8001566 <buildCanFrameToUSB+0xa4>
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	0f1b      	lsrs	r3, r3, #28
 8001560:	b2db      	uxtb	r3, r3
 8001562:	3337      	adds	r3, #55	; 0x37
 8001564:	b2db      	uxtb	r3, r3
 8001566:	7ffa      	ldrb	r2, [r7, #31]
 8001568:	3201      	adds	r2, #1
 800156a:	77fa      	strb	r2, [r7, #31]
 800156c:	7ffa      	ldrb	r2, [r7, #31]
 800156e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001570:	440a      	add	r2, r1
 8001572:	7013      	strb	r3, [r2, #0]
		}
		can_msg_id = can_msg_id << 4;
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	011b      	lsls	r3, r3, #4
 8001578:	61bb      	str	r3, [r7, #24]
	for(int i = 0; i < 8; i++)
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	3301      	adds	r3, #1
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	2b07      	cmp	r3, #7
 8001584:	ddbf      	ble.n	8001506 <buildCanFrameToUSB+0x44>

	}
	Frame[idx += 1] = ((rx_header.DLC & 0x0F) < 0xA) ? (rx_header.DLC & 0x0F) + '0' : (rx_header.DLC & 0xF) + 'A' - 10;
 8001586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001588:	f003 030f 	and.w	r3, r3, #15
 800158c:	2b09      	cmp	r3, #9
 800158e:	d807      	bhi.n	80015a0 <buildCanFrameToUSB+0xde>
 8001590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001592:	b2db      	uxtb	r3, r3
 8001594:	f003 030f 	and.w	r3, r3, #15
 8001598:	b2db      	uxtb	r3, r3
 800159a:	3330      	adds	r3, #48	; 0x30
 800159c:	b2db      	uxtb	r3, r3
 800159e:	e006      	b.n	80015ae <buildCanFrameToUSB+0xec>
 80015a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	f003 030f 	and.w	r3, r3, #15
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	3337      	adds	r3, #55	; 0x37
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	7ffa      	ldrb	r2, [r7, #31]
 80015b0:	3201      	adds	r2, #1
 80015b2:	77fa      	strb	r2, [r7, #31]
 80015b4:	7ffa      	ldrb	r2, [r7, #31]
 80015b6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80015b8:	440a      	add	r2, r1
 80015ba:	7013      	strb	r3, [r2, #0]


	for(int i = 0; i < rx_header.DLC; i++)
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	e044      	b.n	800164c <buildCanFrameToUSB+0x18a>
	{
		Frame[idx += 1] = (((data[i] >> 4) & 0xFF) < 0xA) ? (data[i] >> 4) + '0' : (data[i] >> 4) + 'A' - 10;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	4413      	add	r3, r2
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	091b      	lsrs	r3, r3, #4
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b09      	cmp	r3, #9
 80015d0:	d808      	bhi.n	80015e4 <buildCanFrameToUSB+0x122>
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	4413      	add	r3, r2
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	091b      	lsrs	r3, r3, #4
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	3330      	adds	r3, #48	; 0x30
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	e007      	b.n	80015f4 <buildCanFrameToUSB+0x132>
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	091b      	lsrs	r3, r3, #4
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	3337      	adds	r3, #55	; 0x37
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	7ffa      	ldrb	r2, [r7, #31]
 80015f6:	3201      	adds	r2, #1
 80015f8:	77fa      	strb	r2, [r7, #31]
 80015fa:	7ffa      	ldrb	r2, [r7, #31]
 80015fc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80015fe:	440a      	add	r2, r1
 8001600:	7013      	strb	r3, [r2, #0]
		Frame[idx += 1] = ((data[i] & 0x0F) < 0xA) ? (data[i] & 0x0F) + '0' : (data[i] & 0xF) + 'A' - 10;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	4413      	add	r3, r2
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	2b09      	cmp	r3, #9
 8001610:	dc09      	bgt.n	8001626 <buildCanFrameToUSB+0x164>
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	4413      	add	r3, r2
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	b2db      	uxtb	r3, r3
 8001620:	3330      	adds	r3, #48	; 0x30
 8001622:	b2db      	uxtb	r3, r3
 8001624:	e008      	b.n	8001638 <buildCanFrameToUSB+0x176>
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	4413      	add	r3, r2
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	b2db      	uxtb	r3, r3
 8001634:	3337      	adds	r3, #55	; 0x37
 8001636:	b2db      	uxtb	r3, r3
 8001638:	7ffa      	ldrb	r2, [r7, #31]
 800163a:	3201      	adds	r2, #1
 800163c:	77fa      	strb	r2, [r7, #31]
 800163e:	7ffa      	ldrb	r2, [r7, #31]
 8001640:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001642:	440a      	add	r2, r1
 8001644:	7013      	strb	r3, [r2, #0]
	for(int i = 0; i < rx_header.DLC; i++)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	3301      	adds	r3, #1
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	429a      	cmp	r2, r3
 8001652:	d8b6      	bhi.n	80015c2 <buildCanFrameToUSB+0x100>
	}
	Frame[idx += 1] = 0xD;
 8001654:	7ffb      	ldrb	r3, [r7, #31]
 8001656:	3301      	adds	r3, #1
 8001658:	77fb      	strb	r3, [r7, #31]
 800165a:	7ffb      	ldrb	r3, [r7, #31]
 800165c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800165e:	4413      	add	r3, r2
 8001660:	220d      	movs	r2, #13
 8001662:	701a      	strb	r2, [r3, #0]
	*FrameLength = idx + 1 ;
 8001664:	7ffb      	ldrb	r3, [r7, #31]
 8001666:	3301      	adds	r3, #1
 8001668:	b2da      	uxtb	r2, r3
 800166a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800166c:	701a      	strb	r2, [r3, #0]
}
 800166e:	bf00      	nop
 8001670:	3724      	adds	r7, #36	; 0x24
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	b004      	add	sp, #16
 800167a:	4770      	bx	lr

0800167c <blinkLED>:



void blinkLED(uint8_t blink_case) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]

	switch (blink_case) {
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	2b03      	cmp	r3, #3
 800168a:	d856      	bhi.n	800173a <blinkLED+0xbe>
 800168c:	a201      	add	r2, pc, #4	; (adr r2, 8001694 <blinkLED+0x18>)
 800168e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001692:	bf00      	nop
 8001694:	080016a5 	.word	0x080016a5
 8001698:	080016cb 	.word	0x080016cb
 800169c:	080016f1 	.word	0x080016f1
 80016a0:	08001717 	.word	0x08001717
		case LED_CAN1_RECEIVE:
			if (HAL_GetTick() - g_timers.can1_receive > LED_CAN1_RECEIVE_PERIOD_MS) {
 80016a4:	f000 f8d8 	bl	8001858 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	4b2a      	ldr	r3, [pc, #168]	; (8001754 <blinkLED+0xd8>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b64      	cmp	r3, #100	; 0x64
 80016b2:	d944      	bls.n	800173e <blinkLED+0xc2>
				HAL_GPIO_TogglePin(CAN1_RECEIVE_LED_PORT, CAN1_RECEIVE_LED_PIN);
 80016b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016b8:	4827      	ldr	r0, [pc, #156]	; (8001758 <blinkLED+0xdc>)
 80016ba:	f001 fa38 	bl	8002b2e <HAL_GPIO_TogglePin>
					g_timers.can1_receive = HAL_GetTick();
 80016be:	f000 f8cb 	bl	8001858 <HAL_GetTick>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4a23      	ldr	r2, [pc, #140]	; (8001754 <blinkLED+0xd8>)
 80016c6:	6093      	str	r3, [r2, #8]
			}
			break;
 80016c8:	e039      	b.n	800173e <blinkLED+0xc2>
		case LED_CAN2_RECEIVE:
			if (HAL_GetTick() - g_timers.can2_receive > LED_CAN2_RECEIVE_PERIOD_MS) {
 80016ca:	f000 f8c5 	bl	8001858 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	4b20      	ldr	r3, [pc, #128]	; (8001754 <blinkLED+0xd8>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b64      	cmp	r3, #100	; 0x64
 80016d8:	d933      	bls.n	8001742 <blinkLED+0xc6>
				HAL_GPIO_TogglePin(CAN2_RECEIVE_LED_PORT, CAN2_RECEIVE_LED_PIN);
 80016da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016de:	481f      	ldr	r0, [pc, #124]	; (800175c <blinkLED+0xe0>)
 80016e0:	f001 fa25 	bl	8002b2e <HAL_GPIO_TogglePin>
					g_timers.can2_receive = HAL_GetTick();
 80016e4:	f000 f8b8 	bl	8001858 <HAL_GetTick>
 80016e8:	4603      	mov	r3, r0
 80016ea:	4a1a      	ldr	r2, [pc, #104]	; (8001754 <blinkLED+0xd8>)
 80016ec:	60d3      	str	r3, [r2, #12]
			}
			break;
 80016ee:	e028      	b.n	8001742 <blinkLED+0xc6>
		case LED_CAN3_RECEIVE:
			if (HAL_GetTick() - g_timers.can3_receive > LED_CAN3_RECEIVE_PERIOD_MS) {
 80016f0:	f000 f8b2 	bl	8001858 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	4b17      	ldr	r3, [pc, #92]	; (8001754 <blinkLED+0xd8>)
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b64      	cmp	r3, #100	; 0x64
 80016fe:	d922      	bls.n	8001746 <blinkLED+0xca>
				HAL_GPIO_TogglePin(CAN3_RECEIVE_LED_PORT, CAN3_RECEIVE_LED_PIN);
 8001700:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001704:	4816      	ldr	r0, [pc, #88]	; (8001760 <blinkLED+0xe4>)
 8001706:	f001 fa12 	bl	8002b2e <HAL_GPIO_TogglePin>
					g_timers.can3_receive = HAL_GetTick();
 800170a:	f000 f8a5 	bl	8001858 <HAL_GetTick>
 800170e:	4603      	mov	r3, r0
 8001710:	4a10      	ldr	r2, [pc, #64]	; (8001754 <blinkLED+0xd8>)
 8001712:	6113      	str	r3, [r2, #16]
			}
			break;
 8001714:	e017      	b.n	8001746 <blinkLED+0xca>
		case LED_UDP_RECEIVE:
			if (HAL_GetTick() - g_timers.udp_receive > LED_UDP_RECEIVE_PERIOD_MS) {
 8001716:	f000 f89f 	bl	8001858 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <blinkLED+0xd8>)
 800171e:	695b      	ldr	r3, [r3, #20]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b64      	cmp	r3, #100	; 0x64
 8001724:	d911      	bls.n	800174a <blinkLED+0xce>
				HAL_GPIO_TogglePin(UDP_RECEIVE_LED_PORT, UDP_RECEIVE_LED_PIN);
 8001726:	2180      	movs	r1, #128	; 0x80
 8001728:	480d      	ldr	r0, [pc, #52]	; (8001760 <blinkLED+0xe4>)
 800172a:	f001 fa00 	bl	8002b2e <HAL_GPIO_TogglePin>
				g_timers.udp_receive = HAL_GetTick();
 800172e:	f000 f893 	bl	8001858 <HAL_GetTick>
 8001732:	4603      	mov	r3, r0
 8001734:	4a07      	ldr	r2, [pc, #28]	; (8001754 <blinkLED+0xd8>)
 8001736:	6153      	str	r3, [r2, #20]
			}
			break;
 8001738:	e007      	b.n	800174a <blinkLED+0xce>
		default:
			break;
 800173a:	bf00      	nop
 800173c:	e006      	b.n	800174c <blinkLED+0xd0>
			break;
 800173e:	bf00      	nop
 8001740:	e004      	b.n	800174c <blinkLED+0xd0>
			break;
 8001742:	bf00      	nop
 8001744:	e002      	b.n	800174c <blinkLED+0xd0>
			break;
 8001746:	bf00      	nop
 8001748:	e000      	b.n	800174c <blinkLED+0xd0>
			break;
 800174a:	bf00      	nop
	}

}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000618 	.word	0x20000618
 8001758:	40021000 	.word	0x40021000
 800175c:	40020c00 	.word	0x40020c00
 8001760:	40020800 	.word	0x40020800

08001764 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001764:	f8df d034 	ldr.w	sp, [pc, #52]	; 800179c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001768:	480d      	ldr	r0, [pc, #52]	; (80017a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800176a:	490e      	ldr	r1, [pc, #56]	; (80017a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800176c:	4a0e      	ldr	r2, [pc, #56]	; (80017a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800176e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001770:	e002      	b.n	8001778 <LoopCopyDataInit>

08001772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001776:	3304      	adds	r3, #4

08001778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800177a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800177c:	d3f9      	bcc.n	8001772 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800177e:	4a0b      	ldr	r2, [pc, #44]	; (80017ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001780:	4c0b      	ldr	r4, [pc, #44]	; (80017b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001784:	e001      	b.n	800178a <LoopFillZerobss>

08001786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001788:	3204      	adds	r2, #4

0800178a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800178a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800178c:	d3fb      	bcc.n	8001786 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800178e:	f7ff fd69 	bl	8001264 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001792:	f008 fa63 	bl	8009c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001796:	f7ff fb43 	bl	8000e20 <main>
  bx  lr    
 800179a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800179c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80017a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017a4:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 80017a8:	08009f6c 	.word	0x08009f6c
  ldr r2, =_sbss
 80017ac:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 80017b0:	20002070 	.word	0x20002070

080017b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017b4:	e7fe      	b.n	80017b4 <ADC_IRQHandler>

080017b6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ba:	2003      	movs	r0, #3
 80017bc:	f000 ffb0 	bl	8002720 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017c0:	200f      	movs	r0, #15
 80017c2:	f000 f805 	bl	80017d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017c6:	f7ff fc81 	bl	80010cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017d8:	4b12      	ldr	r3, [pc, #72]	; (8001824 <HAL_InitTick+0x54>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <HAL_InitTick+0x58>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	4619      	mov	r1, r3
 80017e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ee:	4618      	mov	r0, r3
 80017f0:	f000 ffcb 	bl	800278a <HAL_SYSTICK_Config>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e00e      	b.n	800181c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b0f      	cmp	r3, #15
 8001802:	d80a      	bhi.n	800181a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001804:	2200      	movs	r2, #0
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	f04f 30ff 	mov.w	r0, #4294967295
 800180c:	f000 ff93 	bl	8002736 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001810:	4a06      	ldr	r2, [pc, #24]	; (800182c <HAL_InitTick+0x5c>)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001816:	2300      	movs	r3, #0
 8001818:	e000      	b.n	800181c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
}
 800181c:	4618      	mov	r0, r3
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	2000000c 	.word	0x2000000c
 8001828:	20000014 	.word	0x20000014
 800182c:	20000010 	.word	0x20000010

08001830 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <HAL_IncTick+0x20>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	461a      	mov	r2, r3
 800183a:	4b06      	ldr	r3, [pc, #24]	; (8001854 <HAL_IncTick+0x24>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4413      	add	r3, r2
 8001840:	4a04      	ldr	r2, [pc, #16]	; (8001854 <HAL_IncTick+0x24>)
 8001842:	6013      	str	r3, [r2, #0]
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	20000014 	.word	0x20000014
 8001854:	20000654 	.word	0x20000654

08001858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  return uwTick;
 800185c:	4b03      	ldr	r3, [pc, #12]	; (800186c <HAL_GetTick+0x14>)
 800185e:	681b      	ldr	r3, [r3, #0]
}
 8001860:	4618      	mov	r0, r3
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	20000654 	.word	0x20000654

08001870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001878:	f7ff ffee 	bl	8001858 <HAL_GetTick>
 800187c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001888:	d005      	beq.n	8001896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800188a:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <HAL_Delay+0x44>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	461a      	mov	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4413      	add	r3, r2
 8001894:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001896:	bf00      	nop
 8001898:	f7ff ffde 	bl	8001858 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d8f7      	bhi.n	8001898 <HAL_Delay+0x28>
  {
  }
}
 80018a8:	bf00      	nop
 80018aa:	bf00      	nop
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000014 	.word	0x20000014

080018b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e0ed      	b.n	8001aa6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d102      	bne.n	80018dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7fe fee6 	bl	80006a8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f042 0201 	orr.w	r2, r2, #1
 80018ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018ec:	f7ff ffb4 	bl	8001858 <HAL_GetTick>
 80018f0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018f2:	e012      	b.n	800191a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018f4:	f7ff ffb0 	bl	8001858 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b0a      	cmp	r3, #10
 8001900:	d90b      	bls.n	800191a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001906:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2205      	movs	r2, #5
 8001912:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e0c5      	b.n	8001aa6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0e5      	beq.n	80018f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 0202 	bic.w	r2, r2, #2
 8001936:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001938:	f7ff ff8e 	bl	8001858 <HAL_GetTick>
 800193c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800193e:	e012      	b.n	8001966 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001940:	f7ff ff8a 	bl	8001858 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b0a      	cmp	r3, #10
 800194c:	d90b      	bls.n	8001966 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001952:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2205      	movs	r2, #5
 800195e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e09f      	b.n	8001aa6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1e5      	bne.n	8001940 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	7e1b      	ldrb	r3, [r3, #24]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d108      	bne.n	800198e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	e007      	b.n	800199e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800199c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	7e5b      	ldrb	r3, [r3, #25]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d108      	bne.n	80019b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	e007      	b.n	80019c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	7e9b      	ldrb	r3, [r3, #26]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d108      	bne.n	80019e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 0220 	orr.w	r2, r2, #32
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	e007      	b.n	80019f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 0220 	bic.w	r2, r2, #32
 80019f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	7edb      	ldrb	r3, [r3, #27]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d108      	bne.n	8001a0c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 0210 	bic.w	r2, r2, #16
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	e007      	b.n	8001a1c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f042 0210 	orr.w	r2, r2, #16
 8001a1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	7f1b      	ldrb	r3, [r3, #28]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d108      	bne.n	8001a36 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f042 0208 	orr.w	r2, r2, #8
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	e007      	b.n	8001a46 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 0208 	bic.w	r2, r2, #8
 8001a44:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	7f5b      	ldrb	r3, [r3, #29]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d108      	bne.n	8001a60 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f042 0204 	orr.w	r2, r2, #4
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	e007      	b.n	8001a70 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 0204 	bic.w	r2, r2, #4
 8001a6e:	601a      	str	r2, [r3, #0]
  }


  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	ea42 0103 	orr.w	r1, r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	1e5a      	subs	r2, r3, #1
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b087      	sub	sp, #28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ac6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001ac8:	7cfb      	ldrb	r3, [r7, #19]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d003      	beq.n	8001ad6 <HAL_CAN_ConfigFilter+0x26>
 8001ace:	7cfb      	ldrb	r3, [r7, #19]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	f040 80c7 	bne.w	8001c64 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a69      	ldr	r2, [pc, #420]	; (8001c80 <HAL_CAN_ConfigFilter+0x1d0>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d001      	beq.n	8001ae4 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001ae0:	4b68      	ldr	r3, [pc, #416]	; (8001c84 <HAL_CAN_ConfigFilter+0x1d4>)
 8001ae2:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001aea:	f043 0201 	orr.w	r2, r3, #1
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	4a63      	ldr	r2, [pc, #396]	; (8001c84 <HAL_CAN_ConfigFilter+0x1d4>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d111      	bne.n	8001b20 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b02:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	021b      	lsls	r3, r3, #8
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	f003 031f 	and.w	r3, r3, #31
 8001b28:	2201      	movs	r2, #1
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	401a      	ands	r2, r3
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d123      	bne.n	8001b92 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	401a      	ands	r2, r3
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b6c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	3248      	adds	r2, #72	; 0x48
 8001b72:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b86:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b88:	6979      	ldr	r1, [r7, #20]
 8001b8a:	3348      	adds	r3, #72	; 0x48
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	440b      	add	r3, r1
 8001b90:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d122      	bne.n	8001be0 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bba:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	3248      	adds	r2, #72	; 0x48
 8001bc0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bd4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bd6:	6979      	ldr	r1, [r7, #20]
 8001bd8:	3348      	adds	r3, #72	; 0x48
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	440b      	add	r3, r1
 8001bde:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d109      	bne.n	8001bfc <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	401a      	ands	r2, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001bfa:	e007      	b.n	8001c0c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	431a      	orrs	r2, r3
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d109      	bne.n	8001c28 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	401a      	ands	r2, r3
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001c26:	e007      	b.n	8001c38 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	431a      	orrs	r2, r3
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d107      	bne.n	8001c50 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c56:	f023 0201 	bic.w	r2, r3, #1
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001c60:	2300      	movs	r3, #0
 8001c62:	e006      	b.n	8001c72 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
  }
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	371c      	adds	r7, #28
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	40003400 	.word	0x40003400
 8001c84:	40006400 	.word	0x40006400

08001c88 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d12e      	bne.n	8001cfa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0201 	bic.w	r2, r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001cb4:	f7ff fdd0 	bl	8001858 <HAL_GetTick>
 8001cb8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cba:	e012      	b.n	8001ce2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cbc:	f7ff fdcc 	bl	8001858 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b0a      	cmp	r3, #10
 8001cc8:	d90b      	bls.n	8001ce2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2205      	movs	r2, #5
 8001cda:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e012      	b.n	8001d08 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1e5      	bne.n	8001cbc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	e006      	b.n	8001d08 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
  }
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b089      	sub	sp, #36	; 0x24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	603b      	str	r3, [r7, #0]
	//uint32_t aData1[5] = {'H', 'E', 'L', 'L', 'O'};
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d24:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d2e:	7ffb      	ldrb	r3, [r7, #31]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d003      	beq.n	8001d3c <HAL_CAN_AddTxMessage+0x2c>
 8001d34:	7ffb      	ldrb	r3, [r7, #31]
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	f040 80ad 	bne.w	8001e96 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10a      	bne.n	8001d5c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d105      	bne.n	8001d5c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 8095 	beq.w	8001e86 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	0e1b      	lsrs	r3, r3, #24
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001d66:	2201      	movs	r2, #1
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	409a      	lsls	r2, r3
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10d      	bne.n	8001d94 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d82:	68f9      	ldr	r1, [r7, #12]
 8001d84:	6809      	ldr	r1, [r1, #0]
 8001d86:	431a      	orrs	r2, r3
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	3318      	adds	r3, #24
 8001d8c:	011b      	lsls	r3, r3, #4
 8001d8e:	440b      	add	r3, r1
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	e00f      	b.n	8001db4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d9e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001da4:	68f9      	ldr	r1, [r7, #12]
 8001da6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001da8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	3318      	adds	r3, #24
 8001dae:	011b      	lsls	r3, r3, #4
 8001db0:	440b      	add	r3, r1
 8001db2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6819      	ldr	r1, [r3, #0]
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	691a      	ldr	r2, [r3, #16]
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	3318      	adds	r3, #24
 8001dc0:	011b      	lsls	r3, r3, #4
 8001dc2:	440b      	add	r3, r1
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	7d1b      	ldrb	r3, [r3, #20]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d111      	bne.n	8001df4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	3318      	adds	r3, #24
 8001dd8:	011b      	lsls	r3, r3, #4
 8001dda:	4413      	add	r3, r2
 8001ddc:	3304      	adds	r3, #4
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	6811      	ldr	r1, [r2, #0]
 8001de4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	3318      	adds	r3, #24
 8001dec:	011b      	lsls	r3, r3, #4
 8001dee:	440b      	add	r3, r1
 8001df0:	3304      	adds	r3, #4
 8001df2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3307      	adds	r3, #7
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	061a      	lsls	r2, r3, #24
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3306      	adds	r3, #6
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	041b      	lsls	r3, r3, #16
 8001e04:	431a      	orrs	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3305      	adds	r3, #5
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	021b      	lsls	r3, r3, #8
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	3204      	adds	r2, #4
 8001e14:	7812      	ldrb	r2, [r2, #0]
 8001e16:	4610      	mov	r0, r2
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	6811      	ldr	r1, [r2, #0]
 8001e1c:	ea43 0200 	orr.w	r2, r3, r0
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	011b      	lsls	r3, r3, #4
 8001e24:	440b      	add	r3, r1
 8001e26:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001e2a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3303      	adds	r3, #3
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	061a      	lsls	r2, r3, #24
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3302      	adds	r3, #2
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	041b      	lsls	r3, r3, #16
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3301      	adds	r3, #1
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	021b      	lsls	r3, r3, #8
 8001e46:	4313      	orrs	r3, r2
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	7812      	ldrb	r2, [r2, #0]
 8001e4c:	4610      	mov	r0, r2
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	6811      	ldr	r1, [r2, #0]
 8001e52:	ea43 0200 	orr.w	r2, r3, r0
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	011b      	lsls	r3, r3, #4
 8001e5a:	440b      	add	r3, r1
 8001e5c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001e60:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	3318      	adds	r3, #24
 8001e6a:	011b      	lsls	r3, r3, #4
 8001e6c:	4413      	add	r3, r2
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	6811      	ldr	r1, [r2, #0]
 8001e74:	f043 0201 	orr.w	r2, r3, #1
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	3318      	adds	r3, #24
 8001e7c:	011b      	lsls	r3, r3, #4
 8001e7e:	440b      	add	r3, r1
 8001e80:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001e82:	2300      	movs	r3, #0
 8001e84:	e00e      	b.n	8001ea4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e006      	b.n	8001ea4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
  }
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3724      	adds	r7, #36	; 0x24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b087      	sub	sp, #28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ec4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ec6:	7dfb      	ldrb	r3, [r7, #23]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d003      	beq.n	8001ed4 <HAL_CAN_GetRxMessage+0x24>
 8001ecc:	7dfb      	ldrb	r3, [r7, #23]
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	f040 80f3 	bne.w	80020ba <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10e      	bne.n	8001ef8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d116      	bne.n	8001f16 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e0e7      	b.n	80020c8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d107      	bne.n	8001f16 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e0d8      	b.n	80020c8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	331b      	adds	r3, #27
 8001f1e:	011b      	lsls	r3, r3, #4
 8001f20:	4413      	add	r3, r2
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0204 	and.w	r2, r3, #4
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10c      	bne.n	8001f4e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	331b      	adds	r3, #27
 8001f3c:	011b      	lsls	r3, r3, #4
 8001f3e:	4413      	add	r3, r2
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	0d5b      	lsrs	r3, r3, #21
 8001f44:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	e00b      	b.n	8001f66 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	331b      	adds	r3, #27
 8001f56:	011b      	lsls	r3, r3, #4
 8001f58:	4413      	add	r3, r2
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	08db      	lsrs	r3, r3, #3
 8001f5e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	331b      	adds	r3, #27
 8001f6e:	011b      	lsls	r3, r3, #4
 8001f70:	4413      	add	r3, r2
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0202 	and.w	r2, r3, #2
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	331b      	adds	r3, #27
 8001f84:	011b      	lsls	r3, r3, #4
 8001f86:	4413      	add	r3, r2
 8001f88:	3304      	adds	r3, #4
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 020f 	and.w	r2, r3, #15
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	331b      	adds	r3, #27
 8001f9c:	011b      	lsls	r3, r3, #4
 8001f9e:	4413      	add	r3, r2
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	0a1b      	lsrs	r3, r3, #8
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	331b      	adds	r3, #27
 8001fb4:	011b      	lsls	r3, r3, #4
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3304      	adds	r3, #4
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	0c1b      	lsrs	r3, r3, #16
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	4413      	add	r3, r2
 8001fce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	011b      	lsls	r3, r3, #4
 8001fe2:	4413      	add	r3, r2
 8001fe4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	0a1a      	lsrs	r2, r3, #8
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	011b      	lsls	r3, r3, #4
 8001ffc:	4413      	add	r3, r2
 8001ffe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	0c1a      	lsrs	r2, r3, #16
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	3302      	adds	r3, #2
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	011b      	lsls	r3, r3, #4
 8002016:	4413      	add	r3, r2
 8002018:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	0e1a      	lsrs	r2, r3, #24
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	3303      	adds	r3, #3
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	011b      	lsls	r3, r3, #4
 8002030:	4413      	add	r3, r2
 8002032:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	3304      	adds	r3, #4
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	011b      	lsls	r3, r3, #4
 8002048:	4413      	add	r3, r2
 800204a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	0a1a      	lsrs	r2, r3, #8
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	3305      	adds	r3, #5
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	011b      	lsls	r3, r3, #4
 8002062:	4413      	add	r3, r2
 8002064:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	0c1a      	lsrs	r2, r3, #16
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	3306      	adds	r3, #6
 8002070:	b2d2      	uxtb	r2, r2
 8002072:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	011b      	lsls	r3, r3, #4
 800207c:	4413      	add	r3, r2
 800207e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	0e1a      	lsrs	r2, r3, #24
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	3307      	adds	r3, #7
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d108      	bne.n	80020a6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68da      	ldr	r2, [r3, #12]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f042 0220 	orr.w	r2, r2, #32
 80020a2:	60da      	str	r2, [r3, #12]
 80020a4:	e007      	b.n	80020b6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	691a      	ldr	r2, [r3, #16]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f042 0220 	orr.w	r2, r2, #32
 80020b4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	e006      	b.n	80020c8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
  }
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	371c      	adds	r7, #28
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020e4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d002      	beq.n	80020f2 <HAL_CAN_ActivateNotification+0x1e>
 80020ec:	7bfb      	ldrb	r3, [r7, #15]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d109      	bne.n	8002106 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6959      	ldr	r1, [r3, #20]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	430a      	orrs	r2, r1
 8002100:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002102:	2300      	movs	r3, #0
 8002104:	e006      	b.n	8002114 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
  }
}
 8002114:	4618      	mov	r0, r3
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08a      	sub	sp, #40	; 0x28
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002128:	2300      	movs	r3, #0
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800215c:	6a3b      	ldr	r3, [r7, #32]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d07c      	beq.n	8002260 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b00      	cmp	r3, #0
 800216e:	d023      	beq.n	80021b8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2201      	movs	r2, #1
 8002176:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f983 	bl	800248e <HAL_CAN_TxMailbox0CompleteCallback>
 8002188:	e016      	b.n	80021b8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	2b00      	cmp	r3, #0
 8002192:	d004      	beq.n	800219e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
 800219c:	e00c      	b.n	80021b8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d004      	beq.n	80021b2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021ae:	627b      	str	r3, [r7, #36]	; 0x24
 80021b0:	e002      	b.n	80021b8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f989 	bl	80024ca <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d024      	beq.n	800220c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021ca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f963 	bl	80024a2 <HAL_CAN_TxMailbox1CompleteCallback>
 80021dc:	e016      	b.n	800220c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d004      	beq.n	80021f2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021ee:	627b      	str	r3, [r7, #36]	; 0x24
 80021f0:	e00c      	b.n	800220c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d004      	beq.n	8002206 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002202:	627b      	str	r3, [r7, #36]	; 0x24
 8002204:	e002      	b.n	800220c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f969 	bl	80024de <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d024      	beq.n	8002260 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800221e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f943 	bl	80024b6 <HAL_CAN_TxMailbox2CompleteCallback>
 8002230:	e016      	b.n	8002260 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d004      	beq.n	8002246 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
 8002244:	e00c      	b.n	8002260 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d004      	beq.n	800225a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
 8002258:	e002      	b.n	8002260 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f949 	bl	80024f2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002260:	6a3b      	ldr	r3, [r7, #32]
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00c      	beq.n	8002284 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f003 0310 	and.w	r3, r3, #16
 8002270:	2b00      	cmp	r3, #0
 8002272:	d007      	beq.n	8002284 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800227a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2210      	movs	r2, #16
 8002282:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002284:	6a3b      	ldr	r3, [r7, #32]
 8002286:	f003 0304 	and.w	r3, r3, #4
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00b      	beq.n	80022a6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	2b00      	cmp	r3, #0
 8002296:	d006      	beq.n	80022a6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2208      	movs	r2, #8
 800229e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 f930 	bl	8002506 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80022a6:	6a3b      	ldr	r3, [r7, #32]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d009      	beq.n	80022c4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d002      	beq.n	80022c4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7fe fc42 	bl	8000b48 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80022c4:	6a3b      	ldr	r3, [r7, #32]
 80022c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00c      	beq.n	80022e8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	f003 0310 	and.w	r3, r3, #16
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d007      	beq.n	80022e8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022de:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2210      	movs	r2, #16
 80022e6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80022e8:	6a3b      	ldr	r3, [r7, #32]
 80022ea:	f003 0320 	and.w	r3, r3, #32
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00b      	beq.n	800230a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	f003 0308 	and.w	r3, r3, #8
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d006      	beq.n	800230a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2208      	movs	r2, #8
 8002302:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f912 	bl	800252e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800230a:	6a3b      	ldr	r3, [r7, #32]
 800230c:	f003 0310 	and.w	r3, r3, #16
 8002310:	2b00      	cmp	r3, #0
 8002312:	d009      	beq.n	8002328 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d002      	beq.n	8002328 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f8f9 	bl	800251a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00b      	beq.n	800234a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	f003 0310 	and.w	r3, r3, #16
 8002338:	2b00      	cmp	r3, #0
 800233a:	d006      	beq.n	800234a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2210      	movs	r2, #16
 8002342:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 f8fc 	bl	8002542 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800234a:	6a3b      	ldr	r3, [r7, #32]
 800234c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00b      	beq.n	800236c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b00      	cmp	r3, #0
 800235c:	d006      	beq.n	800236c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2208      	movs	r2, #8
 8002364:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f8f5 	bl	8002556 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d07b      	beq.n	800246e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	d072      	beq.n	8002466 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002380:	6a3b      	ldr	r3, [r7, #32]
 8002382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002386:	2b00      	cmp	r3, #0
 8002388:	d008      	beq.n	800239c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d008      	beq.n	80023b8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	f043 0302 	orr.w	r3, r3, #2
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d008      	beq.n	80023d4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	f043 0304 	orr.w	r3, r3, #4
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023d4:	6a3b      	ldr	r3, [r7, #32]
 80023d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d043      	beq.n	8002466 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d03e      	beq.n	8002466 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023ee:	2b60      	cmp	r3, #96	; 0x60
 80023f0:	d02b      	beq.n	800244a <HAL_CAN_IRQHandler+0x32a>
 80023f2:	2b60      	cmp	r3, #96	; 0x60
 80023f4:	d82e      	bhi.n	8002454 <HAL_CAN_IRQHandler+0x334>
 80023f6:	2b50      	cmp	r3, #80	; 0x50
 80023f8:	d022      	beq.n	8002440 <HAL_CAN_IRQHandler+0x320>
 80023fa:	2b50      	cmp	r3, #80	; 0x50
 80023fc:	d82a      	bhi.n	8002454 <HAL_CAN_IRQHandler+0x334>
 80023fe:	2b40      	cmp	r3, #64	; 0x40
 8002400:	d019      	beq.n	8002436 <HAL_CAN_IRQHandler+0x316>
 8002402:	2b40      	cmp	r3, #64	; 0x40
 8002404:	d826      	bhi.n	8002454 <HAL_CAN_IRQHandler+0x334>
 8002406:	2b30      	cmp	r3, #48	; 0x30
 8002408:	d010      	beq.n	800242c <HAL_CAN_IRQHandler+0x30c>
 800240a:	2b30      	cmp	r3, #48	; 0x30
 800240c:	d822      	bhi.n	8002454 <HAL_CAN_IRQHandler+0x334>
 800240e:	2b10      	cmp	r3, #16
 8002410:	d002      	beq.n	8002418 <HAL_CAN_IRQHandler+0x2f8>
 8002412:	2b20      	cmp	r3, #32
 8002414:	d005      	beq.n	8002422 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002416:	e01d      	b.n	8002454 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	f043 0308 	orr.w	r3, r3, #8
 800241e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002420:	e019      	b.n	8002456 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	f043 0310 	orr.w	r3, r3, #16
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800242a:	e014      	b.n	8002456 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	f043 0320 	orr.w	r3, r3, #32
 8002432:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002434:	e00f      	b.n	8002456 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800243e:	e00a      	b.n	8002456 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002446:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002448:	e005      	b.n	8002456 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002450:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002452:	e000      	b.n	8002456 <HAL_CAN_IRQHandler+0x336>
            break;
 8002454:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	699a      	ldr	r2, [r3, #24]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002464:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2204      	movs	r2, #4
 800246c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	2b00      	cmp	r3, #0
 8002472:	d008      	beq.n	8002486 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f872 	bl	800256a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002486:	bf00      	nop
 8002488:	3728      	adds	r7, #40	; 0x28
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
	...

08002580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002590:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <__NVIC_SetPriorityGrouping+0x40>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800259c:	4013      	ands	r3, r2
 800259e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80025a8:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <__NVIC_SetPriorityGrouping+0x44>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ae:	4a04      	ldr	r2, [pc, #16]	; (80025c0 <__NVIC_SetPriorityGrouping+0x40>)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	60d3      	str	r3, [r2, #12]
}
 80025b4:	bf00      	nop
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	e000ed00 	.word	0xe000ed00
 80025c4:	05fa0000 	.word	0x05fa0000

080025c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025cc:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <__NVIC_GetPriorityGrouping+0x18>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	0a1b      	lsrs	r3, r3, #8
 80025d2:	f003 0307 	and.w	r3, r3, #7
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	db0b      	blt.n	800260e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	f003 021f 	and.w	r2, r3, #31
 80025fc:	4907      	ldr	r1, [pc, #28]	; (800261c <__NVIC_EnableIRQ+0x38>)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	2001      	movs	r0, #1
 8002606:	fa00 f202 	lsl.w	r2, r0, r2
 800260a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	e000e100 	.word	0xe000e100

08002620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	6039      	str	r1, [r7, #0]
 800262a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800262c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002630:	2b00      	cmp	r3, #0
 8002632:	db0a      	blt.n	800264a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	b2da      	uxtb	r2, r3
 8002638:	490c      	ldr	r1, [pc, #48]	; (800266c <__NVIC_SetPriority+0x4c>)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	0112      	lsls	r2, r2, #4
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	440b      	add	r3, r1
 8002644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002648:	e00a      	b.n	8002660 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4908      	ldr	r1, [pc, #32]	; (8002670 <__NVIC_SetPriority+0x50>)
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	3b04      	subs	r3, #4
 8002658:	0112      	lsls	r2, r2, #4
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	440b      	add	r3, r1
 800265e:	761a      	strb	r2, [r3, #24]
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	e000e100 	.word	0xe000e100
 8002670:	e000ed00 	.word	0xe000ed00

08002674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	; 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f1c3 0307 	rsb	r3, r3, #7
 800268e:	2b04      	cmp	r3, #4
 8002690:	bf28      	it	cs
 8002692:	2304      	movcs	r3, #4
 8002694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	3304      	adds	r3, #4
 800269a:	2b06      	cmp	r3, #6
 800269c:	d902      	bls.n	80026a4 <NVIC_EncodePriority+0x30>
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	3b03      	subs	r3, #3
 80026a2:	e000      	b.n	80026a6 <NVIC_EncodePriority+0x32>
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a8:	f04f 32ff 	mov.w	r2, #4294967295
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43da      	mvns	r2, r3
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	401a      	ands	r2, r3
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026bc:	f04f 31ff 	mov.w	r1, #4294967295
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	fa01 f303 	lsl.w	r3, r1, r3
 80026c6:	43d9      	mvns	r1, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026cc:	4313      	orrs	r3, r2
         );
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3724      	adds	r7, #36	; 0x24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
	...

080026dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026ec:	d301      	bcc.n	80026f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ee:	2301      	movs	r3, #1
 80026f0:	e00f      	b.n	8002712 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026f2:	4a0a      	ldr	r2, [pc, #40]	; (800271c <SysTick_Config+0x40>)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3b01      	subs	r3, #1
 80026f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026fa:	210f      	movs	r1, #15
 80026fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002700:	f7ff ff8e 	bl	8002620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002704:	4b05      	ldr	r3, [pc, #20]	; (800271c <SysTick_Config+0x40>)
 8002706:	2200      	movs	r2, #0
 8002708:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800270a:	4b04      	ldr	r3, [pc, #16]	; (800271c <SysTick_Config+0x40>)
 800270c:	2207      	movs	r2, #7
 800270e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	e000e010 	.word	0xe000e010

08002720 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f7ff ff29 	bl	8002580 <__NVIC_SetPriorityGrouping>
}
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002736:	b580      	push	{r7, lr}
 8002738:	b086      	sub	sp, #24
 800273a:	af00      	add	r7, sp, #0
 800273c:	4603      	mov	r3, r0
 800273e:	60b9      	str	r1, [r7, #8]
 8002740:	607a      	str	r2, [r7, #4]
 8002742:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002744:	2300      	movs	r3, #0
 8002746:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002748:	f7ff ff3e 	bl	80025c8 <__NVIC_GetPriorityGrouping>
 800274c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	68b9      	ldr	r1, [r7, #8]
 8002752:	6978      	ldr	r0, [r7, #20]
 8002754:	f7ff ff8e 	bl	8002674 <NVIC_EncodePriority>
 8002758:	4602      	mov	r2, r0
 800275a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800275e:	4611      	mov	r1, r2
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff ff5d 	bl	8002620 <__NVIC_SetPriority>
}
 8002766:	bf00      	nop
 8002768:	3718      	adds	r7, #24
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b082      	sub	sp, #8
 8002772:	af00      	add	r7, sp, #0
 8002774:	4603      	mov	r3, r0
 8002776:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff ff31 	bl	80025e4 <__NVIC_EnableIRQ>
}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7ff ffa2 	bl	80026dc <SysTick_Config>
 8002798:	4603      	mov	r3, r0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
	...

080027a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b089      	sub	sp, #36	; 0x24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80027be:	2300      	movs	r3, #0
 80027c0:	61fb      	str	r3, [r7, #28]
 80027c2:	e175      	b.n	8002ab0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80027c4:	2201      	movs	r2, #1
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	4013      	ands	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	429a      	cmp	r2, r3
 80027de:	f040 8164 	bne.w	8002aaa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d005      	beq.n	80027fa <HAL_GPIO_Init+0x56>
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d130      	bne.n	800285c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	2203      	movs	r2, #3
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43db      	mvns	r3, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4013      	ands	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4313      	orrs	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002830:	2201      	movs	r2, #1
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	091b      	lsrs	r3, r3, #4
 8002846:	f003 0201 	and.w	r2, r3, #1
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 0303 	and.w	r3, r3, #3
 8002864:	2b03      	cmp	r3, #3
 8002866:	d017      	beq.n	8002898 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	2203      	movs	r2, #3
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4013      	ands	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 0303 	and.w	r3, r3, #3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d123      	bne.n	80028ec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	08da      	lsrs	r2, r3, #3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3208      	adds	r2, #8
 80028ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	220f      	movs	r2, #15
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	691a      	ldr	r2, [r3, #16]
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	08da      	lsrs	r2, r3, #3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3208      	adds	r2, #8
 80028e6:	69b9      	ldr	r1, [r7, #24]
 80028e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	2203      	movs	r2, #3
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 0203 	and.w	r2, r3, #3
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4313      	orrs	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 80be 	beq.w	8002aaa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800292e:	4b66      	ldr	r3, [pc, #408]	; (8002ac8 <HAL_GPIO_Init+0x324>)
 8002930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002932:	4a65      	ldr	r2, [pc, #404]	; (8002ac8 <HAL_GPIO_Init+0x324>)
 8002934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002938:	6453      	str	r3, [r2, #68]	; 0x44
 800293a:	4b63      	ldr	r3, [pc, #396]	; (8002ac8 <HAL_GPIO_Init+0x324>)
 800293c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002946:	4a61      	ldr	r2, [pc, #388]	; (8002acc <HAL_GPIO_Init+0x328>)
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	089b      	lsrs	r3, r3, #2
 800294c:	3302      	adds	r3, #2
 800294e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002952:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	220f      	movs	r2, #15
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	43db      	mvns	r3, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4013      	ands	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a58      	ldr	r2, [pc, #352]	; (8002ad0 <HAL_GPIO_Init+0x32c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d037      	beq.n	80029e2 <HAL_GPIO_Init+0x23e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a57      	ldr	r2, [pc, #348]	; (8002ad4 <HAL_GPIO_Init+0x330>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d031      	beq.n	80029de <HAL_GPIO_Init+0x23a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a56      	ldr	r2, [pc, #344]	; (8002ad8 <HAL_GPIO_Init+0x334>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d02b      	beq.n	80029da <HAL_GPIO_Init+0x236>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a55      	ldr	r2, [pc, #340]	; (8002adc <HAL_GPIO_Init+0x338>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d025      	beq.n	80029d6 <HAL_GPIO_Init+0x232>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a54      	ldr	r2, [pc, #336]	; (8002ae0 <HAL_GPIO_Init+0x33c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d01f      	beq.n	80029d2 <HAL_GPIO_Init+0x22e>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a53      	ldr	r2, [pc, #332]	; (8002ae4 <HAL_GPIO_Init+0x340>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d019      	beq.n	80029ce <HAL_GPIO_Init+0x22a>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a52      	ldr	r2, [pc, #328]	; (8002ae8 <HAL_GPIO_Init+0x344>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d013      	beq.n	80029ca <HAL_GPIO_Init+0x226>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a51      	ldr	r2, [pc, #324]	; (8002aec <HAL_GPIO_Init+0x348>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d00d      	beq.n	80029c6 <HAL_GPIO_Init+0x222>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a50      	ldr	r2, [pc, #320]	; (8002af0 <HAL_GPIO_Init+0x34c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d007      	beq.n	80029c2 <HAL_GPIO_Init+0x21e>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a4f      	ldr	r2, [pc, #316]	; (8002af4 <HAL_GPIO_Init+0x350>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d101      	bne.n	80029be <HAL_GPIO_Init+0x21a>
 80029ba:	2309      	movs	r3, #9
 80029bc:	e012      	b.n	80029e4 <HAL_GPIO_Init+0x240>
 80029be:	230a      	movs	r3, #10
 80029c0:	e010      	b.n	80029e4 <HAL_GPIO_Init+0x240>
 80029c2:	2308      	movs	r3, #8
 80029c4:	e00e      	b.n	80029e4 <HAL_GPIO_Init+0x240>
 80029c6:	2307      	movs	r3, #7
 80029c8:	e00c      	b.n	80029e4 <HAL_GPIO_Init+0x240>
 80029ca:	2306      	movs	r3, #6
 80029cc:	e00a      	b.n	80029e4 <HAL_GPIO_Init+0x240>
 80029ce:	2305      	movs	r3, #5
 80029d0:	e008      	b.n	80029e4 <HAL_GPIO_Init+0x240>
 80029d2:	2304      	movs	r3, #4
 80029d4:	e006      	b.n	80029e4 <HAL_GPIO_Init+0x240>
 80029d6:	2303      	movs	r3, #3
 80029d8:	e004      	b.n	80029e4 <HAL_GPIO_Init+0x240>
 80029da:	2302      	movs	r3, #2
 80029dc:	e002      	b.n	80029e4 <HAL_GPIO_Init+0x240>
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <HAL_GPIO_Init+0x240>
 80029e2:	2300      	movs	r3, #0
 80029e4:	69fa      	ldr	r2, [r7, #28]
 80029e6:	f002 0203 	and.w	r2, r2, #3
 80029ea:	0092      	lsls	r2, r2, #2
 80029ec:	4093      	lsls	r3, r2
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029f4:	4935      	ldr	r1, [pc, #212]	; (8002acc <HAL_GPIO_Init+0x328>)
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	089b      	lsrs	r3, r3, #2
 80029fa:	3302      	adds	r3, #2
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a02:	4b3d      	ldr	r3, [pc, #244]	; (8002af8 <HAL_GPIO_Init+0x354>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a26:	4a34      	ldr	r2, [pc, #208]	; (8002af8 <HAL_GPIO_Init+0x354>)
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a2c:	4b32      	ldr	r3, [pc, #200]	; (8002af8 <HAL_GPIO_Init+0x354>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	43db      	mvns	r3, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a50:	4a29      	ldr	r2, [pc, #164]	; (8002af8 <HAL_GPIO_Init+0x354>)
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a56:	4b28      	ldr	r3, [pc, #160]	; (8002af8 <HAL_GPIO_Init+0x354>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4013      	ands	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a7a:	4a1f      	ldr	r2, [pc, #124]	; (8002af8 <HAL_GPIO_Init+0x354>)
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a80:	4b1d      	ldr	r3, [pc, #116]	; (8002af8 <HAL_GPIO_Init+0x354>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002aa4:	4a14      	ldr	r2, [pc, #80]	; (8002af8 <HAL_GPIO_Init+0x354>)
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	3301      	adds	r3, #1
 8002aae:	61fb      	str	r3, [r7, #28]
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	2b0f      	cmp	r3, #15
 8002ab4:	f67f ae86 	bls.w	80027c4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ab8:	bf00      	nop
 8002aba:	bf00      	nop
 8002abc:	3724      	adds	r7, #36	; 0x24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	40013800 	.word	0x40013800
 8002ad0:	40020000 	.word	0x40020000
 8002ad4:	40020400 	.word	0x40020400
 8002ad8:	40020800 	.word	0x40020800
 8002adc:	40020c00 	.word	0x40020c00
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	40021400 	.word	0x40021400
 8002ae8:	40021800 	.word	0x40021800
 8002aec:	40021c00 	.word	0x40021c00
 8002af0:	40022000 	.word	0x40022000
 8002af4:	40022400 	.word	0x40022400
 8002af8:	40013c00 	.word	0x40013c00

08002afc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	460b      	mov	r3, r1
 8002b06:	807b      	strh	r3, [r7, #2]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b0c:	787b      	ldrb	r3, [r7, #1]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b12:	887a      	ldrh	r2, [r7, #2]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b18:	e003      	b.n	8002b22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b1a:	887b      	ldrh	r3, [r7, #2]
 8002b1c:	041a      	lsls	r2, r3, #16
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	619a      	str	r2, [r3, #24]
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b085      	sub	sp, #20
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
 8002b36:	460b      	mov	r3, r1
 8002b38:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b40:	887a      	ldrh	r2, [r7, #2]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4013      	ands	r3, r2
 8002b46:	041a      	lsls	r2, r3, #16
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	43d9      	mvns	r1, r3
 8002b4c:	887b      	ldrh	r3, [r7, #2]
 8002b4e:	400b      	ands	r3, r1
 8002b50:	431a      	orrs	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	619a      	str	r2, [r3, #24]
}
 8002b56:	bf00      	nop
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b64:	b08f      	sub	sp, #60	; 0x3c
 8002b66:	af0a      	add	r7, sp, #40	; 0x28
 8002b68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e116      	b.n	8002da2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d106      	bne.n	8002b94 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f006 fcf0 	bl	8009574 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2203      	movs	r2, #3
 8002b98:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d102      	bne.n	8002bae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f002 fe81 	bl	80058ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	603b      	str	r3, [r7, #0]
 8002bbe:	687e      	ldr	r6, [r7, #4]
 8002bc0:	466d      	mov	r5, sp
 8002bc2:	f106 0410 	add.w	r4, r6, #16
 8002bc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bd6:	1d33      	adds	r3, r6, #4
 8002bd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bda:	6838      	ldr	r0, [r7, #0]
 8002bdc:	f002 fd62 	bl	80056a4 <USB_CoreInit>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d005      	beq.n	8002bf2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2202      	movs	r2, #2
 8002bea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e0d7      	b.n	8002da2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f002 fe6f 	bl	80058dc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bfe:	2300      	movs	r3, #0
 8002c00:	73fb      	strb	r3, [r7, #15]
 8002c02:	e04a      	b.n	8002c9a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c04:	7bfa      	ldrb	r2, [r7, #15]
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	333d      	adds	r3, #61	; 0x3d
 8002c14:	2201      	movs	r2, #1
 8002c16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c18:	7bfa      	ldrb	r2, [r7, #15]
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	333c      	adds	r3, #60	; 0x3c
 8002c28:	7bfa      	ldrb	r2, [r7, #15]
 8002c2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c2c:	7bfa      	ldrb	r2, [r7, #15]
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
 8002c30:	b298      	uxth	r0, r3
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	4413      	add	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	3344      	adds	r3, #68	; 0x44
 8002c40:	4602      	mov	r2, r0
 8002c42:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c44:	7bfa      	ldrb	r2, [r7, #15]
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	3340      	adds	r3, #64	; 0x40
 8002c54:	2200      	movs	r2, #0
 8002c56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c58:	7bfa      	ldrb	r2, [r7, #15]
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	3348      	adds	r3, #72	; 0x48
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c6c:	7bfa      	ldrb	r2, [r7, #15]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4413      	add	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	334c      	adds	r3, #76	; 0x4c
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c80:	7bfa      	ldrb	r2, [r7, #15]
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	4613      	mov	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	4413      	add	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	3354      	adds	r3, #84	; 0x54
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
 8002c96:	3301      	adds	r3, #1
 8002c98:	73fb      	strb	r3, [r7, #15]
 8002c9a:	7bfa      	ldrb	r2, [r7, #15]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d3af      	bcc.n	8002c04 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	73fb      	strb	r3, [r7, #15]
 8002ca8:	e044      	b.n	8002d34 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002caa:	7bfa      	ldrb	r2, [r7, #15]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002cc0:	7bfa      	ldrb	r2, [r7, #15]
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	4413      	add	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002cd2:	7bfa      	ldrb	r2, [r7, #15]
 8002cd4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cd6:	7bfa      	ldrb	r2, [r7, #15]
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	4413      	add	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cec:	7bfa      	ldrb	r2, [r7, #15]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d02:	7bfa      	ldrb	r2, [r7, #15]
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
 8002d10:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d18:	7bfa      	ldrb	r2, [r7, #15]
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	4413      	add	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
 8002d30:	3301      	adds	r3, #1
 8002d32:	73fb      	strb	r3, [r7, #15]
 8002d34:	7bfa      	ldrb	r2, [r7, #15]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d3b5      	bcc.n	8002caa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	603b      	str	r3, [r7, #0]
 8002d44:	687e      	ldr	r6, [r7, #4]
 8002d46:	466d      	mov	r5, sp
 8002d48:	f106 0410 	add.w	r4, r6, #16
 8002d4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d58:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d5c:	1d33      	adds	r3, r6, #4
 8002d5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d60:	6838      	ldr	r0, [r7, #0]
 8002d62:	f002 fe07 	bl	8005974 <USB_DevInit>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d005      	beq.n	8002d78 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e014      	b.n	8002da2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d102      	bne.n	8002d96 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f001 f97b 	bl	800408c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f003 ff55 	bl	8006c4a <USB_DevDisconnect>

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002daa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b082      	sub	sp, #8
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <HAL_PCD_Start+0x16>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e012      	b.n	8002de6 <HAL_PCD_Start+0x3c>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f002 fd63 	bl	8005898 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f003 ff16 	bl	8006c08 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002dee:	b590      	push	{r4, r7, lr}
 8002df0:	b08d      	sub	sp, #52	; 0x34
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f003 ffd4 	bl	8006db2 <USB_GetMode>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f040 84b7 	bne.w	8003780 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f003 ff38 	bl	8006c8c <USB_ReadInterrupts>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 84ad 	beq.w	800377e <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	0a1b      	lsrs	r3, r3, #8
 8002e2e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f003 ff25 	bl	8006c8c <USB_ReadInterrupts>
 8002e42:	4603      	mov	r3, r0
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d107      	bne.n	8002e5c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695a      	ldr	r2, [r3, #20]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f002 0202 	and.w	r2, r2, #2
 8002e5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f003 ff13 	bl	8006c8c <USB_ReadInterrupts>
 8002e66:	4603      	mov	r3, r0
 8002e68:	f003 0310 	and.w	r3, r3, #16
 8002e6c:	2b10      	cmp	r3, #16
 8002e6e:	d161      	bne.n	8002f34 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	699a      	ldr	r2, [r3, #24]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0210 	bic.w	r2, r2, #16
 8002e7e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002e80:	6a3b      	ldr	r3, [r7, #32]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	f003 020f 	and.w	r2, r3, #15
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	4413      	add	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	0c5b      	lsrs	r3, r3, #17
 8002ea4:	f003 030f 	and.w	r3, r3, #15
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d124      	bne.n	8002ef6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d035      	beq.n	8002f24 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	091b      	lsrs	r3, r3, #4
 8002ec0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ec2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	461a      	mov	r2, r3
 8002eca:	6a38      	ldr	r0, [r7, #32]
 8002ecc:	f003 fd4a 	bl	8006964 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	691a      	ldr	r2, [r3, #16]
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	091b      	lsrs	r3, r3, #4
 8002ed8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002edc:	441a      	add	r2, r3
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	6a1a      	ldr	r2, [r3, #32]
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	091b      	lsrs	r3, r3, #4
 8002eea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002eee:	441a      	add	r2, r3
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	621a      	str	r2, [r3, #32]
 8002ef4:	e016      	b.n	8002f24 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	0c5b      	lsrs	r3, r3, #17
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	2b06      	cmp	r3, #6
 8002f00:	d110      	bne.n	8002f24 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f08:	2208      	movs	r2, #8
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	6a38      	ldr	r0, [r7, #32]
 8002f0e:	f003 fd29 	bl	8006964 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	6a1a      	ldr	r2, [r3, #32]
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	091b      	lsrs	r3, r3, #4
 8002f1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f1e:	441a      	add	r2, r3
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699a      	ldr	r2, [r3, #24]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0210 	orr.w	r2, r2, #16
 8002f32:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f003 fea7 	bl	8006c8c <USB_ReadInterrupts>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f44:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f48:	f040 80a7 	bne.w	800309a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f003 feac 	bl	8006cb2 <USB_ReadDevAllOutEpInterrupt>
 8002f5a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002f5c:	e099      	b.n	8003092 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 808e 	beq.w	8003086 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	4611      	mov	r1, r2
 8002f74:	4618      	mov	r0, r3
 8002f76:	f003 fed0 	bl	8006d1a <USB_ReadDevOutEPInterrupt>
 8002f7a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00c      	beq.n	8002fa0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	015a      	lsls	r2, r3, #5
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f92:	461a      	mov	r2, r3
 8002f94:	2301      	movs	r3, #1
 8002f96:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002f98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 fef0 	bl	8003d80 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00c      	beq.n	8002fc4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	015a      	lsls	r2, r3, #5
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	2308      	movs	r3, #8
 8002fba:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002fbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 ffc6 	bl	8003f50 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	f003 0310 	and.w	r3, r3, #16
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d008      	beq.n	8002fe0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	015a      	lsls	r2, r3, #5
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fda:	461a      	mov	r2, r3
 8002fdc:	2310      	movs	r3, #16
 8002fde:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d030      	beq.n	800304c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002fea:	6a3b      	ldr	r3, [r7, #32]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff2:	2b80      	cmp	r3, #128	; 0x80
 8002ff4:	d109      	bne.n	800300a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	69fa      	ldr	r2, [r7, #28]
 8003000:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003004:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003008:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800300a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800300c:	4613      	mov	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	4413      	add	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	4413      	add	r3, r2
 800301c:	3304      	adds	r3, #4
 800301e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	78db      	ldrb	r3, [r3, #3]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d108      	bne.n	800303a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	2200      	movs	r2, #0
 800302c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	b2db      	uxtb	r3, r3
 8003032:	4619      	mov	r1, r3
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f006 fbc1 	bl	80097bc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	015a      	lsls	r2, r3, #5
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	4413      	add	r3, r2
 8003042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003046:	461a      	mov	r2, r3
 8003048:	2302      	movs	r3, #2
 800304a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	f003 0320 	and.w	r3, r3, #32
 8003052:	2b00      	cmp	r3, #0
 8003054:	d008      	beq.n	8003068 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	015a      	lsls	r2, r3, #5
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	4413      	add	r3, r2
 800305e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003062:	461a      	mov	r2, r3
 8003064:	2320      	movs	r3, #32
 8003066:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d009      	beq.n	8003086 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	015a      	lsls	r2, r3, #5
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	4413      	add	r3, r2
 800307a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800307e:	461a      	mov	r2, r3
 8003080:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003084:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	3301      	adds	r3, #1
 800308a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800308c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308e:	085b      	lsrs	r3, r3, #1
 8003090:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003094:	2b00      	cmp	r3, #0
 8003096:	f47f af62 	bne.w	8002f5e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f003 fdf4 	bl	8006c8c <USB_ReadInterrupts>
 80030a4:	4603      	mov	r3, r0
 80030a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030ae:	f040 80db 	bne.w	8003268 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f003 fe15 	bl	8006ce6 <USB_ReadDevAllInEpInterrupt>
 80030bc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80030c2:	e0cd      	b.n	8003260 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80030c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 80c2 	beq.w	8003254 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	4611      	mov	r1, r2
 80030da:	4618      	mov	r0, r3
 80030dc:	f003 fe3b 	bl	8006d56 <USB_ReadDevInEPInterrupt>
 80030e0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d057      	beq.n	800319c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	2201      	movs	r2, #1
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003100:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	43db      	mvns	r3, r3
 8003106:	69f9      	ldr	r1, [r7, #28]
 8003108:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800310c:	4013      	ands	r3, r2
 800310e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	4413      	add	r3, r2
 8003118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800311c:	461a      	mov	r2, r3
 800311e:	2301      	movs	r3, #1
 8003120:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d132      	bne.n	8003190 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800312e:	4613      	mov	r3, r2
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	4413      	add	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	334c      	adds	r3, #76	; 0x4c
 800313a:	6819      	ldr	r1, [r3, #0]
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003140:	4613      	mov	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	4413      	add	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4403      	add	r3, r0
 800314a:	3348      	adds	r3, #72	; 0x48
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4419      	add	r1, r3
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003154:	4613      	mov	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4403      	add	r3, r0
 800315e:	334c      	adds	r3, #76	; 0x4c
 8003160:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	2b00      	cmp	r3, #0
 8003166:	d113      	bne.n	8003190 <HAL_PCD_IRQHandler+0x3a2>
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800316c:	4613      	mov	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	4413      	add	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	3354      	adds	r3, #84	; 0x54
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d108      	bne.n	8003190 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6818      	ldr	r0, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003188:	461a      	mov	r2, r3
 800318a:	2101      	movs	r1, #1
 800318c:	f003 fe44 	bl	8006e18 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	b2db      	uxtb	r3, r3
 8003194:	4619      	mov	r1, r3
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f006 fa8b 	bl	80096b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	f003 0308 	and.w	r3, r3, #8
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d008      	beq.n	80031b8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	015a      	lsls	r2, r3, #5
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	4413      	add	r3, r2
 80031ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031b2:	461a      	mov	r2, r3
 80031b4:	2308      	movs	r3, #8
 80031b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	f003 0310 	and.w	r3, r3, #16
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d008      	beq.n	80031d4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	015a      	lsls	r2, r3, #5
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	4413      	add	r3, r2
 80031ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ce:	461a      	mov	r2, r3
 80031d0:	2310      	movs	r3, #16
 80031d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d008      	beq.n	80031f0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	015a      	lsls	r2, r3, #5
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	4413      	add	r3, r2
 80031e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ea:	461a      	mov	r2, r3
 80031ec:	2340      	movs	r3, #64	; 0x40
 80031ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d023      	beq.n	8003242 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80031fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031fc:	6a38      	ldr	r0, [r7, #32]
 80031fe:	f002 fd17 	bl	8005c30 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003204:	4613      	mov	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	4413      	add	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	3338      	adds	r3, #56	; 0x38
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	4413      	add	r3, r2
 8003212:	3304      	adds	r3, #4
 8003214:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	78db      	ldrb	r3, [r3, #3]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d108      	bne.n	8003230 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	2200      	movs	r2, #0
 8003222:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	b2db      	uxtb	r3, r3
 8003228:	4619      	mov	r1, r3
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f006 fad8 	bl	80097e0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	015a      	lsls	r2, r3, #5
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	4413      	add	r3, r2
 8003238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800323c:	461a      	mov	r2, r3
 800323e:	2302      	movs	r3, #2
 8003240:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003248:	2b00      	cmp	r3, #0
 800324a:	d003      	beq.n	8003254 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800324c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 fd08 	bl	8003c64 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	3301      	adds	r3, #1
 8003258:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800325a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325c:	085b      	lsrs	r3, r3, #1
 800325e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003262:	2b00      	cmp	r3, #0
 8003264:	f47f af2e 	bne.w	80030c4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f003 fd0d 	bl	8006c8c <USB_ReadInterrupts>
 8003272:	4603      	mov	r3, r0
 8003274:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003278:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800327c:	d122      	bne.n	80032c4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	69fa      	ldr	r2, [r7, #28]
 8003288:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800328c:	f023 0301 	bic.w	r3, r3, #1
 8003290:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003298:	2b01      	cmp	r3, #1
 800329a:	d108      	bne.n	80032ae <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80032a4:	2100      	movs	r1, #0
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f006 fc52 	bl	8009b50 <HAL_PCDEx_LPM_Callback>
 80032ac:	e002      	b.n	80032b4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f006 fa76 	bl	80097a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695a      	ldr	r2, [r3, #20]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80032c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f003 fcdf 	bl	8006c8c <USB_ReadInterrupts>
 80032ce:	4603      	mov	r3, r0
 80032d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032d8:	d112      	bne.n	8003300 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d102      	bne.n	80032f0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f006 fa32 	bl	8009754 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695a      	ldr	r2, [r3, #20]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80032fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f003 fcc1 	bl	8006c8c <USB_ReadInterrupts>
 800330a:	4603      	mov	r3, r0
 800330c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003310:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003314:	d121      	bne.n	800335a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695a      	ldr	r2, [r3, #20]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003324:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d111      	bne.n	8003354 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333e:	089b      	lsrs	r3, r3, #2
 8003340:	f003 020f 	and.w	r2, r3, #15
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800334a:	2101      	movs	r1, #1
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f006 fbff 	bl	8009b50 <HAL_PCDEx_LPM_Callback>
 8003352:	e002      	b.n	800335a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f006 f9fd 	bl	8009754 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f003 fc94 	bl	8006c8c <USB_ReadInterrupts>
 8003364:	4603      	mov	r3, r0
 8003366:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800336a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800336e:	f040 80b7 	bne.w	80034e0 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	69fa      	ldr	r2, [r7, #28]
 800337c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003380:	f023 0301 	bic.w	r3, r3, #1
 8003384:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2110      	movs	r1, #16
 800338c:	4618      	mov	r0, r3
 800338e:	f002 fc4f 	bl	8005c30 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003392:	2300      	movs	r3, #0
 8003394:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003396:	e046      	b.n	8003426 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339a:	015a      	lsls	r2, r3, #5
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	4413      	add	r3, r2
 80033a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033a4:	461a      	mov	r2, r3
 80033a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80033aa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80033ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ae:	015a      	lsls	r2, r3, #5
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033bc:	0151      	lsls	r1, r2, #5
 80033be:	69fa      	ldr	r2, [r7, #28]
 80033c0:	440a      	add	r2, r1
 80033c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033ca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80033cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ce:	015a      	lsls	r2, r3, #5
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	4413      	add	r3, r2
 80033d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d8:	461a      	mov	r2, r3
 80033da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80033de:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80033e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033f0:	0151      	lsls	r1, r2, #5
 80033f2:	69fa      	ldr	r2, [r7, #28]
 80033f4:	440a      	add	r2, r1
 80033f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003402:	015a      	lsls	r2, r3, #5
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	4413      	add	r3, r2
 8003408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003410:	0151      	lsls	r1, r2, #5
 8003412:	69fa      	ldr	r2, [r7, #28]
 8003414:	440a      	add	r2, r1
 8003416:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800341a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800341e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003422:	3301      	adds	r3, #1
 8003424:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800342c:	429a      	cmp	r2, r3
 800342e:	d3b3      	bcc.n	8003398 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	69fa      	ldr	r2, [r7, #28]
 800343a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800343e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003442:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003448:	2b00      	cmp	r3, #0
 800344a:	d016      	beq.n	800347a <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003456:	69fa      	ldr	r2, [r7, #28]
 8003458:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800345c:	f043 030b 	orr.w	r3, r3, #11
 8003460:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800346a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346c:	69fa      	ldr	r2, [r7, #28]
 800346e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003472:	f043 030b 	orr.w	r3, r3, #11
 8003476:	6453      	str	r3, [r2, #68]	; 0x44
 8003478:	e015      	b.n	80034a6 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003480:	695a      	ldr	r2, [r3, #20]
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003488:	4619      	mov	r1, r3
 800348a:	f242 032b 	movw	r3, #8235	; 0x202b
 800348e:	4313      	orrs	r3, r2
 8003490:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	69fa      	ldr	r2, [r7, #28]
 800349c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034a0:	f043 030b 	orr.w	r3, r3, #11
 80034a4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	69fa      	ldr	r2, [r7, #28]
 80034b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034b4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80034b8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6818      	ldr	r0, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80034ca:	461a      	mov	r2, r3
 80034cc:	f003 fca4 	bl	8006e18 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695a      	ldr	r2, [r3, #20]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80034de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f003 fbd1 	bl	8006c8c <USB_ReadInterrupts>
 80034ea:	4603      	mov	r3, r0
 80034ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034f4:	d124      	bne.n	8003540 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f003 fc68 	bl	8006dd0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4618      	mov	r0, r3
 8003506:	f002 fc10 	bl	8005d2a <USB_GetDevSpeed>
 800350a:	4603      	mov	r3, r0
 800350c:	461a      	mov	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681c      	ldr	r4, [r3, #0]
 8003516:	f001 fa4d 	bl	80049b4 <HAL_RCC_GetHCLKFreq>
 800351a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003520:	b2db      	uxtb	r3, r3
 8003522:	461a      	mov	r2, r3
 8003524:	4620      	mov	r0, r4
 8003526:	f002 f915 	bl	8005754 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f006 f8e9 	bl	8009702 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	695a      	ldr	r2, [r3, #20]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800353e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f003 fba1 	bl	8006c8c <USB_ReadInterrupts>
 800354a:	4603      	mov	r3, r0
 800354c:	f003 0308 	and.w	r3, r3, #8
 8003550:	2b08      	cmp	r3, #8
 8003552:	d10a      	bne.n	800356a <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f006 f8c6 	bl	80096e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695a      	ldr	r2, [r3, #20]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f002 0208 	and.w	r2, r2, #8
 8003568:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f003 fb8c 	bl	8006c8c <USB_ReadInterrupts>
 8003574:	4603      	mov	r3, r0
 8003576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800357a:	2b80      	cmp	r3, #128	; 0x80
 800357c:	d122      	bne.n	80035c4 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800358a:	2301      	movs	r3, #1
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
 800358e:	e014      	b.n	80035ba <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003594:	4613      	mov	r3, r2
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	4413      	add	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d105      	bne.n	80035b4 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	4619      	mov	r1, r3
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 fb27 	bl	8003c02 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	3301      	adds	r3, #1
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d3e5      	bcc.n	8003590 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f003 fb5f 	bl	8006c8c <USB_ReadInterrupts>
 80035ce:	4603      	mov	r3, r0
 80035d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035d8:	d13b      	bne.n	8003652 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035da:	2301      	movs	r3, #1
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24
 80035de:	e02b      	b.n	8003638 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80035e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f4:	4613      	mov	r3, r2
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	4413      	add	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	3340      	adds	r3, #64	; 0x40
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d115      	bne.n	8003632 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003606:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003608:	2b00      	cmp	r3, #0
 800360a:	da12      	bge.n	8003632 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003610:	4613      	mov	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	333f      	adds	r3, #63	; 0x3f
 800361c:	2201      	movs	r2, #1
 800361e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	b2db      	uxtb	r3, r3
 8003624:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003628:	b2db      	uxtb	r3, r3
 800362a:	4619      	mov	r1, r3
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 fae8 	bl	8003c02 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003634:	3301      	adds	r3, #1
 8003636:	627b      	str	r3, [r7, #36]	; 0x24
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800363e:	429a      	cmp	r2, r3
 8003640:	d3ce      	bcc.n	80035e0 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695a      	ldr	r2, [r3, #20]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003650:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f003 fb18 	bl	8006c8c <USB_ReadInterrupts>
 800365c:	4603      	mov	r3, r0
 800365e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003662:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003666:	d155      	bne.n	8003714 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003668:	2301      	movs	r3, #1
 800366a:	627b      	str	r3, [r7, #36]	; 0x24
 800366c:	e045      	b.n	80036fa <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	015a      	lsls	r2, r3, #5
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	4413      	add	r3, r2
 8003676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003682:	4613      	mov	r3, r2
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	4413      	add	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d12e      	bne.n	80036f4 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003696:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003698:	2b00      	cmp	r3, #0
 800369a:	da2b      	bge.n	80036f4 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80036a8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d121      	bne.n	80036f4 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b4:	4613      	mov	r3, r2
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	4413      	add	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	440b      	add	r3, r1
 80036be:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80036c2:	2201      	movs	r2, #1
 80036c4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10a      	bne.n	80036f4 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	69fa      	ldr	r2, [r7, #28]
 80036e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036f0:	6053      	str	r3, [r2, #4]
            break;
 80036f2:	e007      	b.n	8003704 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f6:	3301      	adds	r3, #1
 80036f8:	627b      	str	r3, [r7, #36]	; 0x24
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003700:	429a      	cmp	r2, r3
 8003702:	d3b4      	bcc.n	800366e <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	695a      	ldr	r2, [r3, #20]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003712:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4618      	mov	r0, r3
 800371a:	f003 fab7 	bl	8006c8c <USB_ReadInterrupts>
 800371e:	4603      	mov	r3, r0
 8003720:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003728:	d10a      	bne.n	8003740 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f006 f86a 	bl	8009804 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695a      	ldr	r2, [r3, #20]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800373e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4618      	mov	r0, r3
 8003746:	f003 faa1 	bl	8006c8c <USB_ReadInterrupts>
 800374a:	4603      	mov	r3, r0
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b04      	cmp	r3, #4
 8003752:	d115      	bne.n	8003780 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	2b00      	cmp	r3, #0
 8003764:	d002      	beq.n	800376c <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f006 f85a 	bl	8009820 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6859      	ldr	r1, [r3, #4]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	430a      	orrs	r2, r1
 800377a:	605a      	str	r2, [r3, #4]
 800377c:	e000      	b.n	8003780 <HAL_PCD_IRQHandler+0x992>
      return;
 800377e:	bf00      	nop
    }
  }
}
 8003780:	3734      	adds	r7, #52	; 0x34
 8003782:	46bd      	mov	sp, r7
 8003784:	bd90      	pop	{r4, r7, pc}

08003786 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b082      	sub	sp, #8
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
 800378e:	460b      	mov	r3, r1
 8003790:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003798:	2b01      	cmp	r3, #1
 800379a:	d101      	bne.n	80037a0 <HAL_PCD_SetAddress+0x1a>
 800379c:	2302      	movs	r3, #2
 800379e:	e013      	b.n	80037c8 <HAL_PCD_SetAddress+0x42>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	78fa      	ldrb	r2, [r7, #3]
 80037ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	78fa      	ldrb	r2, [r7, #3]
 80037b6:	4611      	mov	r1, r2
 80037b8:	4618      	mov	r0, r3
 80037ba:	f003 f9ff 	bl	8006bbc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	4608      	mov	r0, r1
 80037da:	4611      	mov	r1, r2
 80037dc:	461a      	mov	r2, r3
 80037de:	4603      	mov	r3, r0
 80037e0:	70fb      	strb	r3, [r7, #3]
 80037e2:	460b      	mov	r3, r1
 80037e4:	803b      	strh	r3, [r7, #0]
 80037e6:	4613      	mov	r3, r2
 80037e8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80037ea:	2300      	movs	r3, #0
 80037ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	da0f      	bge.n	8003816 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037f6:	78fb      	ldrb	r3, [r7, #3]
 80037f8:	f003 020f 	and.w	r2, r3, #15
 80037fc:	4613      	mov	r3, r2
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	4413      	add	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	3338      	adds	r3, #56	; 0x38
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	4413      	add	r3, r2
 800380a:	3304      	adds	r3, #4
 800380c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2201      	movs	r2, #1
 8003812:	705a      	strb	r2, [r3, #1]
 8003814:	e00f      	b.n	8003836 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003816:	78fb      	ldrb	r3, [r7, #3]
 8003818:	f003 020f 	and.w	r2, r3, #15
 800381c:	4613      	mov	r3, r2
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	4413      	add	r3, r2
 800382c:	3304      	adds	r3, #4
 800382e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003836:	78fb      	ldrb	r3, [r7, #3]
 8003838:	f003 030f 	and.w	r3, r3, #15
 800383c:	b2da      	uxtb	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003842:	883a      	ldrh	r2, [r7, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	78ba      	ldrb	r2, [r7, #2]
 800384c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	785b      	ldrb	r3, [r3, #1]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d004      	beq.n	8003860 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	b29a      	uxth	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003860:	78bb      	ldrb	r3, [r7, #2]
 8003862:	2b02      	cmp	r3, #2
 8003864:	d102      	bne.n	800386c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003872:	2b01      	cmp	r3, #1
 8003874:	d101      	bne.n	800387a <HAL_PCD_EP_Open+0xaa>
 8003876:	2302      	movs	r3, #2
 8003878:	e00e      	b.n	8003898 <HAL_PCD_EP_Open+0xc8>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68f9      	ldr	r1, [r7, #12]
 8003888:	4618      	mov	r0, r3
 800388a:	f002 fa73 	bl	8005d74 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003896:	7afb      	ldrb	r3, [r7, #11]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	460b      	mov	r3, r1
 80038aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80038ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	da0f      	bge.n	80038d4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038b4:	78fb      	ldrb	r3, [r7, #3]
 80038b6:	f003 020f 	and.w	r2, r3, #15
 80038ba:	4613      	mov	r3, r2
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	4413      	add	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	3338      	adds	r3, #56	; 0x38
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	4413      	add	r3, r2
 80038c8:	3304      	adds	r3, #4
 80038ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2201      	movs	r2, #1
 80038d0:	705a      	strb	r2, [r3, #1]
 80038d2:	e00f      	b.n	80038f4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038d4:	78fb      	ldrb	r3, [r7, #3]
 80038d6:	f003 020f 	and.w	r2, r3, #15
 80038da:	4613      	mov	r3, r2
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	4413      	add	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	4413      	add	r3, r2
 80038ea:	3304      	adds	r3, #4
 80038ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80038f4:	78fb      	ldrb	r3, [r7, #3]
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003906:	2b01      	cmp	r3, #1
 8003908:	d101      	bne.n	800390e <HAL_PCD_EP_Close+0x6e>
 800390a:	2302      	movs	r3, #2
 800390c:	e00e      	b.n	800392c <HAL_PCD_EP_Close+0x8c>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68f9      	ldr	r1, [r7, #12]
 800391c:	4618      	mov	r0, r3
 800391e:	f002 fab1 	bl	8005e84 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	607a      	str	r2, [r7, #4]
 800393e:	603b      	str	r3, [r7, #0]
 8003940:	460b      	mov	r3, r1
 8003942:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003944:	7afb      	ldrb	r3, [r7, #11]
 8003946:	f003 020f 	and.w	r2, r3, #15
 800394a:	4613      	mov	r3, r2
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	4413      	add	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	4413      	add	r3, r2
 800395a:	3304      	adds	r3, #4
 800395c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2200      	movs	r2, #0
 800396e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	2200      	movs	r2, #0
 8003974:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003976:	7afb      	ldrb	r3, [r7, #11]
 8003978:	f003 030f 	and.w	r3, r3, #15
 800397c:	b2da      	uxtb	r2, r3
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d102      	bne.n	8003990 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003990:	7afb      	ldrb	r3, [r7, #11]
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	2b00      	cmp	r3, #0
 8003998:	d109      	bne.n	80039ae <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6818      	ldr	r0, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	461a      	mov	r2, r3
 80039a6:	6979      	ldr	r1, [r7, #20]
 80039a8:	f002 fd98 	bl	80064dc <USB_EP0StartXfer>
 80039ac:	e008      	b.n	80039c0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6818      	ldr	r0, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	461a      	mov	r2, r3
 80039ba:	6979      	ldr	r1, [r7, #20]
 80039bc:	f002 fb3e 	bl	800603c <USB_EPStartXfer>
  }

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	460b      	mov	r3, r1
 80039d4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80039d6:	78fb      	ldrb	r3, [r7, #3]
 80039d8:	f003 020f 	and.w	r2, r3, #15
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	4413      	add	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	440b      	add	r3, r1
 80039e8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80039ec:	681b      	ldr	r3, [r3, #0]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b086      	sub	sp, #24
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	60f8      	str	r0, [r7, #12]
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	603b      	str	r3, [r7, #0]
 8003a06:	460b      	mov	r3, r1
 8003a08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a0a:	7afb      	ldrb	r3, [r7, #11]
 8003a0c:	f003 020f 	and.w	r2, r3, #15
 8003a10:	4613      	mov	r3, r2
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4413      	add	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	3338      	adds	r3, #56	; 0x38
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	3304      	adds	r3, #4
 8003a20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2200      	movs	r2, #0
 8003a32:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	2201      	movs	r2, #1
 8003a38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a3a:	7afb      	ldrb	r3, [r7, #11]
 8003a3c:	f003 030f 	and.w	r3, r3, #15
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d102      	bne.n	8003a54 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a54:	7afb      	ldrb	r3, [r7, #11]
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d109      	bne.n	8003a72 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6818      	ldr	r0, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	461a      	mov	r2, r3
 8003a6a:	6979      	ldr	r1, [r7, #20]
 8003a6c:	f002 fd36 	bl	80064dc <USB_EP0StartXfer>
 8003a70:	e008      	b.n	8003a84 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6818      	ldr	r0, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	6979      	ldr	r1, [r7, #20]
 8003a80:	f002 fadc 	bl	800603c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b084      	sub	sp, #16
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
 8003a96:	460b      	mov	r3, r1
 8003a98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a9a:	78fb      	ldrb	r3, [r7, #3]
 8003a9c:	f003 020f 	and.w	r2, r3, #15
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d901      	bls.n	8003aac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e050      	b.n	8003b4e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003aac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	da0f      	bge.n	8003ad4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ab4:	78fb      	ldrb	r3, [r7, #3]
 8003ab6:	f003 020f 	and.w	r2, r3, #15
 8003aba:	4613      	mov	r3, r2
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	4413      	add	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	3338      	adds	r3, #56	; 0x38
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	3304      	adds	r3, #4
 8003aca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	705a      	strb	r2, [r3, #1]
 8003ad2:	e00d      	b.n	8003af0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ad4:	78fa      	ldrb	r2, [r7, #3]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	4413      	add	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2201      	movs	r2, #1
 8003af4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003af6:	78fb      	ldrb	r3, [r7, #3]
 8003af8:	f003 030f 	and.w	r3, r3, #15
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d101      	bne.n	8003b10 <HAL_PCD_EP_SetStall+0x82>
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	e01e      	b.n	8003b4e <HAL_PCD_EP_SetStall+0xc0>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68f9      	ldr	r1, [r7, #12]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f002 ff78 	bl	8006a14 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b24:	78fb      	ldrb	r3, [r7, #3]
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10a      	bne.n	8003b44 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6818      	ldr	r0, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	b2d9      	uxtb	r1, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b3e:	461a      	mov	r2, r3
 8003b40:	f003 f96a 	bl	8006e18 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b084      	sub	sp, #16
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
 8003b5e:	460b      	mov	r3, r1
 8003b60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003b62:	78fb      	ldrb	r3, [r7, #3]
 8003b64:	f003 020f 	and.w	r2, r3, #15
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d901      	bls.n	8003b74 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e042      	b.n	8003bfa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	da0f      	bge.n	8003b9c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	f003 020f 	and.w	r2, r3, #15
 8003b82:	4613      	mov	r3, r2
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	4413      	add	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	3338      	adds	r3, #56	; 0x38
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	4413      	add	r3, r2
 8003b90:	3304      	adds	r3, #4
 8003b92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2201      	movs	r2, #1
 8003b98:	705a      	strb	r2, [r3, #1]
 8003b9a:	e00f      	b.n	8003bbc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b9c:	78fb      	ldrb	r3, [r7, #3]
 8003b9e:	f003 020f 	and.w	r2, r3, #15
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	4413      	add	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	3304      	adds	r3, #4
 8003bb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bc2:	78fb      	ldrb	r3, [r7, #3]
 8003bc4:	f003 030f 	and.w	r3, r3, #15
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d101      	bne.n	8003bdc <HAL_PCD_EP_ClrStall+0x86>
 8003bd8:	2302      	movs	r3, #2
 8003bda:	e00e      	b.n	8003bfa <HAL_PCD_EP_ClrStall+0xa4>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68f9      	ldr	r1, [r7, #12]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f002 ff80 	bl	8006af0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b084      	sub	sp, #16
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003c0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	da0c      	bge.n	8003c30 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c16:	78fb      	ldrb	r3, [r7, #3]
 8003c18:	f003 020f 	and.w	r2, r3, #15
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	4413      	add	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	3338      	adds	r3, #56	; 0x38
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	4413      	add	r3, r2
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	60fb      	str	r3, [r7, #12]
 8003c2e:	e00c      	b.n	8003c4a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c30:	78fb      	ldrb	r3, [r7, #3]
 8003c32:	f003 020f 	and.w	r2, r3, #15
 8003c36:	4613      	mov	r3, r2
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	4413      	add	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	4413      	add	r3, r2
 8003c46:	3304      	adds	r3, #4
 8003c48:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68f9      	ldr	r1, [r7, #12]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f002 fd9f 	bl	8006794 <USB_EPStopXfer>
 8003c56:	4603      	mov	r3, r0
 8003c58:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003c5a:	7afb      	ldrb	r3, [r7, #11]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b08a      	sub	sp, #40	; 0x28
 8003c68:	af02      	add	r7, sp, #8
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	4413      	add	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	3338      	adds	r3, #56	; 0x38
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	4413      	add	r3, r2
 8003c88:	3304      	adds	r3, #4
 8003c8a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6a1a      	ldr	r2, [r3, #32]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d901      	bls.n	8003c9c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e06c      	b.n	8003d76 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	699a      	ldr	r2, [r3, #24]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	69fa      	ldr	r2, [r7, #28]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d902      	bls.n	8003cb8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	3303      	adds	r3, #3
 8003cbc:	089b      	lsrs	r3, r3, #2
 8003cbe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cc0:	e02b      	b.n	8003d1a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	699a      	ldr	r2, [r3, #24]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	69fa      	ldr	r2, [r7, #28]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d902      	bls.n	8003cde <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	3303      	adds	r3, #3
 8003ce2:	089b      	lsrs	r3, r3, #2
 8003ce4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6919      	ldr	r1, [r3, #16]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	6978      	ldr	r0, [r7, #20]
 8003cfe:	f002 fdf3 	bl	80068e8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	691a      	ldr	r2, [r3, #16]
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	441a      	add	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6a1a      	ldr	r2, [r3, #32]
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	441a      	add	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	015a      	lsls	r2, r3, #5
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	4413      	add	r3, r2
 8003d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d809      	bhi.n	8003d44 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6a1a      	ldr	r2, [r3, #32]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d203      	bcs.n	8003d44 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1be      	bne.n	8003cc2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	699a      	ldr	r2, [r3, #24]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d811      	bhi.n	8003d74 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	2201      	movs	r2, #1
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	6939      	ldr	r1, [r7, #16]
 8003d6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d70:	4013      	ands	r3, r2
 8003d72:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3720      	adds	r7, #32
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
	...

08003d80 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b088      	sub	sp, #32
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	333c      	adds	r3, #60	; 0x3c
 8003d98:	3304      	adds	r3, #4
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	015a      	lsls	r2, r3, #5
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d17b      	bne.n	8003eae <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d015      	beq.n	8003dec <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	4a61      	ldr	r2, [pc, #388]	; (8003f48 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	f240 80b9 	bls.w	8003f3c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 80b3 	beq.w	8003f3c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	015a      	lsls	r2, r3, #5
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	4413      	add	r3, r2
 8003dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de2:	461a      	mov	r2, r3
 8003de4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003de8:	6093      	str	r3, [r2, #8]
 8003dea:	e0a7      	b.n	8003f3c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	f003 0320 	and.w	r3, r3, #32
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d009      	beq.n	8003e0a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	015a      	lsls	r2, r3, #5
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e02:	461a      	mov	r2, r3
 8003e04:	2320      	movs	r3, #32
 8003e06:	6093      	str	r3, [r2, #8]
 8003e08:	e098      	b.n	8003f3c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f040 8093 	bne.w	8003f3c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	4a4b      	ldr	r2, [pc, #300]	; (8003f48 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d90f      	bls.n	8003e3e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00a      	beq.n	8003e3e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e34:	461a      	mov	r2, r3
 8003e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e3a:	6093      	str	r3, [r2, #8]
 8003e3c:	e07e      	b.n	8003f3c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	4613      	mov	r3, r2
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	4413      	add	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	4413      	add	r3, r2
 8003e50:	3304      	adds	r3, #4
 8003e52:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	69da      	ldr	r2, [r3, #28]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	0159      	lsls	r1, r3, #5
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	440b      	add	r3, r1
 8003e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e6a:	1ad2      	subs	r2, r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d114      	bne.n	8003ea0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d109      	bne.n	8003e92 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6818      	ldr	r0, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e88:	461a      	mov	r2, r3
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	f002 ffc4 	bl	8006e18 <USB_EP0_OutStart>
 8003e90:	e006      	b.n	8003ea0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	691a      	ldr	r2, [r3, #16]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	441a      	add	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f005 fbe8 	bl	800967c <HAL_PCD_DataOutStageCallback>
 8003eac:	e046      	b.n	8003f3c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	4a26      	ldr	r2, [pc, #152]	; (8003f4c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d124      	bne.n	8003f00 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00a      	beq.n	8003ed6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	015a      	lsls	r2, r3, #5
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ecc:	461a      	mov	r2, r3
 8003ece:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ed2:	6093      	str	r3, [r2, #8]
 8003ed4:	e032      	b.n	8003f3c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	f003 0320 	and.w	r3, r3, #32
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d008      	beq.n	8003ef2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	015a      	lsls	r2, r3, #5
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eec:	461a      	mov	r2, r3
 8003eee:	2320      	movs	r3, #32
 8003ef0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f005 fbbf 	bl	800967c <HAL_PCD_DataOutStageCallback>
 8003efe:	e01d      	b.n	8003f3c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d114      	bne.n	8003f30 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	4413      	add	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	440b      	add	r3, r1
 8003f14:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d108      	bne.n	8003f30 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6818      	ldr	r0, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f28:	461a      	mov	r2, r3
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	f002 ff74 	bl	8006e18 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	4619      	mov	r1, r3
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f005 fba0 	bl	800967c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3720      	adds	r7, #32
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	4f54300a 	.word	0x4f54300a
 8003f4c:	4f54310a 	.word	0x4f54310a

08003f50 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	333c      	adds	r3, #60	; 0x3c
 8003f68:	3304      	adds	r3, #4
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	015a      	lsls	r2, r3, #5
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	4413      	add	r3, r2
 8003f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	4a15      	ldr	r2, [pc, #84]	; (8003fd8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d90e      	bls.n	8003fa4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d009      	beq.n	8003fa4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	015a      	lsls	r2, r3, #5
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	4413      	add	r3, r2
 8003f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fa2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f005 fb57 	bl	8009658 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	4a0a      	ldr	r2, [pc, #40]	; (8003fd8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d90c      	bls.n	8003fcc <PCD_EP_OutSetupPacket_int+0x7c>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d108      	bne.n	8003fcc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6818      	ldr	r0, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	f002 ff26 	bl	8006e18 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3718      	adds	r7, #24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	4f54300a 	.word	0x4f54300a

08003fdc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	70fb      	strb	r3, [r7, #3]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ff4:	78fb      	ldrb	r3, [r7, #3]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d107      	bne.n	800400a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003ffa:	883b      	ldrh	r3, [r7, #0]
 8003ffc:	0419      	lsls	r1, r3, #16
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	430a      	orrs	r2, r1
 8004006:	629a      	str	r2, [r3, #40]	; 0x28
 8004008:	e028      	b.n	800405c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004010:	0c1b      	lsrs	r3, r3, #16
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	4413      	add	r3, r2
 8004016:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004018:	2300      	movs	r3, #0
 800401a:	73fb      	strb	r3, [r7, #15]
 800401c:	e00d      	b.n	800403a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	7bfb      	ldrb	r3, [r7, #15]
 8004024:	3340      	adds	r3, #64	; 0x40
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	0c1b      	lsrs	r3, r3, #16
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	4413      	add	r3, r2
 8004032:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004034:	7bfb      	ldrb	r3, [r7, #15]
 8004036:	3301      	adds	r3, #1
 8004038:	73fb      	strb	r3, [r7, #15]
 800403a:	7bfa      	ldrb	r2, [r7, #15]
 800403c:	78fb      	ldrb	r3, [r7, #3]
 800403e:	3b01      	subs	r3, #1
 8004040:	429a      	cmp	r2, r3
 8004042:	d3ec      	bcc.n	800401e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004044:	883b      	ldrh	r3, [r7, #0]
 8004046:	0418      	lsls	r0, r3, #16
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6819      	ldr	r1, [r3, #0]
 800404c:	78fb      	ldrb	r3, [r7, #3]
 800404e:	3b01      	subs	r3, #1
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	4302      	orrs	r2, r0
 8004054:	3340      	adds	r3, #64	; 0x40
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	440b      	add	r3, r1
 800405a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
 8004072:	460b      	mov	r3, r1
 8004074:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	887a      	ldrh	r2, [r7, #2]
 800407c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040ba:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <HAL_PCDEx_ActivateLPM+0x44>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3714      	adds	r7, #20
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	10000003 	.word	0x10000003

080040d4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040d8:	4b05      	ldr	r3, [pc, #20]	; (80040f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a04      	ldr	r2, [pc, #16]	; (80040f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e2:	6013      	str	r3, [r2, #0]
}
 80040e4:	bf00      	nop
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	40007000 	.word	0x40007000

080040f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80040fc:	2300      	movs	r3, #0
 80040fe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e29b      	b.n	8004642 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	f000 8087 	beq.w	8004226 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004118:	4b96      	ldr	r3, [pc, #600]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f003 030c 	and.w	r3, r3, #12
 8004120:	2b04      	cmp	r3, #4
 8004122:	d00c      	beq.n	800413e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004124:	4b93      	ldr	r3, [pc, #588]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f003 030c 	and.w	r3, r3, #12
 800412c:	2b08      	cmp	r3, #8
 800412e:	d112      	bne.n	8004156 <HAL_RCC_OscConfig+0x62>
 8004130:	4b90      	ldr	r3, [pc, #576]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004138:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800413c:	d10b      	bne.n	8004156 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800413e:	4b8d      	ldr	r3, [pc, #564]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d06c      	beq.n	8004224 <HAL_RCC_OscConfig+0x130>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d168      	bne.n	8004224 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e275      	b.n	8004642 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800415e:	d106      	bne.n	800416e <HAL_RCC_OscConfig+0x7a>
 8004160:	4b84      	ldr	r3, [pc, #528]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a83      	ldr	r2, [pc, #524]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 8004166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800416a:	6013      	str	r3, [r2, #0]
 800416c:	e02e      	b.n	80041cc <HAL_RCC_OscConfig+0xd8>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10c      	bne.n	8004190 <HAL_RCC_OscConfig+0x9c>
 8004176:	4b7f      	ldr	r3, [pc, #508]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a7e      	ldr	r2, [pc, #504]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 800417c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004180:	6013      	str	r3, [r2, #0]
 8004182:	4b7c      	ldr	r3, [pc, #496]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a7b      	ldr	r2, [pc, #492]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 8004188:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800418c:	6013      	str	r3, [r2, #0]
 800418e:	e01d      	b.n	80041cc <HAL_RCC_OscConfig+0xd8>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004198:	d10c      	bne.n	80041b4 <HAL_RCC_OscConfig+0xc0>
 800419a:	4b76      	ldr	r3, [pc, #472]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a75      	ldr	r2, [pc, #468]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 80041a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041a4:	6013      	str	r3, [r2, #0]
 80041a6:	4b73      	ldr	r3, [pc, #460]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a72      	ldr	r2, [pc, #456]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 80041ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b0:	6013      	str	r3, [r2, #0]
 80041b2:	e00b      	b.n	80041cc <HAL_RCC_OscConfig+0xd8>
 80041b4:	4b6f      	ldr	r3, [pc, #444]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a6e      	ldr	r2, [pc, #440]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 80041ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	4b6c      	ldr	r3, [pc, #432]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a6b      	ldr	r2, [pc, #428]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 80041c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d013      	beq.n	80041fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d4:	f7fd fb40 	bl	8001858 <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041dc:	f7fd fb3c 	bl	8001858 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b64      	cmp	r3, #100	; 0x64
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e229      	b.n	8004642 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ee:	4b61      	ldr	r3, [pc, #388]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0f0      	beq.n	80041dc <HAL_RCC_OscConfig+0xe8>
 80041fa:	e014      	b.n	8004226 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fc:	f7fd fb2c 	bl	8001858 <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004204:	f7fd fb28 	bl	8001858 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b64      	cmp	r3, #100	; 0x64
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e215      	b.n	8004642 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004216:	4b57      	ldr	r3, [pc, #348]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1f0      	bne.n	8004204 <HAL_RCC_OscConfig+0x110>
 8004222:	e000      	b.n	8004226 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d069      	beq.n	8004306 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004232:	4b50      	ldr	r3, [pc, #320]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 030c 	and.w	r3, r3, #12
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00b      	beq.n	8004256 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800423e:	4b4d      	ldr	r3, [pc, #308]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f003 030c 	and.w	r3, r3, #12
 8004246:	2b08      	cmp	r3, #8
 8004248:	d11c      	bne.n	8004284 <HAL_RCC_OscConfig+0x190>
 800424a:	4b4a      	ldr	r3, [pc, #296]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d116      	bne.n	8004284 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004256:	4b47      	ldr	r3, [pc, #284]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d005      	beq.n	800426e <HAL_RCC_OscConfig+0x17a>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d001      	beq.n	800426e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e1e9      	b.n	8004642 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800426e:	4b41      	ldr	r3, [pc, #260]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	493d      	ldr	r1, [pc, #244]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 800427e:	4313      	orrs	r3, r2
 8004280:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004282:	e040      	b.n	8004306 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d023      	beq.n	80042d4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800428c:	4b39      	ldr	r3, [pc, #228]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a38      	ldr	r2, [pc, #224]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 8004292:	f043 0301 	orr.w	r3, r3, #1
 8004296:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004298:	f7fd fade 	bl	8001858 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042a0:	f7fd fada 	bl	8001858 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e1c7      	b.n	8004642 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042b2:	4b30      	ldr	r3, [pc, #192]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0f0      	beq.n	80042a0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042be:	4b2d      	ldr	r3, [pc, #180]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	4929      	ldr	r1, [pc, #164]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	600b      	str	r3, [r1, #0]
 80042d2:	e018      	b.n	8004306 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042d4:	4b27      	ldr	r3, [pc, #156]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a26      	ldr	r2, [pc, #152]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 80042da:	f023 0301 	bic.w	r3, r3, #1
 80042de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e0:	f7fd faba 	bl	8001858 <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042e8:	f7fd fab6 	bl	8001858 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e1a3      	b.n	8004642 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042fa:	4b1e      	ldr	r3, [pc, #120]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1f0      	bne.n	80042e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0308 	and.w	r3, r3, #8
 800430e:	2b00      	cmp	r3, #0
 8004310:	d038      	beq.n	8004384 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d019      	beq.n	800434e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800431a:	4b16      	ldr	r3, [pc, #88]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 800431c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800431e:	4a15      	ldr	r2, [pc, #84]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 8004320:	f043 0301 	orr.w	r3, r3, #1
 8004324:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004326:	f7fd fa97 	bl	8001858 <HAL_GetTick>
 800432a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800432c:	e008      	b.n	8004340 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800432e:	f7fd fa93 	bl	8001858 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d901      	bls.n	8004340 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e180      	b.n	8004642 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004340:	4b0c      	ldr	r3, [pc, #48]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 8004342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d0f0      	beq.n	800432e <HAL_RCC_OscConfig+0x23a>
 800434c:	e01a      	b.n	8004384 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800434e:	4b09      	ldr	r3, [pc, #36]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 8004350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004352:	4a08      	ldr	r2, [pc, #32]	; (8004374 <HAL_RCC_OscConfig+0x280>)
 8004354:	f023 0301 	bic.w	r3, r3, #1
 8004358:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800435a:	f7fd fa7d 	bl	8001858 <HAL_GetTick>
 800435e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004360:	e00a      	b.n	8004378 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004362:	f7fd fa79 	bl	8001858 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d903      	bls.n	8004378 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e166      	b.n	8004642 <HAL_RCC_OscConfig+0x54e>
 8004374:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004378:	4b92      	ldr	r3, [pc, #584]	; (80045c4 <HAL_RCC_OscConfig+0x4d0>)
 800437a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1ee      	bne.n	8004362 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 80a4 	beq.w	80044da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004392:	4b8c      	ldr	r3, [pc, #560]	; (80045c4 <HAL_RCC_OscConfig+0x4d0>)
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10d      	bne.n	80043ba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800439e:	4b89      	ldr	r3, [pc, #548]	; (80045c4 <HAL_RCC_OscConfig+0x4d0>)
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	4a88      	ldr	r2, [pc, #544]	; (80045c4 <HAL_RCC_OscConfig+0x4d0>)
 80043a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043a8:	6413      	str	r3, [r2, #64]	; 0x40
 80043aa:	4b86      	ldr	r3, [pc, #536]	; (80045c4 <HAL_RCC_OscConfig+0x4d0>)
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b2:	60bb      	str	r3, [r7, #8]
 80043b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043b6:	2301      	movs	r3, #1
 80043b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043ba:	4b83      	ldr	r3, [pc, #524]	; (80045c8 <HAL_RCC_OscConfig+0x4d4>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d118      	bne.n	80043f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80043c6:	4b80      	ldr	r3, [pc, #512]	; (80045c8 <HAL_RCC_OscConfig+0x4d4>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a7f      	ldr	r2, [pc, #508]	; (80045c8 <HAL_RCC_OscConfig+0x4d4>)
 80043cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043d2:	f7fd fa41 	bl	8001858 <HAL_GetTick>
 80043d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043d8:	e008      	b.n	80043ec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043da:	f7fd fa3d 	bl	8001858 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b64      	cmp	r3, #100	; 0x64
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e12a      	b.n	8004642 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043ec:	4b76      	ldr	r3, [pc, #472]	; (80045c8 <HAL_RCC_OscConfig+0x4d4>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0f0      	beq.n	80043da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d106      	bne.n	800440e <HAL_RCC_OscConfig+0x31a>
 8004400:	4b70      	ldr	r3, [pc, #448]	; (80045c4 <HAL_RCC_OscConfig+0x4d0>)
 8004402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004404:	4a6f      	ldr	r2, [pc, #444]	; (80045c4 <HAL_RCC_OscConfig+0x4d0>)
 8004406:	f043 0301 	orr.w	r3, r3, #1
 800440a:	6713      	str	r3, [r2, #112]	; 0x70
 800440c:	e02d      	b.n	800446a <HAL_RCC_OscConfig+0x376>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10c      	bne.n	8004430 <HAL_RCC_OscConfig+0x33c>
 8004416:	4b6b      	ldr	r3, [pc, #428]	; (80045c4 <HAL_RCC_OscConfig+0x4d0>)
 8004418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441a:	4a6a      	ldr	r2, [pc, #424]	; (80045c4 <HAL_RCC_OscConfig+0x4d0>)
 800441c:	f023 0301 	bic.w	r3, r3, #1
 8004420:	6713      	str	r3, [r2, #112]	; 0x70
 8004422:	4b68      	ldr	r3, [pc, #416]	; (80045c4 <HAL_RCC_OscConfig+0x4d0>)
 8004424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004426:	4a67      	ldr	r2, [pc, #412]	; (80045c4 <HAL_RCC_OscConfig+0x4d0>)
 8004428:	f023 0304 	bic.w	r3, r3, #4
 800442c:	6713      	str	r3, [r2, #112]	; 0x70
 800442e:	e01c      	b.n	800446a <HAL_RCC_OscConfig+0x376>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	2b05      	cmp	r3, #5
 8004436:	d10c      	bne.n	8004452 <HAL_RCC_OscConfig+0x35e>
 8004438:	4b62      	ldr	r3, [pc, #392]	; (80045c4 <HAL_RCC_OscConfig+0x4d0>)
 800443a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443c:	4a61      	ldr	r2, [pc, #388]	; (80045c4 <HAL_RCC_OscConfig+0x4d0>)
 800443e:	f043 0304 	orr.w	r3, r3, #4
 8004442:	6713      	str	r3, [r2, #112]	; 0x70
 8004444:	4b5f      	ldr	r3, [pc, #380]	; (80045c4 <HAL_RCC_OscConfig+0x4d0>)
 8004446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004448:	4a5e      	ldr	r2, [pc, #376]	; (80045c4 <HAL_RCC_OscConfig+0x4d0>)
 800444a:	f043 0301 	orr.w	r3, r3, #1
 800444e:	6713      	str	r3, [r2, #112]	; 0x70
 8004450:	e00b      	b.n	800446a <HAL_RCC_OscConfig+0x376>
 8004452:	4b5c      	ldr	r3, [pc, #368]	; (80045c4 <HAL_RCC_OscConfig+0x4d0>)
 8004454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004456:	4a5b      	ldr	r2, [pc, #364]	; (80045c4 <HAL_RCC_OscConfig+0x4d0>)
 8004458:	f023 0301 	bic.w	r3, r3, #1
 800445c:	6713      	str	r3, [r2, #112]	; 0x70
 800445e:	4b59      	ldr	r3, [pc, #356]	; (80045c4 <HAL_RCC_OscConfig+0x4d0>)
 8004460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004462:	4a58      	ldr	r2, [pc, #352]	; (80045c4 <HAL_RCC_OscConfig+0x4d0>)
 8004464:	f023 0304 	bic.w	r3, r3, #4
 8004468:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d015      	beq.n	800449e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004472:	f7fd f9f1 	bl	8001858 <HAL_GetTick>
 8004476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004478:	e00a      	b.n	8004490 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800447a:	f7fd f9ed 	bl	8001858 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	f241 3288 	movw	r2, #5000	; 0x1388
 8004488:	4293      	cmp	r3, r2
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e0d8      	b.n	8004642 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004490:	4b4c      	ldr	r3, [pc, #304]	; (80045c4 <HAL_RCC_OscConfig+0x4d0>)
 8004492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0ee      	beq.n	800447a <HAL_RCC_OscConfig+0x386>
 800449c:	e014      	b.n	80044c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800449e:	f7fd f9db 	bl	8001858 <HAL_GetTick>
 80044a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044a4:	e00a      	b.n	80044bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044a6:	f7fd f9d7 	bl	8001858 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e0c2      	b.n	8004642 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044bc:	4b41      	ldr	r3, [pc, #260]	; (80045c4 <HAL_RCC_OscConfig+0x4d0>)
 80044be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1ee      	bne.n	80044a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044c8:	7dfb      	ldrb	r3, [r7, #23]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d105      	bne.n	80044da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ce:	4b3d      	ldr	r3, [pc, #244]	; (80045c4 <HAL_RCC_OscConfig+0x4d0>)
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	4a3c      	ldr	r2, [pc, #240]	; (80045c4 <HAL_RCC_OscConfig+0x4d0>)
 80044d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 80ae 	beq.w	8004640 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044e4:	4b37      	ldr	r3, [pc, #220]	; (80045c4 <HAL_RCC_OscConfig+0x4d0>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f003 030c 	and.w	r3, r3, #12
 80044ec:	2b08      	cmp	r3, #8
 80044ee:	d06d      	beq.n	80045cc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d14b      	bne.n	8004590 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044f8:	4b32      	ldr	r3, [pc, #200]	; (80045c4 <HAL_RCC_OscConfig+0x4d0>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a31      	ldr	r2, [pc, #196]	; (80045c4 <HAL_RCC_OscConfig+0x4d0>)
 80044fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004504:	f7fd f9a8 	bl	8001858 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800450c:	f7fd f9a4 	bl	8001858 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e091      	b.n	8004642 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800451e:	4b29      	ldr	r3, [pc, #164]	; (80045c4 <HAL_RCC_OscConfig+0x4d0>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f0      	bne.n	800450c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	69da      	ldr	r2, [r3, #28]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	431a      	orrs	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	019b      	lsls	r3, r3, #6
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004540:	085b      	lsrs	r3, r3, #1
 8004542:	3b01      	subs	r3, #1
 8004544:	041b      	lsls	r3, r3, #16
 8004546:	431a      	orrs	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454c:	061b      	lsls	r3, r3, #24
 800454e:	431a      	orrs	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004554:	071b      	lsls	r3, r3, #28
 8004556:	491b      	ldr	r1, [pc, #108]	; (80045c4 <HAL_RCC_OscConfig+0x4d0>)
 8004558:	4313      	orrs	r3, r2
 800455a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800455c:	4b19      	ldr	r3, [pc, #100]	; (80045c4 <HAL_RCC_OscConfig+0x4d0>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a18      	ldr	r2, [pc, #96]	; (80045c4 <HAL_RCC_OscConfig+0x4d0>)
 8004562:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004566:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004568:	f7fd f976 	bl	8001858 <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004570:	f7fd f972 	bl	8001858 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e05f      	b.n	8004642 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004582:	4b10      	ldr	r3, [pc, #64]	; (80045c4 <HAL_RCC_OscConfig+0x4d0>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0f0      	beq.n	8004570 <HAL_RCC_OscConfig+0x47c>
 800458e:	e057      	b.n	8004640 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004590:	4b0c      	ldr	r3, [pc, #48]	; (80045c4 <HAL_RCC_OscConfig+0x4d0>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a0b      	ldr	r2, [pc, #44]	; (80045c4 <HAL_RCC_OscConfig+0x4d0>)
 8004596:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800459a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459c:	f7fd f95c 	bl	8001858 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a4:	f7fd f958 	bl	8001858 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e045      	b.n	8004642 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b6:	4b03      	ldr	r3, [pc, #12]	; (80045c4 <HAL_RCC_OscConfig+0x4d0>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1f0      	bne.n	80045a4 <HAL_RCC_OscConfig+0x4b0>
 80045c2:	e03d      	b.n	8004640 <HAL_RCC_OscConfig+0x54c>
 80045c4:	40023800 	.word	0x40023800
 80045c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80045cc:	4b1f      	ldr	r3, [pc, #124]	; (800464c <HAL_RCC_OscConfig+0x558>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d030      	beq.n	800463c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d129      	bne.n	800463c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d122      	bne.n	800463c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045fc:	4013      	ands	r3, r2
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004602:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004604:	4293      	cmp	r3, r2
 8004606:	d119      	bne.n	800463c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004612:	085b      	lsrs	r3, r3, #1
 8004614:	3b01      	subs	r3, #1
 8004616:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004618:	429a      	cmp	r2, r3
 800461a:	d10f      	bne.n	800463c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004626:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004628:	429a      	cmp	r2, r3
 800462a:	d107      	bne.n	800463c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004636:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004638:	429a      	cmp	r2, r3
 800463a:	d001      	beq.n	8004640 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e000      	b.n	8004642 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3718      	adds	r7, #24
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	40023800 	.word	0x40023800

08004650 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800465a:	2300      	movs	r3, #0
 800465c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e0d0      	b.n	800480a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004668:	4b6a      	ldr	r3, [pc, #424]	; (8004814 <HAL_RCC_ClockConfig+0x1c4>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 030f 	and.w	r3, r3, #15
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	429a      	cmp	r2, r3
 8004674:	d910      	bls.n	8004698 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004676:	4b67      	ldr	r3, [pc, #412]	; (8004814 <HAL_RCC_ClockConfig+0x1c4>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f023 020f 	bic.w	r2, r3, #15
 800467e:	4965      	ldr	r1, [pc, #404]	; (8004814 <HAL_RCC_ClockConfig+0x1c4>)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	4313      	orrs	r3, r2
 8004684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004686:	4b63      	ldr	r3, [pc, #396]	; (8004814 <HAL_RCC_ClockConfig+0x1c4>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 030f 	and.w	r3, r3, #15
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	429a      	cmp	r2, r3
 8004692:	d001      	beq.n	8004698 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e0b8      	b.n	800480a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d020      	beq.n	80046e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0304 	and.w	r3, r3, #4
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d005      	beq.n	80046bc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046b0:	4b59      	ldr	r3, [pc, #356]	; (8004818 <HAL_RCC_ClockConfig+0x1c8>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	4a58      	ldr	r2, [pc, #352]	; (8004818 <HAL_RCC_ClockConfig+0x1c8>)
 80046b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0308 	and.w	r3, r3, #8
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d005      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046c8:	4b53      	ldr	r3, [pc, #332]	; (8004818 <HAL_RCC_ClockConfig+0x1c8>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	4a52      	ldr	r2, [pc, #328]	; (8004818 <HAL_RCC_ClockConfig+0x1c8>)
 80046ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046d4:	4b50      	ldr	r3, [pc, #320]	; (8004818 <HAL_RCC_ClockConfig+0x1c8>)
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	494d      	ldr	r1, [pc, #308]	; (8004818 <HAL_RCC_ClockConfig+0x1c8>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d040      	beq.n	8004774 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d107      	bne.n	800470a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046fa:	4b47      	ldr	r3, [pc, #284]	; (8004818 <HAL_RCC_ClockConfig+0x1c8>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d115      	bne.n	8004732 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e07f      	b.n	800480a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2b02      	cmp	r3, #2
 8004710:	d107      	bne.n	8004722 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004712:	4b41      	ldr	r3, [pc, #260]	; (8004818 <HAL_RCC_ClockConfig+0x1c8>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d109      	bne.n	8004732 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e073      	b.n	800480a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004722:	4b3d      	ldr	r3, [pc, #244]	; (8004818 <HAL_RCC_ClockConfig+0x1c8>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e06b      	b.n	800480a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004732:	4b39      	ldr	r3, [pc, #228]	; (8004818 <HAL_RCC_ClockConfig+0x1c8>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f023 0203 	bic.w	r2, r3, #3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	4936      	ldr	r1, [pc, #216]	; (8004818 <HAL_RCC_ClockConfig+0x1c8>)
 8004740:	4313      	orrs	r3, r2
 8004742:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004744:	f7fd f888 	bl	8001858 <HAL_GetTick>
 8004748:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800474a:	e00a      	b.n	8004762 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800474c:	f7fd f884 	bl	8001858 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	f241 3288 	movw	r2, #5000	; 0x1388
 800475a:	4293      	cmp	r3, r2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e053      	b.n	800480a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004762:	4b2d      	ldr	r3, [pc, #180]	; (8004818 <HAL_RCC_ClockConfig+0x1c8>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 020c 	and.w	r2, r3, #12
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	429a      	cmp	r2, r3
 8004772:	d1eb      	bne.n	800474c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004774:	4b27      	ldr	r3, [pc, #156]	; (8004814 <HAL_RCC_ClockConfig+0x1c4>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 030f 	and.w	r3, r3, #15
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	429a      	cmp	r2, r3
 8004780:	d210      	bcs.n	80047a4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004782:	4b24      	ldr	r3, [pc, #144]	; (8004814 <HAL_RCC_ClockConfig+0x1c4>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f023 020f 	bic.w	r2, r3, #15
 800478a:	4922      	ldr	r1, [pc, #136]	; (8004814 <HAL_RCC_ClockConfig+0x1c4>)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	4313      	orrs	r3, r2
 8004790:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004792:	4b20      	ldr	r3, [pc, #128]	; (8004814 <HAL_RCC_ClockConfig+0x1c4>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 030f 	and.w	r3, r3, #15
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	429a      	cmp	r2, r3
 800479e:	d001      	beq.n	80047a4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e032      	b.n	800480a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d008      	beq.n	80047c2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047b0:	4b19      	ldr	r3, [pc, #100]	; (8004818 <HAL_RCC_ClockConfig+0x1c8>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	4916      	ldr	r1, [pc, #88]	; (8004818 <HAL_RCC_ClockConfig+0x1c8>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0308 	and.w	r3, r3, #8
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d009      	beq.n	80047e2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80047ce:	4b12      	ldr	r3, [pc, #72]	; (8004818 <HAL_RCC_ClockConfig+0x1c8>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	00db      	lsls	r3, r3, #3
 80047dc:	490e      	ldr	r1, [pc, #56]	; (8004818 <HAL_RCC_ClockConfig+0x1c8>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047e2:	f000 f821 	bl	8004828 <HAL_RCC_GetSysClockFreq>
 80047e6:	4602      	mov	r2, r0
 80047e8:	4b0b      	ldr	r3, [pc, #44]	; (8004818 <HAL_RCC_ClockConfig+0x1c8>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	091b      	lsrs	r3, r3, #4
 80047ee:	f003 030f 	and.w	r3, r3, #15
 80047f2:	490a      	ldr	r1, [pc, #40]	; (800481c <HAL_RCC_ClockConfig+0x1cc>)
 80047f4:	5ccb      	ldrb	r3, [r1, r3]
 80047f6:	fa22 f303 	lsr.w	r3, r2, r3
 80047fa:	4a09      	ldr	r2, [pc, #36]	; (8004820 <HAL_RCC_ClockConfig+0x1d0>)
 80047fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80047fe:	4b09      	ldr	r3, [pc, #36]	; (8004824 <HAL_RCC_ClockConfig+0x1d4>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f7fc ffe4 	bl	80017d0 <HAL_InitTick>

  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	40023c00 	.word	0x40023c00
 8004818:	40023800 	.word	0x40023800
 800481c:	08009f4c 	.word	0x08009f4c
 8004820:	2000000c 	.word	0x2000000c
 8004824:	20000010 	.word	0x20000010

08004828 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800482c:	b090      	sub	sp, #64	; 0x40
 800482e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004830:	2300      	movs	r3, #0
 8004832:	637b      	str	r3, [r7, #52]	; 0x34
 8004834:	2300      	movs	r3, #0
 8004836:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004838:	2300      	movs	r3, #0
 800483a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800483c:	2300      	movs	r3, #0
 800483e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004840:	4b59      	ldr	r3, [pc, #356]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f003 030c 	and.w	r3, r3, #12
 8004848:	2b08      	cmp	r3, #8
 800484a:	d00d      	beq.n	8004868 <HAL_RCC_GetSysClockFreq+0x40>
 800484c:	2b08      	cmp	r3, #8
 800484e:	f200 80a1 	bhi.w	8004994 <HAL_RCC_GetSysClockFreq+0x16c>
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <HAL_RCC_GetSysClockFreq+0x34>
 8004856:	2b04      	cmp	r3, #4
 8004858:	d003      	beq.n	8004862 <HAL_RCC_GetSysClockFreq+0x3a>
 800485a:	e09b      	b.n	8004994 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800485c:	4b53      	ldr	r3, [pc, #332]	; (80049ac <HAL_RCC_GetSysClockFreq+0x184>)
 800485e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004860:	e09b      	b.n	800499a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004862:	4b53      	ldr	r3, [pc, #332]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004864:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004866:	e098      	b.n	800499a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004868:	4b4f      	ldr	r3, [pc, #316]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004870:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004872:	4b4d      	ldr	r3, [pc, #308]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d028      	beq.n	80048d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800487e:	4b4a      	ldr	r3, [pc, #296]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	099b      	lsrs	r3, r3, #6
 8004884:	2200      	movs	r2, #0
 8004886:	623b      	str	r3, [r7, #32]
 8004888:	627a      	str	r2, [r7, #36]	; 0x24
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004890:	2100      	movs	r1, #0
 8004892:	4b47      	ldr	r3, [pc, #284]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004894:	fb03 f201 	mul.w	r2, r3, r1
 8004898:	2300      	movs	r3, #0
 800489a:	fb00 f303 	mul.w	r3, r0, r3
 800489e:	4413      	add	r3, r2
 80048a0:	4a43      	ldr	r2, [pc, #268]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80048a2:	fba0 1202 	umull	r1, r2, r0, r2
 80048a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048a8:	460a      	mov	r2, r1
 80048aa:	62ba      	str	r2, [r7, #40]	; 0x28
 80048ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048ae:	4413      	add	r3, r2
 80048b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b4:	2200      	movs	r2, #0
 80048b6:	61bb      	str	r3, [r7, #24]
 80048b8:	61fa      	str	r2, [r7, #28]
 80048ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80048c2:	f7fb fcb9 	bl	8000238 <__aeabi_uldivmod>
 80048c6:	4602      	mov	r2, r0
 80048c8:	460b      	mov	r3, r1
 80048ca:	4613      	mov	r3, r2
 80048cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048ce:	e053      	b.n	8004978 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048d0:	4b35      	ldr	r3, [pc, #212]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	099b      	lsrs	r3, r3, #6
 80048d6:	2200      	movs	r2, #0
 80048d8:	613b      	str	r3, [r7, #16]
 80048da:	617a      	str	r2, [r7, #20]
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80048e2:	f04f 0b00 	mov.w	fp, #0
 80048e6:	4652      	mov	r2, sl
 80048e8:	465b      	mov	r3, fp
 80048ea:	f04f 0000 	mov.w	r0, #0
 80048ee:	f04f 0100 	mov.w	r1, #0
 80048f2:	0159      	lsls	r1, r3, #5
 80048f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048f8:	0150      	lsls	r0, r2, #5
 80048fa:	4602      	mov	r2, r0
 80048fc:	460b      	mov	r3, r1
 80048fe:	ebb2 080a 	subs.w	r8, r2, sl
 8004902:	eb63 090b 	sbc.w	r9, r3, fp
 8004906:	f04f 0200 	mov.w	r2, #0
 800490a:	f04f 0300 	mov.w	r3, #0
 800490e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004912:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004916:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800491a:	ebb2 0408 	subs.w	r4, r2, r8
 800491e:	eb63 0509 	sbc.w	r5, r3, r9
 8004922:	f04f 0200 	mov.w	r2, #0
 8004926:	f04f 0300 	mov.w	r3, #0
 800492a:	00eb      	lsls	r3, r5, #3
 800492c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004930:	00e2      	lsls	r2, r4, #3
 8004932:	4614      	mov	r4, r2
 8004934:	461d      	mov	r5, r3
 8004936:	eb14 030a 	adds.w	r3, r4, sl
 800493a:	603b      	str	r3, [r7, #0]
 800493c:	eb45 030b 	adc.w	r3, r5, fp
 8004940:	607b      	str	r3, [r7, #4]
 8004942:	f04f 0200 	mov.w	r2, #0
 8004946:	f04f 0300 	mov.w	r3, #0
 800494a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800494e:	4629      	mov	r1, r5
 8004950:	028b      	lsls	r3, r1, #10
 8004952:	4621      	mov	r1, r4
 8004954:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004958:	4621      	mov	r1, r4
 800495a:	028a      	lsls	r2, r1, #10
 800495c:	4610      	mov	r0, r2
 800495e:	4619      	mov	r1, r3
 8004960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004962:	2200      	movs	r2, #0
 8004964:	60bb      	str	r3, [r7, #8]
 8004966:	60fa      	str	r2, [r7, #12]
 8004968:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800496c:	f7fb fc64 	bl	8000238 <__aeabi_uldivmod>
 8004970:	4602      	mov	r2, r0
 8004972:	460b      	mov	r3, r1
 8004974:	4613      	mov	r3, r2
 8004976:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004978:	4b0b      	ldr	r3, [pc, #44]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	0c1b      	lsrs	r3, r3, #16
 800497e:	f003 0303 	and.w	r3, r3, #3
 8004982:	3301      	adds	r3, #1
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004988:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800498a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004990:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004992:	e002      	b.n	800499a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004994:	4b05      	ldr	r3, [pc, #20]	; (80049ac <HAL_RCC_GetSysClockFreq+0x184>)
 8004996:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004998:	bf00      	nop
    }
  }
  return sysclockfreq;
 800499a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800499c:	4618      	mov	r0, r3
 800499e:	3740      	adds	r7, #64	; 0x40
 80049a0:	46bd      	mov	sp, r7
 80049a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049a6:	bf00      	nop
 80049a8:	40023800 	.word	0x40023800
 80049ac:	00f42400 	.word	0x00f42400
 80049b0:	017d7840 	.word	0x017d7840

080049b4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049b4:	b480      	push	{r7}
 80049b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049b8:	4b03      	ldr	r3, [pc, #12]	; (80049c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80049ba:	681b      	ldr	r3, [r3, #0]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	2000000c 	.word	0x2000000c

080049cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b088      	sub	sp, #32
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80049d4:	2300      	movs	r3, #0
 80049d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80049d8:	2300      	movs	r3, #0
 80049da:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80049dc:	2300      	movs	r3, #0
 80049de:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80049e0:	2300      	movs	r3, #0
 80049e2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80049e4:	2300      	movs	r3, #0
 80049e6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d012      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80049f4:	4b69      	ldr	r3, [pc, #420]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	4a68      	ldr	r2, [pc, #416]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80049fe:	6093      	str	r3, [r2, #8]
 8004a00:	4b66      	ldr	r3, [pc, #408]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a08:	4964      	ldr	r1, [pc, #400]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004a16:	2301      	movs	r3, #1
 8004a18:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d017      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a26:	4b5d      	ldr	r3, [pc, #372]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a34:	4959      	ldr	r1, [pc, #356]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a44:	d101      	bne.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004a46:	2301      	movs	r3, #1
 8004a48:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004a52:	2301      	movs	r3, #1
 8004a54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d017      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a62:	4b4e      	ldr	r3, [pc, #312]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a68:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a70:	494a      	ldr	r1, [pc, #296]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a80:	d101      	bne.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004a82:	2301      	movs	r3, #1
 8004a84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0320 	and.w	r3, r3, #32
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f000 808b 	beq.w	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ab0:	4b3a      	ldr	r3, [pc, #232]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab4:	4a39      	ldr	r2, [pc, #228]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aba:	6413      	str	r3, [r2, #64]	; 0x40
 8004abc:	4b37      	ldr	r3, [pc, #220]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ac4:	60bb      	str	r3, [r7, #8]
 8004ac6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ac8:	4b35      	ldr	r3, [pc, #212]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a34      	ldr	r2, [pc, #208]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ad2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ad4:	f7fc fec0 	bl	8001858 <HAL_GetTick>
 8004ad8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ada:	e008      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004adc:	f7fc febc 	bl	8001858 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b64      	cmp	r3, #100	; 0x64
 8004ae8:	d901      	bls.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e38f      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004aee:	4b2c      	ldr	r3, [pc, #176]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0f0      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004afa:	4b28      	ldr	r3, [pc, #160]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b02:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d035      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d02e      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b18:	4b20      	ldr	r3, [pc, #128]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b20:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b22:	4b1e      	ldr	r3, [pc, #120]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b26:	4a1d      	ldr	r2, [pc, #116]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b2c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b2e:	4b1b      	ldr	r3, [pc, #108]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b32:	4a1a      	ldr	r2, [pc, #104]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b38:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004b3a:	4a18      	ldr	r2, [pc, #96]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b40:	4b16      	ldr	r3, [pc, #88]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d114      	bne.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b4c:	f7fc fe84 	bl	8001858 <HAL_GetTick>
 8004b50:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b52:	e00a      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b54:	f7fc fe80 	bl	8001858 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d901      	bls.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e351      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b6a:	4b0c      	ldr	r3, [pc, #48]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d0ee      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b82:	d111      	bne.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004b84:	4b05      	ldr	r3, [pc, #20]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b90:	4b04      	ldr	r3, [pc, #16]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004b92:	400b      	ands	r3, r1
 8004b94:	4901      	ldr	r1, [pc, #4]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	608b      	str	r3, [r1, #8]
 8004b9a:	e00b      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004b9c:	40023800 	.word	0x40023800
 8004ba0:	40007000 	.word	0x40007000
 8004ba4:	0ffffcff 	.word	0x0ffffcff
 8004ba8:	4bac      	ldr	r3, [pc, #688]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	4aab      	ldr	r2, [pc, #684]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004bb2:	6093      	str	r3, [r2, #8]
 8004bb4:	4ba9      	ldr	r3, [pc, #676]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bb6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bc0:	49a6      	ldr	r1, [pc, #664]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0310 	and.w	r3, r3, #16
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d010      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004bd2:	4ba2      	ldr	r3, [pc, #648]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bd8:	4aa0      	ldr	r2, [pc, #640]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bde:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004be2:	4b9e      	ldr	r3, [pc, #632]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004be4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bec:	499b      	ldr	r1, [pc, #620]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00a      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c00:	4b96      	ldr	r3, [pc, #600]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c06:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c0e:	4993      	ldr	r1, [pc, #588]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00a      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c22:	4b8e      	ldr	r3, [pc, #568]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c30:	498a      	ldr	r1, [pc, #552]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00a      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c44:	4b85      	ldr	r3, [pc, #532]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c52:	4982      	ldr	r1, [pc, #520]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00a      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c66:	4b7d      	ldr	r3, [pc, #500]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c74:	4979      	ldr	r1, [pc, #484]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00a      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c88:	4b74      	ldr	r3, [pc, #464]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8e:	f023 0203 	bic.w	r2, r3, #3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c96:	4971      	ldr	r1, [pc, #452]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00a      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004caa:	4b6c      	ldr	r3, [pc, #432]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb0:	f023 020c 	bic.w	r2, r3, #12
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cb8:	4968      	ldr	r1, [pc, #416]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00a      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ccc:	4b63      	ldr	r3, [pc, #396]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cda:	4960      	ldr	r1, [pc, #384]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00a      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cee:	4b5b      	ldr	r3, [pc, #364]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cfc:	4957      	ldr	r1, [pc, #348]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00a      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d10:	4b52      	ldr	r3, [pc, #328]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1e:	494f      	ldr	r1, [pc, #316]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00a      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004d32:	4b4a      	ldr	r3, [pc, #296]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d38:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d40:	4946      	ldr	r1, [pc, #280]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00a      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004d54:	4b41      	ldr	r3, [pc, #260]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d5a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d62:	493e      	ldr	r1, [pc, #248]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00a      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004d76:	4b39      	ldr	r3, [pc, #228]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d84:	4935      	ldr	r1, [pc, #212]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00a      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d98:	4b30      	ldr	r3, [pc, #192]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d9e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004da6:	492d      	ldr	r1, [pc, #180]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d011      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004dba:	4b28      	ldr	r3, [pc, #160]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dc8:	4924      	ldr	r1, [pc, #144]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dd8:	d101      	bne.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0308 	and.w	r3, r3, #8
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004dea:	2301      	movs	r3, #1
 8004dec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00a      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dfa:	4b18      	ldr	r3, [pc, #96]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e00:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e08:	4914      	ldr	r1, [pc, #80]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00b      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e1c:	4b0f      	ldr	r3, [pc, #60]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e22:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e2c:	490b      	ldr	r1, [pc, #44]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00f      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004e40:	4b06      	ldr	r3, [pc, #24]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e46:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e50:	4902      	ldr	r1, [pc, #8]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e58:	e002      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004e5a:	bf00      	nop
 8004e5c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00b      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e6c:	4b8a      	ldr	r3, [pc, #552]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e72:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7c:	4986      	ldr	r1, [pc, #536]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00b      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004e90:	4b81      	ldr	r3, [pc, #516]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e96:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ea0:	497d      	ldr	r1, [pc, #500]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d006      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f000 80d6 	beq.w	8005068 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ebc:	4b76      	ldr	r3, [pc, #472]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a75      	ldr	r2, [pc, #468]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ec2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ec6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ec8:	f7fc fcc6 	bl	8001858 <HAL_GetTick>
 8004ecc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ed0:	f7fc fcc2 	bl	8001858 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b64      	cmp	r3, #100	; 0x64
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e195      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ee2:	4b6d      	ldr	r3, [pc, #436]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1f0      	bne.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d021      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d11d      	bne.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f02:	4b65      	ldr	r3, [pc, #404]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f08:	0c1b      	lsrs	r3, r3, #16
 8004f0a:	f003 0303 	and.w	r3, r3, #3
 8004f0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f10:	4b61      	ldr	r3, [pc, #388]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f16:	0e1b      	lsrs	r3, r3, #24
 8004f18:	f003 030f 	and.w	r3, r3, #15
 8004f1c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	019a      	lsls	r2, r3, #6
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	041b      	lsls	r3, r3, #16
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	061b      	lsls	r3, r3, #24
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	071b      	lsls	r3, r3, #28
 8004f36:	4958      	ldr	r1, [pc, #352]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d004      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f52:	d00a      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d02e      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f68:	d129      	bne.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f6a:	4b4b      	ldr	r3, [pc, #300]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f70:	0c1b      	lsrs	r3, r3, #16
 8004f72:	f003 0303 	and.w	r3, r3, #3
 8004f76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f78:	4b47      	ldr	r3, [pc, #284]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f7e:	0f1b      	lsrs	r3, r3, #28
 8004f80:	f003 0307 	and.w	r3, r3, #7
 8004f84:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	019a      	lsls	r2, r3, #6
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	041b      	lsls	r3, r3, #16
 8004f90:	431a      	orrs	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	061b      	lsls	r3, r3, #24
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	071b      	lsls	r3, r3, #28
 8004f9e:	493e      	ldr	r1, [pc, #248]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004fa6:	4b3c      	ldr	r3, [pc, #240]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fac:	f023 021f 	bic.w	r2, r3, #31
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	4938      	ldr	r1, [pc, #224]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d01d      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004fca:	4b33      	ldr	r3, [pc, #204]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fd0:	0e1b      	lsrs	r3, r3, #24
 8004fd2:	f003 030f 	and.w	r3, r3, #15
 8004fd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004fd8:	4b2f      	ldr	r3, [pc, #188]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fde:	0f1b      	lsrs	r3, r3, #28
 8004fe0:	f003 0307 	and.w	r3, r3, #7
 8004fe4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	019a      	lsls	r2, r3, #6
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	041b      	lsls	r3, r3, #16
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	061b      	lsls	r3, r3, #24
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	071b      	lsls	r3, r3, #28
 8004ffe:	4926      	ldr	r1, [pc, #152]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005000:	4313      	orrs	r3, r2
 8005002:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d011      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	019a      	lsls	r2, r3, #6
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	041b      	lsls	r3, r3, #16
 800501e:	431a      	orrs	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	061b      	lsls	r3, r3, #24
 8005026:	431a      	orrs	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	071b      	lsls	r3, r3, #28
 800502e:	491a      	ldr	r1, [pc, #104]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005030:	4313      	orrs	r3, r2
 8005032:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005036:	4b18      	ldr	r3, [pc, #96]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a17      	ldr	r2, [pc, #92]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800503c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005040:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005042:	f7fc fc09 	bl	8001858 <HAL_GetTick>
 8005046:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005048:	e008      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800504a:	f7fc fc05 	bl	8001858 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b64      	cmp	r3, #100	; 0x64
 8005056:	d901      	bls.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e0d8      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800505c:	4b0e      	ldr	r3, [pc, #56]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d0f0      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	2b01      	cmp	r3, #1
 800506c:	f040 80ce 	bne.w	800520c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005070:	4b09      	ldr	r3, [pc, #36]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a08      	ldr	r2, [pc, #32]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005076:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800507a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800507c:	f7fc fbec 	bl	8001858 <HAL_GetTick>
 8005080:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005082:	e00b      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005084:	f7fc fbe8 	bl	8001858 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b64      	cmp	r3, #100	; 0x64
 8005090:	d904      	bls.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e0bb      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005096:	bf00      	nop
 8005098:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800509c:	4b5e      	ldr	r3, [pc, #376]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050a8:	d0ec      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d009      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d02e      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d12a      	bne.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80050d2:	4b51      	ldr	r3, [pc, #324]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d8:	0c1b      	lsrs	r3, r3, #16
 80050da:	f003 0303 	and.w	r3, r3, #3
 80050de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80050e0:	4b4d      	ldr	r3, [pc, #308]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e6:	0f1b      	lsrs	r3, r3, #28
 80050e8:	f003 0307 	and.w	r3, r3, #7
 80050ec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	019a      	lsls	r2, r3, #6
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	041b      	lsls	r3, r3, #16
 80050f8:	431a      	orrs	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	061b      	lsls	r3, r3, #24
 8005100:	431a      	orrs	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	071b      	lsls	r3, r3, #28
 8005106:	4944      	ldr	r1, [pc, #272]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005108:	4313      	orrs	r3, r2
 800510a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800510e:	4b42      	ldr	r3, [pc, #264]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005114:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511c:	3b01      	subs	r3, #1
 800511e:	021b      	lsls	r3, r3, #8
 8005120:	493d      	ldr	r1, [pc, #244]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005122:	4313      	orrs	r3, r2
 8005124:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d022      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005138:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800513c:	d11d      	bne.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800513e:	4b36      	ldr	r3, [pc, #216]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005144:	0e1b      	lsrs	r3, r3, #24
 8005146:	f003 030f 	and.w	r3, r3, #15
 800514a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800514c:	4b32      	ldr	r3, [pc, #200]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800514e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005152:	0f1b      	lsrs	r3, r3, #28
 8005154:	f003 0307 	and.w	r3, r3, #7
 8005158:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	019a      	lsls	r2, r3, #6
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a1b      	ldr	r3, [r3, #32]
 8005164:	041b      	lsls	r3, r3, #16
 8005166:	431a      	orrs	r2, r3
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	061b      	lsls	r3, r3, #24
 800516c:	431a      	orrs	r2, r3
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	071b      	lsls	r3, r3, #28
 8005172:	4929      	ldr	r1, [pc, #164]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005174:	4313      	orrs	r3, r2
 8005176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0308 	and.w	r3, r3, #8
 8005182:	2b00      	cmp	r3, #0
 8005184:	d028      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005186:	4b24      	ldr	r3, [pc, #144]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518c:	0e1b      	lsrs	r3, r3, #24
 800518e:	f003 030f 	and.w	r3, r3, #15
 8005192:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005194:	4b20      	ldr	r3, [pc, #128]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800519a:	0c1b      	lsrs	r3, r3, #16
 800519c:	f003 0303 	and.w	r3, r3, #3
 80051a0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	019a      	lsls	r2, r3, #6
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	041b      	lsls	r3, r3, #16
 80051ac:	431a      	orrs	r2, r3
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	061b      	lsls	r3, r3, #24
 80051b2:	431a      	orrs	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	69db      	ldr	r3, [r3, #28]
 80051b8:	071b      	lsls	r3, r3, #28
 80051ba:	4917      	ldr	r1, [pc, #92]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80051c2:	4b15      	ldr	r3, [pc, #84]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d0:	4911      	ldr	r1, [pc, #68]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80051d8:	4b0f      	ldr	r3, [pc, #60]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a0e      	ldr	r2, [pc, #56]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051e4:	f7fc fb38 	bl	8001858 <HAL_GetTick>
 80051e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051ea:	e008      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80051ec:	f7fc fb34 	bl	8001858 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b64      	cmp	r3, #100	; 0x64
 80051f8:	d901      	bls.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e007      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051fe:	4b06      	ldr	r3, [pc, #24]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005206:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800520a:	d1ef      	bne.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3720      	adds	r7, #32
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	40023800 	.word	0x40023800

0800521c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e071      	b.n	8005316 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	7f5b      	ldrb	r3, [r3, #29]
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	d105      	bne.n	8005248 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7fb ff14 	bl	8001070 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f003 0310 	and.w	r3, r3, #16
 8005258:	2b10      	cmp	r3, #16
 800525a:	d053      	beq.n	8005304 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	22ca      	movs	r2, #202	; 0xca
 8005262:	625a      	str	r2, [r3, #36]	; 0x24
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2253      	movs	r2, #83	; 0x53
 800526a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 f99f 	bl	80055b0 <RTC_EnterInitMode>
 8005272:	4603      	mov	r3, r0
 8005274:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005276:	7bfb      	ldrb	r3, [r7, #15]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d12a      	bne.n	80052d2 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6899      	ldr	r1, [r3, #8]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	4b26      	ldr	r3, [pc, #152]	; (8005320 <HAL_RTC_Init+0x104>)
 8005288:	400b      	ands	r3, r1
 800528a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6899      	ldr	r1, [r3, #8]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685a      	ldr	r2, [r3, #4]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	431a      	orrs	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	431a      	orrs	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	68d2      	ldr	r2, [r2, #12]
 80052b2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6919      	ldr	r1, [r3, #16]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	041a      	lsls	r2, r3, #16
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	430a      	orrs	r2, r1
 80052c6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 f9a8 	bl	800561e <RTC_ExitInitMode>
 80052ce:	4603      	mov	r3, r0
 80052d0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80052d2:	7bfb      	ldrb	r3, [r7, #15]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d110      	bne.n	80052fa <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 0208 	bic.w	r2, r2, #8
 80052e6:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	699a      	ldr	r2, [r3, #24]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	430a      	orrs	r2, r1
 80052f8:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	22ff      	movs	r2, #255	; 0xff
 8005300:	625a      	str	r2, [r3, #36]	; 0x24
 8005302:	e001      	b.n	8005308 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005304:	2300      	movs	r3, #0
 8005306:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005308:	7bfb      	ldrb	r3, [r7, #15]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d102      	bne.n	8005314 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005314:	7bfb      	ldrb	r3, [r7, #15]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	ff8fffbf 	.word	0xff8fffbf

08005324 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005324:	b590      	push	{r4, r7, lr}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005330:	2300      	movs	r3, #0
 8005332:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	7f1b      	ldrb	r3, [r3, #28]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d101      	bne.n	8005340 <HAL_RTC_SetTime+0x1c>
 800533c:	2302      	movs	r3, #2
 800533e:	e085      	b.n	800544c <HAL_RTC_SetTime+0x128>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2201      	movs	r2, #1
 8005344:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2202      	movs	r2, #2
 800534a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d126      	bne.n	80053a0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535c:	2b00      	cmp	r3, #0
 800535e:	d102      	bne.n	8005366 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	2200      	movs	r2, #0
 8005364:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	4618      	mov	r0, r3
 800536c:	f000 f97c 	bl	8005668 <RTC_ByteToBcd2>
 8005370:	4603      	mov	r3, r0
 8005372:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	785b      	ldrb	r3, [r3, #1]
 8005378:	4618      	mov	r0, r3
 800537a:	f000 f975 	bl	8005668 <RTC_ByteToBcd2>
 800537e:	4603      	mov	r3, r0
 8005380:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005382:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	789b      	ldrb	r3, [r3, #2]
 8005388:	4618      	mov	r0, r3
 800538a:	f000 f96d 	bl	8005668 <RTC_ByteToBcd2>
 800538e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005390:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	78db      	ldrb	r3, [r3, #3]
 8005398:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800539a:	4313      	orrs	r3, r2
 800539c:	617b      	str	r3, [r7, #20]
 800539e:	e018      	b.n	80053d2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d102      	bne.n	80053b4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	2200      	movs	r2, #0
 80053b2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	785b      	ldrb	r3, [r3, #1]
 80053be:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80053c0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80053c6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	78db      	ldrb	r3, [r3, #3]
 80053cc:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80053ce:	4313      	orrs	r3, r2
 80053d0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	22ca      	movs	r2, #202	; 0xca
 80053d8:	625a      	str	r2, [r3, #36]	; 0x24
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2253      	movs	r2, #83	; 0x53
 80053e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f000 f8e4 	bl	80055b0 <RTC_EnterInitMode>
 80053e8:	4603      	mov	r3, r0
 80053ea:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80053ec:	7cfb      	ldrb	r3, [r7, #19]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d11e      	bne.n	8005430 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	6979      	ldr	r1, [r7, #20]
 80053f8:	4b16      	ldr	r3, [pc, #88]	; (8005454 <HAL_RTC_SetTime+0x130>)
 80053fa:	400b      	ands	r3, r1
 80053fc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800540c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6899      	ldr	r1, [r3, #8]
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	68da      	ldr	r2, [r3, #12]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	431a      	orrs	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f000 f8f9 	bl	800561e <RTC_ExitInitMode>
 800542c:	4603      	mov	r3, r0
 800542e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005430:	7cfb      	ldrb	r3, [r7, #19]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d102      	bne.n	800543c <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2201      	movs	r2, #1
 800543a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	22ff      	movs	r2, #255	; 0xff
 8005442:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	771a      	strb	r2, [r3, #28]

  return status;
 800544a:	7cfb      	ldrb	r3, [r7, #19]
}
 800544c:	4618      	mov	r0, r3
 800544e:	371c      	adds	r7, #28
 8005450:	46bd      	mov	sp, r7
 8005452:	bd90      	pop	{r4, r7, pc}
 8005454:	007f7f7f 	.word	0x007f7f7f

08005458 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005458:	b590      	push	{r4, r7, lr}
 800545a:	b087      	sub	sp, #28
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005464:	2300      	movs	r3, #0
 8005466:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	7f1b      	ldrb	r3, [r3, #28]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d101      	bne.n	8005474 <HAL_RTC_SetDate+0x1c>
 8005470:	2302      	movs	r3, #2
 8005472:	e06f      	b.n	8005554 <HAL_RTC_SetDate+0xfc>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2201      	movs	r2, #1
 8005478:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2202      	movs	r2, #2
 800547e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10e      	bne.n	80054a4 <HAL_RTC_SetDate+0x4c>
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	785b      	ldrb	r3, [r3, #1]
 800548a:	f003 0310 	and.w	r3, r3, #16
 800548e:	2b00      	cmp	r3, #0
 8005490:	d008      	beq.n	80054a4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	785b      	ldrb	r3, [r3, #1]
 8005496:	f023 0310 	bic.w	r3, r3, #16
 800549a:	b2db      	uxtb	r3, r3
 800549c:	330a      	adds	r3, #10
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d11c      	bne.n	80054e4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	78db      	ldrb	r3, [r3, #3]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 f8da 	bl	8005668 <RTC_ByteToBcd2>
 80054b4:	4603      	mov	r3, r0
 80054b6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	785b      	ldrb	r3, [r3, #1]
 80054bc:	4618      	mov	r0, r3
 80054be:	f000 f8d3 	bl	8005668 <RTC_ByteToBcd2>
 80054c2:	4603      	mov	r3, r0
 80054c4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80054c6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	789b      	ldrb	r3, [r3, #2]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 f8cb 	bl	8005668 <RTC_ByteToBcd2>
 80054d2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80054d4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80054de:	4313      	orrs	r3, r2
 80054e0:	617b      	str	r3, [r7, #20]
 80054e2:	e00e      	b.n	8005502 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	78db      	ldrb	r3, [r3, #3]
 80054e8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	785b      	ldrb	r3, [r3, #1]
 80054ee:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80054f0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80054f6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80054fe:	4313      	orrs	r3, r2
 8005500:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	22ca      	movs	r2, #202	; 0xca
 8005508:	625a      	str	r2, [r3, #36]	; 0x24
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2253      	movs	r2, #83	; 0x53
 8005510:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f000 f84c 	bl	80055b0 <RTC_EnterInitMode>
 8005518:	4603      	mov	r3, r0
 800551a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800551c:	7cfb      	ldrb	r3, [r7, #19]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10a      	bne.n	8005538 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	6979      	ldr	r1, [r7, #20]
 8005528:	4b0c      	ldr	r3, [pc, #48]	; (800555c <HAL_RTC_SetDate+0x104>)
 800552a:	400b      	ands	r3, r1
 800552c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f000 f875 	bl	800561e <RTC_ExitInitMode>
 8005534:	4603      	mov	r3, r0
 8005536:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005538:	7cfb      	ldrb	r3, [r7, #19]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d102      	bne.n	8005544 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2201      	movs	r2, #1
 8005542:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	22ff      	movs	r2, #255	; 0xff
 800554a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	771a      	strb	r2, [r3, #28]

  return status;
 8005552:	7cfb      	ldrb	r3, [r7, #19]
}
 8005554:	4618      	mov	r0, r3
 8005556:	371c      	adds	r7, #28
 8005558:	46bd      	mov	sp, r7
 800555a:	bd90      	pop	{r4, r7, pc}
 800555c:	00ffff3f 	.word	0x00ffff3f

08005560 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68da      	ldr	r2, [r3, #12]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800557a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800557c:	f7fc f96c 	bl	8001858 <HAL_GetTick>
 8005580:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005582:	e009      	b.n	8005598 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005584:	f7fc f968 	bl	8001858 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005592:	d901      	bls.n	8005598 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e007      	b.n	80055a8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	f003 0320 	and.w	r3, r3, #32
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d0ee      	beq.n	8005584 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80055bc:	2300      	movs	r3, #0
 80055be:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d122      	bne.n	8005614 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68da      	ldr	r2, [r3, #12]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80055dc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80055de:	f7fc f93b 	bl	8001858 <HAL_GetTick>
 80055e2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80055e4:	e00c      	b.n	8005600 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80055e6:	f7fc f937 	bl	8001858 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055f4:	d904      	bls.n	8005600 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2204      	movs	r2, #4
 80055fa:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800560a:	2b00      	cmp	r3, #0
 800560c:	d102      	bne.n	8005614 <RTC_EnterInitMode+0x64>
 800560e:	7bfb      	ldrb	r3, [r7, #15]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d1e8      	bne.n	80055e6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005614:	7bfb      	ldrb	r3, [r7, #15]
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b084      	sub	sp, #16
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005626:	2300      	movs	r3, #0
 8005628:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68da      	ldr	r2, [r3, #12]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005638:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f003 0320 	and.w	r3, r3, #32
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10a      	bne.n	800565e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7ff ff89 	bl	8005560 <HAL_RTC_WaitForSynchro>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d004      	beq.n	800565e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2204      	movs	r2, #4
 8005658:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800565e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005660:	4618      	mov	r0, r3
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	4603      	mov	r3, r0
 8005670:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005672:	2300      	movs	r3, #0
 8005674:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005676:	e005      	b.n	8005684 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	3301      	adds	r3, #1
 800567c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800567e:	79fb      	ldrb	r3, [r7, #7]
 8005680:	3b0a      	subs	r3, #10
 8005682:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005684:	79fb      	ldrb	r3, [r7, #7]
 8005686:	2b09      	cmp	r3, #9
 8005688:	d8f6      	bhi.n	8005678 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	b2db      	uxtb	r3, r3
 800568e:	011b      	lsls	r3, r3, #4
 8005690:	b2da      	uxtb	r2, r3
 8005692:	79fb      	ldrb	r3, [r7, #7]
 8005694:	4313      	orrs	r3, r2
 8005696:	b2db      	uxtb	r3, r3
}
 8005698:	4618      	mov	r0, r3
 800569a:	3714      	adds	r7, #20
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056a4:	b084      	sub	sp, #16
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b084      	sub	sp, #16
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
 80056ae:	f107 001c 	add.w	r0, r7, #28
 80056b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d120      	bne.n	80056fe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68da      	ldr	r2, [r3, #12]
 80056cc:	4b20      	ldr	r3, [pc, #128]	; (8005750 <USB_CoreInit+0xac>)
 80056ce:	4013      	ands	r3, r2
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80056e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d105      	bne.n	80056f2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f001 fbee 	bl	8006ed4 <USB_CoreReset>
 80056f8:	4603      	mov	r3, r0
 80056fa:	73fb      	strb	r3, [r7, #15]
 80056fc:	e010      	b.n	8005720 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f001 fbe2 	bl	8006ed4 <USB_CoreReset>
 8005710:	4603      	mov	r3, r0
 8005712:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005718:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005722:	2b01      	cmp	r3, #1
 8005724:	d10b      	bne.n	800573e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f043 0206 	orr.w	r2, r3, #6
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f043 0220 	orr.w	r2, r3, #32
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800573e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005740:	4618      	mov	r0, r3
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800574a:	b004      	add	sp, #16
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	ffbdffbf 	.word	0xffbdffbf

08005754 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	4613      	mov	r3, r2
 8005760:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005762:	79fb      	ldrb	r3, [r7, #7]
 8005764:	2b02      	cmp	r3, #2
 8005766:	d165      	bne.n	8005834 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	4a41      	ldr	r2, [pc, #260]	; (8005870 <USB_SetTurnaroundTime+0x11c>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d906      	bls.n	800577e <USB_SetTurnaroundTime+0x2a>
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	4a40      	ldr	r2, [pc, #256]	; (8005874 <USB_SetTurnaroundTime+0x120>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d202      	bcs.n	800577e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005778:	230f      	movs	r3, #15
 800577a:	617b      	str	r3, [r7, #20]
 800577c:	e062      	b.n	8005844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	4a3c      	ldr	r2, [pc, #240]	; (8005874 <USB_SetTurnaroundTime+0x120>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d306      	bcc.n	8005794 <USB_SetTurnaroundTime+0x40>
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	4a3b      	ldr	r2, [pc, #236]	; (8005878 <USB_SetTurnaroundTime+0x124>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d202      	bcs.n	8005794 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800578e:	230e      	movs	r3, #14
 8005790:	617b      	str	r3, [r7, #20]
 8005792:	e057      	b.n	8005844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	4a38      	ldr	r2, [pc, #224]	; (8005878 <USB_SetTurnaroundTime+0x124>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d306      	bcc.n	80057aa <USB_SetTurnaroundTime+0x56>
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	4a37      	ldr	r2, [pc, #220]	; (800587c <USB_SetTurnaroundTime+0x128>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d202      	bcs.n	80057aa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80057a4:	230d      	movs	r3, #13
 80057a6:	617b      	str	r3, [r7, #20]
 80057a8:	e04c      	b.n	8005844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	4a33      	ldr	r2, [pc, #204]	; (800587c <USB_SetTurnaroundTime+0x128>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d306      	bcc.n	80057c0 <USB_SetTurnaroundTime+0x6c>
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	4a32      	ldr	r2, [pc, #200]	; (8005880 <USB_SetTurnaroundTime+0x12c>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d802      	bhi.n	80057c0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80057ba:	230c      	movs	r3, #12
 80057bc:	617b      	str	r3, [r7, #20]
 80057be:	e041      	b.n	8005844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	4a2f      	ldr	r2, [pc, #188]	; (8005880 <USB_SetTurnaroundTime+0x12c>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d906      	bls.n	80057d6 <USB_SetTurnaroundTime+0x82>
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	4a2e      	ldr	r2, [pc, #184]	; (8005884 <USB_SetTurnaroundTime+0x130>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d802      	bhi.n	80057d6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80057d0:	230b      	movs	r3, #11
 80057d2:	617b      	str	r3, [r7, #20]
 80057d4:	e036      	b.n	8005844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	4a2a      	ldr	r2, [pc, #168]	; (8005884 <USB_SetTurnaroundTime+0x130>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d906      	bls.n	80057ec <USB_SetTurnaroundTime+0x98>
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	4a29      	ldr	r2, [pc, #164]	; (8005888 <USB_SetTurnaroundTime+0x134>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d802      	bhi.n	80057ec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80057e6:	230a      	movs	r3, #10
 80057e8:	617b      	str	r3, [r7, #20]
 80057ea:	e02b      	b.n	8005844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	4a26      	ldr	r2, [pc, #152]	; (8005888 <USB_SetTurnaroundTime+0x134>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d906      	bls.n	8005802 <USB_SetTurnaroundTime+0xae>
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	4a25      	ldr	r2, [pc, #148]	; (800588c <USB_SetTurnaroundTime+0x138>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d202      	bcs.n	8005802 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80057fc:	2309      	movs	r3, #9
 80057fe:	617b      	str	r3, [r7, #20]
 8005800:	e020      	b.n	8005844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	4a21      	ldr	r2, [pc, #132]	; (800588c <USB_SetTurnaroundTime+0x138>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d306      	bcc.n	8005818 <USB_SetTurnaroundTime+0xc4>
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	4a20      	ldr	r2, [pc, #128]	; (8005890 <USB_SetTurnaroundTime+0x13c>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d802      	bhi.n	8005818 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005812:	2308      	movs	r3, #8
 8005814:	617b      	str	r3, [r7, #20]
 8005816:	e015      	b.n	8005844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	4a1d      	ldr	r2, [pc, #116]	; (8005890 <USB_SetTurnaroundTime+0x13c>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d906      	bls.n	800582e <USB_SetTurnaroundTime+0xda>
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	4a1c      	ldr	r2, [pc, #112]	; (8005894 <USB_SetTurnaroundTime+0x140>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d202      	bcs.n	800582e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005828:	2307      	movs	r3, #7
 800582a:	617b      	str	r3, [r7, #20]
 800582c:	e00a      	b.n	8005844 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800582e:	2306      	movs	r3, #6
 8005830:	617b      	str	r3, [r7, #20]
 8005832:	e007      	b.n	8005844 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005834:	79fb      	ldrb	r3, [r7, #7]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d102      	bne.n	8005840 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800583a:	2309      	movs	r3, #9
 800583c:	617b      	str	r3, [r7, #20]
 800583e:	e001      	b.n	8005844 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005840:	2309      	movs	r3, #9
 8005842:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	68da      	ldr	r2, [r3, #12]
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	029b      	lsls	r3, r3, #10
 8005858:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800585c:	431a      	orrs	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	371c      	adds	r7, #28
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	00d8acbf 	.word	0x00d8acbf
 8005874:	00e4e1c0 	.word	0x00e4e1c0
 8005878:	00f42400 	.word	0x00f42400
 800587c:	01067380 	.word	0x01067380
 8005880:	011a499f 	.word	0x011a499f
 8005884:	01312cff 	.word	0x01312cff
 8005888:	014ca43f 	.word	0x014ca43f
 800588c:	016e3600 	.word	0x016e3600
 8005890:	01a6ab1f 	.word	0x01a6ab1f
 8005894:	01e84800 	.word	0x01e84800

08005898 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f043 0201 	orr.w	r2, r3, #1
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058ba:	b480      	push	{r7}
 80058bc:	b083      	sub	sp, #12
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f023 0201 	bic.w	r2, r3, #1
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	460b      	mov	r3, r1
 80058e6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80058e8:	2300      	movs	r3, #0
 80058ea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80058f8:	78fb      	ldrb	r3, [r7, #3]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d115      	bne.n	800592a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800590a:	2001      	movs	r0, #1
 800590c:	f7fb ffb0 	bl	8001870 <HAL_Delay>
      ms++;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	3301      	adds	r3, #1
 8005914:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f001 fa4b 	bl	8006db2 <USB_GetMode>
 800591c:	4603      	mov	r3, r0
 800591e:	2b01      	cmp	r3, #1
 8005920:	d01e      	beq.n	8005960 <USB_SetCurrentMode+0x84>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2b31      	cmp	r3, #49	; 0x31
 8005926:	d9f0      	bls.n	800590a <USB_SetCurrentMode+0x2e>
 8005928:	e01a      	b.n	8005960 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800592a:	78fb      	ldrb	r3, [r7, #3]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d115      	bne.n	800595c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800593c:	2001      	movs	r0, #1
 800593e:	f7fb ff97 	bl	8001870 <HAL_Delay>
      ms++;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	3301      	adds	r3, #1
 8005946:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f001 fa32 	bl	8006db2 <USB_GetMode>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d005      	beq.n	8005960 <USB_SetCurrentMode+0x84>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2b31      	cmp	r3, #49	; 0x31
 8005958:	d9f0      	bls.n	800593c <USB_SetCurrentMode+0x60>
 800595a:	e001      	b.n	8005960 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e005      	b.n	800596c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2b32      	cmp	r3, #50	; 0x32
 8005964:	d101      	bne.n	800596a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e000      	b.n	800596c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005974:	b084      	sub	sp, #16
 8005976:	b580      	push	{r7, lr}
 8005978:	b086      	sub	sp, #24
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
 800597e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005982:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005986:	2300      	movs	r3, #0
 8005988:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800598e:	2300      	movs	r3, #0
 8005990:	613b      	str	r3, [r7, #16]
 8005992:	e009      	b.n	80059a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	3340      	adds	r3, #64	; 0x40
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	2200      	movs	r2, #0
 80059a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	3301      	adds	r3, #1
 80059a6:	613b      	str	r3, [r7, #16]
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	2b0e      	cmp	r3, #14
 80059ac:	d9f2      	bls.n	8005994 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80059ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d11c      	bne.n	80059ee <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059c2:	f043 0302 	orr.w	r3, r3, #2
 80059c6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059cc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	601a      	str	r2, [r3, #0]
 80059ec:	e005      	b.n	80059fa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a00:	461a      	mov	r2, r3
 8005a02:	2300      	movs	r3, #0
 8005a04:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a14:	461a      	mov	r2, r3
 8005a16:	680b      	ldr	r3, [r1, #0]
 8005a18:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d10c      	bne.n	8005a3a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d104      	bne.n	8005a30 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005a26:	2100      	movs	r1, #0
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 f965 	bl	8005cf8 <USB_SetDevSpeed>
 8005a2e:	e008      	b.n	8005a42 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005a30:	2101      	movs	r1, #1
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f960 	bl	8005cf8 <USB_SetDevSpeed>
 8005a38:	e003      	b.n	8005a42 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005a3a:	2103      	movs	r1, #3
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 f95b 	bl	8005cf8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a42:	2110      	movs	r1, #16
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f8f3 	bl	8005c30 <USB_FlushTxFifo>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d001      	beq.n	8005a54 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 f91f 	bl	8005c98 <USB_FlushRxFifo>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d001      	beq.n	8005a64 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a76:	461a      	mov	r2, r3
 8005a78:	2300      	movs	r3, #0
 8005a7a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a82:	461a      	mov	r2, r3
 8005a84:	2300      	movs	r3, #0
 8005a86:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a88:	2300      	movs	r3, #0
 8005a8a:	613b      	str	r3, [r7, #16]
 8005a8c:	e043      	b.n	8005b16 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005aa0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aa4:	d118      	bne.n	8005ad8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d10a      	bne.n	8005ac2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab8:	461a      	mov	r2, r3
 8005aba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005abe:	6013      	str	r3, [r2, #0]
 8005ac0:	e013      	b.n	8005aea <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	015a      	lsls	r2, r3, #5
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ace:	461a      	mov	r2, r3
 8005ad0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ad4:	6013      	str	r3, [r2, #0]
 8005ad6:	e008      	b.n	8005aea <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	015a      	lsls	r2, r3, #5
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af6:	461a      	mov	r2, r3
 8005af8:	2300      	movs	r3, #0
 8005afa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	015a      	lsls	r2, r3, #5
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	4413      	add	r3, r2
 8005b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b08:	461a      	mov	r2, r3
 8005b0a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b0e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	3301      	adds	r3, #1
 8005b14:	613b      	str	r3, [r7, #16]
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d3b7      	bcc.n	8005a8e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b1e:	2300      	movs	r3, #0
 8005b20:	613b      	str	r3, [r7, #16]
 8005b22:	e043      	b.n	8005bac <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	015a      	lsls	r2, r3, #5
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b3a:	d118      	bne.n	8005b6e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10a      	bne.n	8005b58 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b4e:	461a      	mov	r2, r3
 8005b50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b54:	6013      	str	r3, [r2, #0]
 8005b56:	e013      	b.n	8005b80 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	015a      	lsls	r2, r3, #5
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	4413      	add	r3, r2
 8005b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b64:	461a      	mov	r2, r3
 8005b66:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b6a:	6013      	str	r3, [r2, #0]
 8005b6c:	e008      	b.n	8005b80 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	2300      	movs	r3, #0
 8005b90:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	015a      	lsls	r2, r3, #5
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ba4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	613b      	str	r3, [r7, #16]
 8005bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d3b7      	bcc.n	8005b24 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bc6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005bd4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d105      	bne.n	8005be8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	f043 0210 	orr.w	r2, r3, #16
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	699a      	ldr	r2, [r3, #24]
 8005bec:	4b0e      	ldr	r3, [pc, #56]	; (8005c28 <USB_DevInit+0x2b4>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d005      	beq.n	8005c06 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	f043 0208 	orr.w	r2, r3, #8
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d105      	bne.n	8005c18 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	699a      	ldr	r2, [r3, #24]
 8005c10:	4b06      	ldr	r3, [pc, #24]	; (8005c2c <USB_DevInit+0x2b8>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3718      	adds	r7, #24
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c24:	b004      	add	sp, #16
 8005c26:	4770      	bx	lr
 8005c28:	803c3800 	.word	0x803c3800
 8005c2c:	40000004 	.word	0x40000004

08005c30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	3301      	adds	r3, #1
 8005c42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	4a13      	ldr	r2, [pc, #76]	; (8005c94 <USB_FlushTxFifo+0x64>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d901      	bls.n	8005c50 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e01b      	b.n	8005c88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	daf2      	bge.n	8005c3e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	019b      	lsls	r3, r3, #6
 8005c60:	f043 0220 	orr.w	r2, r3, #32
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	4a08      	ldr	r2, [pc, #32]	; (8005c94 <USB_FlushTxFifo+0x64>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d901      	bls.n	8005c7a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e006      	b.n	8005c88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	f003 0320 	and.w	r3, r3, #32
 8005c82:	2b20      	cmp	r3, #32
 8005c84:	d0f0      	beq.n	8005c68 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr
 8005c94:	00030d40 	.word	0x00030d40

08005c98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	4a11      	ldr	r2, [pc, #68]	; (8005cf4 <USB_FlushRxFifo+0x5c>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d901      	bls.n	8005cb6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e018      	b.n	8005ce8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	daf2      	bge.n	8005ca4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2210      	movs	r2, #16
 8005cc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4a08      	ldr	r2, [pc, #32]	; (8005cf4 <USB_FlushRxFifo+0x5c>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d901      	bls.n	8005cda <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e006      	b.n	8005ce8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	f003 0310 	and.w	r3, r3, #16
 8005ce2:	2b10      	cmp	r3, #16
 8005ce4:	d0f0      	beq.n	8005cc8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	00030d40 	.word	0x00030d40

08005cf8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	460b      	mov	r3, r1
 8005d02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	78fb      	ldrb	r3, [r7, #3]
 8005d12:	68f9      	ldr	r1, [r7, #12]
 8005d14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b087      	sub	sp, #28
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f003 0306 	and.w	r3, r3, #6
 8005d42:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d102      	bne.n	8005d50 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	75fb      	strb	r3, [r7, #23]
 8005d4e:	e00a      	b.n	8005d66 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d002      	beq.n	8005d5c <USB_GetDevSpeed+0x32>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2b06      	cmp	r3, #6
 8005d5a:	d102      	bne.n	8005d62 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	75fb      	strb	r3, [r7, #23]
 8005d60:	e001      	b.n	8005d66 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005d62:	230f      	movs	r3, #15
 8005d64:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	371c      	adds	r7, #28
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	785b      	ldrb	r3, [r3, #1]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d139      	bne.n	8005e04 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d96:	69da      	ldr	r2, [r3, #28]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	f003 030f 	and.w	r3, r3, #15
 8005da0:	2101      	movs	r1, #1
 8005da2:	fa01 f303 	lsl.w	r3, r1, r3
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	68f9      	ldr	r1, [r7, #12]
 8005daa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dae:	4313      	orrs	r3, r2
 8005db0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	015a      	lsls	r2, r3, #5
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d153      	bne.n	8005e70 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	791b      	ldrb	r3, [r3, #4]
 8005de2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005de4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	059b      	lsls	r3, r3, #22
 8005dea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005dec:	431a      	orrs	r2, r3
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	0159      	lsls	r1, r3, #5
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	440b      	add	r3, r1
 8005df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	4b20      	ldr	r3, [pc, #128]	; (8005e80 <USB_ActivateEndpoint+0x10c>)
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	600b      	str	r3, [r1, #0]
 8005e02:	e035      	b.n	8005e70 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e0a:	69da      	ldr	r2, [r3, #28]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	f003 030f 	and.w	r3, r3, #15
 8005e14:	2101      	movs	r1, #1
 8005e16:	fa01 f303 	lsl.w	r3, r1, r3
 8005e1a:	041b      	lsls	r3, r3, #16
 8005e1c:	68f9      	ldr	r1, [r7, #12]
 8005e1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e22:	4313      	orrs	r3, r2
 8005e24:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	015a      	lsls	r2, r3, #5
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d119      	bne.n	8005e70 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	791b      	ldrb	r3, [r3, #4]
 8005e56:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e58:	430b      	orrs	r3, r1
 8005e5a:	431a      	orrs	r2, r3
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	0159      	lsls	r1, r3, #5
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	440b      	add	r3, r1
 8005e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e68:	4619      	mov	r1, r3
 8005e6a:	4b05      	ldr	r3, [pc, #20]	; (8005e80 <USB_ActivateEndpoint+0x10c>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3714      	adds	r7, #20
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	10008000 	.word	0x10008000

08005e84 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	785b      	ldrb	r3, [r3, #1]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d161      	bne.n	8005f64 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005eb6:	d11f      	bne.n	8005ef8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	015a      	lsls	r2, r3, #5
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	0151      	lsls	r1, r2, #5
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	440a      	add	r2, r1
 8005ece:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ed2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ed6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	015a      	lsls	r2, r3, #5
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	0151      	lsls	r1, r2, #5
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	440a      	add	r2, r1
 8005eee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ef2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ef6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005efe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	f003 030f 	and.w	r3, r3, #15
 8005f08:	2101      	movs	r1, #1
 8005f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	43db      	mvns	r3, r3
 8005f12:	68f9      	ldr	r1, [r7, #12]
 8005f14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f18:	4013      	ands	r3, r2
 8005f1a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f22:	69da      	ldr	r2, [r3, #28]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	f003 030f 	and.w	r3, r3, #15
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	43db      	mvns	r3, r3
 8005f36:	68f9      	ldr	r1, [r7, #12]
 8005f38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	015a      	lsls	r2, r3, #5
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	4413      	add	r3, r2
 8005f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	0159      	lsls	r1, r3, #5
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	440b      	add	r3, r1
 8005f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	4b35      	ldr	r3, [pc, #212]	; (8006034 <USB_DeactivateEndpoint+0x1b0>)
 8005f5e:	4013      	ands	r3, r2
 8005f60:	600b      	str	r3, [r1, #0]
 8005f62:	e060      	b.n	8006026 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	015a      	lsls	r2, r3, #5
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f7a:	d11f      	bne.n	8005fbc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	0151      	lsls	r1, r2, #5
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	440a      	add	r2, r1
 8005f92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f9a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	015a      	lsls	r2, r3, #5
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	0151      	lsls	r1, r2, #5
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	440a      	add	r2, r1
 8005fb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	f003 030f 	and.w	r3, r3, #15
 8005fcc:	2101      	movs	r1, #1
 8005fce:	fa01 f303 	lsl.w	r3, r1, r3
 8005fd2:	041b      	lsls	r3, r3, #16
 8005fd4:	43db      	mvns	r3, r3
 8005fd6:	68f9      	ldr	r1, [r7, #12]
 8005fd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fdc:	4013      	ands	r3, r2
 8005fde:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe6:	69da      	ldr	r2, [r3, #28]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	f003 030f 	and.w	r3, r3, #15
 8005ff0:	2101      	movs	r1, #1
 8005ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff6:	041b      	lsls	r3, r3, #16
 8005ff8:	43db      	mvns	r3, r3
 8005ffa:	68f9      	ldr	r1, [r7, #12]
 8005ffc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006000:	4013      	ands	r3, r2
 8006002:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4413      	add	r3, r2
 800600c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	0159      	lsls	r1, r3, #5
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	440b      	add	r3, r1
 800601a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800601e:	4619      	mov	r1, r3
 8006020:	4b05      	ldr	r3, [pc, #20]	; (8006038 <USB_DeactivateEndpoint+0x1b4>)
 8006022:	4013      	ands	r3, r2
 8006024:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3714      	adds	r7, #20
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr
 8006034:	ec337800 	.word	0xec337800
 8006038:	eff37800 	.word	0xeff37800

0800603c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b08a      	sub	sp, #40	; 0x28
 8006040:	af02      	add	r7, sp, #8
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	4613      	mov	r3, r2
 8006048:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	785b      	ldrb	r3, [r3, #1]
 8006058:	2b01      	cmp	r3, #1
 800605a:	f040 8163 	bne.w	8006324 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d132      	bne.n	80060cc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	015a      	lsls	r2, r3, #5
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	4413      	add	r3, r2
 800606e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006072:	691a      	ldr	r2, [r3, #16]
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	0159      	lsls	r1, r3, #5
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	440b      	add	r3, r1
 800607c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006080:	4619      	mov	r1, r3
 8006082:	4ba5      	ldr	r3, [pc, #660]	; (8006318 <USB_EPStartXfer+0x2dc>)
 8006084:	4013      	ands	r3, r2
 8006086:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	015a      	lsls	r2, r3, #5
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	4413      	add	r3, r2
 8006090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	0151      	lsls	r1, r2, #5
 800609a:	69fa      	ldr	r2, [r7, #28]
 800609c:	440a      	add	r2, r1
 800609e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	015a      	lsls	r2, r3, #5
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	4413      	add	r3, r2
 80060b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b4:	691a      	ldr	r2, [r3, #16]
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	0159      	lsls	r1, r3, #5
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	440b      	add	r3, r1
 80060be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c2:	4619      	mov	r1, r3
 80060c4:	4b95      	ldr	r3, [pc, #596]	; (800631c <USB_EPStartXfer+0x2e0>)
 80060c6:	4013      	ands	r3, r2
 80060c8:	610b      	str	r3, [r1, #16]
 80060ca:	e074      	b.n	80061b6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	015a      	lsls	r2, r3, #5
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	4413      	add	r3, r2
 80060d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d8:	691a      	ldr	r2, [r3, #16]
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	0159      	lsls	r1, r3, #5
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	440b      	add	r3, r1
 80060e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e6:	4619      	mov	r1, r3
 80060e8:	4b8c      	ldr	r3, [pc, #560]	; (800631c <USB_EPStartXfer+0x2e0>)
 80060ea:	4013      	ands	r3, r2
 80060ec:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	015a      	lsls	r2, r3, #5
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	4413      	add	r3, r2
 80060f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060fa:	691a      	ldr	r2, [r3, #16]
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	0159      	lsls	r1, r3, #5
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	440b      	add	r3, r1
 8006104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006108:	4619      	mov	r1, r3
 800610a:	4b83      	ldr	r3, [pc, #524]	; (8006318 <USB_EPStartXfer+0x2dc>)
 800610c:	4013      	ands	r3, r2
 800610e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	015a      	lsls	r2, r3, #5
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	4413      	add	r3, r2
 8006118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800611c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	6999      	ldr	r1, [r3, #24]
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	440b      	add	r3, r1
 8006128:	1e59      	subs	r1, r3, #1
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006132:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006134:	4b7a      	ldr	r3, [pc, #488]	; (8006320 <USB_EPStartXfer+0x2e4>)
 8006136:	400b      	ands	r3, r1
 8006138:	69b9      	ldr	r1, [r7, #24]
 800613a:	0148      	lsls	r0, r1, #5
 800613c:	69f9      	ldr	r1, [r7, #28]
 800613e:	4401      	add	r1, r0
 8006140:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006144:	4313      	orrs	r3, r2
 8006146:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	4413      	add	r3, r2
 8006150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006154:	691a      	ldr	r2, [r3, #16]
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800615e:	69b9      	ldr	r1, [r7, #24]
 8006160:	0148      	lsls	r0, r1, #5
 8006162:	69f9      	ldr	r1, [r7, #28]
 8006164:	4401      	add	r1, r0
 8006166:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800616a:	4313      	orrs	r3, r2
 800616c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	791b      	ldrb	r3, [r3, #4]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d11f      	bne.n	80061b6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	015a      	lsls	r2, r3, #5
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	4413      	add	r3, r2
 800617e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	69ba      	ldr	r2, [r7, #24]
 8006186:	0151      	lsls	r1, r2, #5
 8006188:	69fa      	ldr	r2, [r7, #28]
 800618a:	440a      	add	r2, r1
 800618c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006190:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006194:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	4413      	add	r3, r2
 800619e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	0151      	lsls	r1, r2, #5
 80061a8:	69fa      	ldr	r2, [r7, #28]
 80061aa:	440a      	add	r2, r1
 80061ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061b4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80061b6:	79fb      	ldrb	r3, [r7, #7]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d14b      	bne.n	8006254 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	695b      	ldr	r3, [r3, #20]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d009      	beq.n	80061d8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d0:	461a      	mov	r2, r3
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	791b      	ldrb	r3, [r3, #4]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d128      	bne.n	8006232 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d110      	bne.n	8006212 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	69ba      	ldr	r2, [r7, #24]
 8006200:	0151      	lsls	r1, r2, #5
 8006202:	69fa      	ldr	r2, [r7, #28]
 8006204:	440a      	add	r2, r1
 8006206:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800620a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800620e:	6013      	str	r3, [r2, #0]
 8006210:	e00f      	b.n	8006232 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	015a      	lsls	r2, r3, #5
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	4413      	add	r3, r2
 800621a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	0151      	lsls	r1, r2, #5
 8006224:	69fa      	ldr	r2, [r7, #28]
 8006226:	440a      	add	r2, r1
 8006228:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800622c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006230:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	015a      	lsls	r2, r3, #5
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	4413      	add	r3, r2
 800623a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	69ba      	ldr	r2, [r7, #24]
 8006242:	0151      	lsls	r1, r2, #5
 8006244:	69fa      	ldr	r2, [r7, #28]
 8006246:	440a      	add	r2, r1
 8006248:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800624c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006250:	6013      	str	r3, [r2, #0]
 8006252:	e137      	b.n	80064c4 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	015a      	lsls	r2, r3, #5
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	4413      	add	r3, r2
 800625c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	69ba      	ldr	r2, [r7, #24]
 8006264:	0151      	lsls	r1, r2, #5
 8006266:	69fa      	ldr	r2, [r7, #28]
 8006268:	440a      	add	r2, r1
 800626a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800626e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006272:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	791b      	ldrb	r3, [r3, #4]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d015      	beq.n	80062a8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	2b00      	cmp	r3, #0
 8006282:	f000 811f 	beq.w	80064c4 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800628c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	f003 030f 	and.w	r3, r3, #15
 8006296:	2101      	movs	r1, #1
 8006298:	fa01 f303 	lsl.w	r3, r1, r3
 800629c:	69f9      	ldr	r1, [r7, #28]
 800629e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062a2:	4313      	orrs	r3, r2
 80062a4:	634b      	str	r3, [r1, #52]	; 0x34
 80062a6:	e10d      	b.n	80064c4 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d110      	bne.n	80062da <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	015a      	lsls	r2, r3, #5
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	4413      	add	r3, r2
 80062c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	69ba      	ldr	r2, [r7, #24]
 80062c8:	0151      	lsls	r1, r2, #5
 80062ca:	69fa      	ldr	r2, [r7, #28]
 80062cc:	440a      	add	r2, r1
 80062ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80062d6:	6013      	str	r3, [r2, #0]
 80062d8:	e00f      	b.n	80062fa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	015a      	lsls	r2, r3, #5
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	4413      	add	r3, r2
 80062e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	0151      	lsls	r1, r2, #5
 80062ec:	69fa      	ldr	r2, [r7, #28]
 80062ee:	440a      	add	r2, r1
 80062f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062f8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	6919      	ldr	r1, [r3, #16]
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	781a      	ldrb	r2, [r3, #0]
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	b298      	uxth	r0, r3
 8006308:	79fb      	ldrb	r3, [r7, #7]
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	4603      	mov	r3, r0
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f000 faea 	bl	80068e8 <USB_WritePacket>
 8006314:	e0d6      	b.n	80064c4 <USB_EPStartXfer+0x488>
 8006316:	bf00      	nop
 8006318:	e007ffff 	.word	0xe007ffff
 800631c:	fff80000 	.word	0xfff80000
 8006320:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	4413      	add	r3, r2
 800632c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006330:	691a      	ldr	r2, [r3, #16]
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	0159      	lsls	r1, r3, #5
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	440b      	add	r3, r1
 800633a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800633e:	4619      	mov	r1, r3
 8006340:	4b63      	ldr	r3, [pc, #396]	; (80064d0 <USB_EPStartXfer+0x494>)
 8006342:	4013      	ands	r3, r2
 8006344:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	015a      	lsls	r2, r3, #5
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	4413      	add	r3, r2
 800634e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006352:	691a      	ldr	r2, [r3, #16]
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	0159      	lsls	r1, r3, #5
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	440b      	add	r3, r1
 800635c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006360:	4619      	mov	r1, r3
 8006362:	4b5c      	ldr	r3, [pc, #368]	; (80064d4 <USB_EPStartXfer+0x498>)
 8006364:	4013      	ands	r3, r2
 8006366:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d123      	bne.n	80063b8 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	4413      	add	r3, r2
 8006378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637c:	691a      	ldr	r2, [r3, #16]
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006386:	69b9      	ldr	r1, [r7, #24]
 8006388:	0148      	lsls	r0, r1, #5
 800638a:	69f9      	ldr	r1, [r7, #28]
 800638c:	4401      	add	r1, r0
 800638e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006392:	4313      	orrs	r3, r2
 8006394:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	015a      	lsls	r2, r3, #5
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	4413      	add	r3, r2
 800639e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	0151      	lsls	r1, r2, #5
 80063a8:	69fa      	ldr	r2, [r7, #28]
 80063aa:	440a      	add	r2, r1
 80063ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063b4:	6113      	str	r3, [r2, #16]
 80063b6:	e037      	b.n	8006428 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	699a      	ldr	r2, [r3, #24]
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	4413      	add	r3, r2
 80063c2:	1e5a      	subs	r2, r3, #1
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063cc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	8afa      	ldrh	r2, [r7, #22]
 80063d4:	fb03 f202 	mul.w	r2, r3, r2
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	015a      	lsls	r2, r3, #5
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	4413      	add	r3, r2
 80063e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e8:	691a      	ldr	r2, [r3, #16]
 80063ea:	8afb      	ldrh	r3, [r7, #22]
 80063ec:	04d9      	lsls	r1, r3, #19
 80063ee:	4b3a      	ldr	r3, [pc, #232]	; (80064d8 <USB_EPStartXfer+0x49c>)
 80063f0:	400b      	ands	r3, r1
 80063f2:	69b9      	ldr	r1, [r7, #24]
 80063f4:	0148      	lsls	r0, r1, #5
 80063f6:	69f9      	ldr	r1, [r7, #28]
 80063f8:	4401      	add	r1, r0
 80063fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80063fe:	4313      	orrs	r3, r2
 8006400:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	015a      	lsls	r2, r3, #5
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	4413      	add	r3, r2
 800640a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800640e:	691a      	ldr	r2, [r3, #16]
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	69db      	ldr	r3, [r3, #28]
 8006414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006418:	69b9      	ldr	r1, [r7, #24]
 800641a:	0148      	lsls	r0, r1, #5
 800641c:	69f9      	ldr	r1, [r7, #28]
 800641e:	4401      	add	r1, r0
 8006420:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006424:	4313      	orrs	r3, r2
 8006426:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006428:	79fb      	ldrb	r3, [r7, #7]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d10d      	bne.n	800644a <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d009      	beq.n	800644a <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	6919      	ldr	r1, [r3, #16]
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	015a      	lsls	r2, r3, #5
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	4413      	add	r3, r2
 8006442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006446:	460a      	mov	r2, r1
 8006448:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	791b      	ldrb	r3, [r3, #4]
 800644e:	2b01      	cmp	r3, #1
 8006450:	d128      	bne.n	80064a4 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800645e:	2b00      	cmp	r3, #0
 8006460:	d110      	bne.n	8006484 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	015a      	lsls	r2, r3, #5
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	4413      	add	r3, r2
 800646a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	69ba      	ldr	r2, [r7, #24]
 8006472:	0151      	lsls	r1, r2, #5
 8006474:	69fa      	ldr	r2, [r7, #28]
 8006476:	440a      	add	r2, r1
 8006478:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800647c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006480:	6013      	str	r3, [r2, #0]
 8006482:	e00f      	b.n	80064a4 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	015a      	lsls	r2, r3, #5
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	4413      	add	r3, r2
 800648c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	69ba      	ldr	r2, [r7, #24]
 8006494:	0151      	lsls	r1, r2, #5
 8006496:	69fa      	ldr	r2, [r7, #28]
 8006498:	440a      	add	r2, r1
 800649a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800649e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064a2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	015a      	lsls	r2, r3, #5
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	4413      	add	r3, r2
 80064ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	69ba      	ldr	r2, [r7, #24]
 80064b4:	0151      	lsls	r1, r2, #5
 80064b6:	69fa      	ldr	r2, [r7, #28]
 80064b8:	440a      	add	r2, r1
 80064ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3720      	adds	r7, #32
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	fff80000 	.word	0xfff80000
 80064d4:	e007ffff 	.word	0xe007ffff
 80064d8:	1ff80000 	.word	0x1ff80000

080064dc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	4613      	mov	r3, r2
 80064e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	785b      	ldrb	r3, [r3, #1]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	f040 80ce 	bne.w	800669a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d132      	bne.n	800656c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	015a      	lsls	r2, r3, #5
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	4413      	add	r3, r2
 800650e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006512:	691a      	ldr	r2, [r3, #16]
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	0159      	lsls	r1, r3, #5
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	440b      	add	r3, r1
 800651c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006520:	4619      	mov	r1, r3
 8006522:	4b9a      	ldr	r3, [pc, #616]	; (800678c <USB_EP0StartXfer+0x2b0>)
 8006524:	4013      	ands	r3, r2
 8006526:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	015a      	lsls	r2, r3, #5
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	4413      	add	r3, r2
 8006530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	0151      	lsls	r1, r2, #5
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	440a      	add	r2, r1
 800653e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006542:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006546:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	015a      	lsls	r2, r3, #5
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	4413      	add	r3, r2
 8006550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006554:	691a      	ldr	r2, [r3, #16]
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	0159      	lsls	r1, r3, #5
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	440b      	add	r3, r1
 800655e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006562:	4619      	mov	r1, r3
 8006564:	4b8a      	ldr	r3, [pc, #552]	; (8006790 <USB_EP0StartXfer+0x2b4>)
 8006566:	4013      	ands	r3, r2
 8006568:	610b      	str	r3, [r1, #16]
 800656a:	e04e      	b.n	800660a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	015a      	lsls	r2, r3, #5
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	4413      	add	r3, r2
 8006574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006578:	691a      	ldr	r2, [r3, #16]
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	0159      	lsls	r1, r3, #5
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	440b      	add	r3, r1
 8006582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006586:	4619      	mov	r1, r3
 8006588:	4b81      	ldr	r3, [pc, #516]	; (8006790 <USB_EP0StartXfer+0x2b4>)
 800658a:	4013      	ands	r3, r2
 800658c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	4413      	add	r3, r2
 8006596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800659a:	691a      	ldr	r2, [r3, #16]
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	0159      	lsls	r1, r3, #5
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	440b      	add	r3, r1
 80065a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a8:	4619      	mov	r1, r3
 80065aa:	4b78      	ldr	r3, [pc, #480]	; (800678c <USB_EP0StartXfer+0x2b0>)
 80065ac:	4013      	ands	r3, r2
 80065ae:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	699a      	ldr	r2, [r3, #24]
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d903      	bls.n	80065c4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	68da      	ldr	r2, [r3, #12]
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	015a      	lsls	r2, r3, #5
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	4413      	add	r3, r2
 80065cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	693a      	ldr	r2, [r7, #16]
 80065d4:	0151      	lsls	r1, r2, #5
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	440a      	add	r2, r1
 80065da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065f0:	691a      	ldr	r2, [r3, #16]
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065fa:	6939      	ldr	r1, [r7, #16]
 80065fc:	0148      	lsls	r0, r1, #5
 80065fe:	6979      	ldr	r1, [r7, #20]
 8006600:	4401      	add	r1, r0
 8006602:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006606:	4313      	orrs	r3, r2
 8006608:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800660a:	79fb      	ldrb	r3, [r7, #7]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d11e      	bne.n	800664e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	695b      	ldr	r3, [r3, #20]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d009      	beq.n	800662c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	4413      	add	r3, r2
 8006620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006624:	461a      	mov	r2, r3
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	4413      	add	r3, r2
 8006634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	0151      	lsls	r1, r2, #5
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	440a      	add	r2, r1
 8006642:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006646:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800664a:	6013      	str	r3, [r2, #0]
 800664c:	e097      	b.n	800677e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	015a      	lsls	r2, r3, #5
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	4413      	add	r3, r2
 8006656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	0151      	lsls	r1, r2, #5
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	440a      	add	r2, r1
 8006664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006668:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800666c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	2b00      	cmp	r3, #0
 8006674:	f000 8083 	beq.w	800677e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800667e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	f003 030f 	and.w	r3, r3, #15
 8006688:	2101      	movs	r1, #1
 800668a:	fa01 f303 	lsl.w	r3, r1, r3
 800668e:	6979      	ldr	r1, [r7, #20]
 8006690:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006694:	4313      	orrs	r3, r2
 8006696:	634b      	str	r3, [r1, #52]	; 0x34
 8006698:	e071      	b.n	800677e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	015a      	lsls	r2, r3, #5
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a6:	691a      	ldr	r2, [r3, #16]
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	0159      	lsls	r1, r3, #5
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	440b      	add	r3, r1
 80066b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b4:	4619      	mov	r1, r3
 80066b6:	4b36      	ldr	r3, [pc, #216]	; (8006790 <USB_EP0StartXfer+0x2b4>)
 80066b8:	4013      	ands	r3, r2
 80066ba:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	015a      	lsls	r2, r3, #5
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	4413      	add	r3, r2
 80066c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c8:	691a      	ldr	r2, [r3, #16]
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	0159      	lsls	r1, r3, #5
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	440b      	add	r3, r1
 80066d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d6:	4619      	mov	r1, r3
 80066d8:	4b2c      	ldr	r3, [pc, #176]	; (800678c <USB_EP0StartXfer+0x2b0>)
 80066da:	4013      	ands	r3, r2
 80066dc:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d003      	beq.n	80066ee <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	68da      	ldr	r2, [r3, #12]
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	68da      	ldr	r2, [r3, #12]
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	015a      	lsls	r2, r3, #5
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	4413      	add	r3, r2
 80066fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	0151      	lsls	r1, r2, #5
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	440a      	add	r2, r1
 800670c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006710:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006714:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	015a      	lsls	r2, r3, #5
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	4413      	add	r3, r2
 800671e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006722:	691a      	ldr	r2, [r3, #16]
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	69db      	ldr	r3, [r3, #28]
 8006728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800672c:	6939      	ldr	r1, [r7, #16]
 800672e:	0148      	lsls	r0, r1, #5
 8006730:	6979      	ldr	r1, [r7, #20]
 8006732:	4401      	add	r1, r0
 8006734:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006738:	4313      	orrs	r3, r2
 800673a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800673c:	79fb      	ldrb	r3, [r7, #7]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d10d      	bne.n	800675e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d009      	beq.n	800675e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	6919      	ldr	r1, [r3, #16]
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	015a      	lsls	r2, r3, #5
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	4413      	add	r3, r2
 8006756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675a:	460a      	mov	r2, r1
 800675c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	015a      	lsls	r2, r3, #5
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	4413      	add	r3, r2
 8006766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	0151      	lsls	r1, r2, #5
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	440a      	add	r2, r1
 8006774:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006778:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800677c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	371c      	adds	r7, #28
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr
 800678c:	e007ffff 	.word	0xe007ffff
 8006790:	fff80000 	.word	0xfff80000

08006794 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006794:	b480      	push	{r7}
 8006796:	b087      	sub	sp, #28
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800679e:	2300      	movs	r3, #0
 80067a0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80067a2:	2300      	movs	r3, #0
 80067a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	785b      	ldrb	r3, [r3, #1]
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d14a      	bne.n	8006848 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	015a      	lsls	r2, r3, #5
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	4413      	add	r3, r2
 80067bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067ca:	f040 8086 	bne.w	80068da <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	015a      	lsls	r2, r3, #5
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	4413      	add	r3, r2
 80067d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	683a      	ldr	r2, [r7, #0]
 80067e0:	7812      	ldrb	r2, [r2, #0]
 80067e2:	0151      	lsls	r1, r2, #5
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	440a      	add	r2, r1
 80067e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80067f0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	015a      	lsls	r2, r3, #5
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	4413      	add	r3, r2
 80067fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	7812      	ldrb	r2, [r2, #0]
 8006806:	0151      	lsls	r1, r2, #5
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	440a      	add	r2, r1
 800680c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006810:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006814:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	3301      	adds	r3, #1
 800681a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006822:	4293      	cmp	r3, r2
 8006824:	d902      	bls.n	800682c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	75fb      	strb	r3, [r7, #23]
          break;
 800682a:	e056      	b.n	80068da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	015a      	lsls	r2, r3, #5
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	4413      	add	r3, r2
 8006836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006840:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006844:	d0e7      	beq.n	8006816 <USB_EPStopXfer+0x82>
 8006846:	e048      	b.n	80068da <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	015a      	lsls	r2, r3, #5
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	4413      	add	r3, r2
 8006852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800685c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006860:	d13b      	bne.n	80068da <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	4413      	add	r3, r2
 800686c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	683a      	ldr	r2, [r7, #0]
 8006874:	7812      	ldrb	r2, [r2, #0]
 8006876:	0151      	lsls	r1, r2, #5
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	440a      	add	r2, r1
 800687c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006880:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006884:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	015a      	lsls	r2, r3, #5
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	4413      	add	r3, r2
 8006890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	683a      	ldr	r2, [r7, #0]
 8006898:	7812      	ldrb	r2, [r2, #0]
 800689a:	0151      	lsls	r1, r2, #5
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	440a      	add	r2, r1
 80068a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	3301      	adds	r3, #1
 80068ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d902      	bls.n	80068c0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	75fb      	strb	r3, [r7, #23]
          break;
 80068be:	e00c      	b.n	80068da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	015a      	lsls	r2, r3, #5
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	4413      	add	r3, r2
 80068ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068d8:	d0e7      	beq.n	80068aa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80068da:	7dfb      	ldrb	r3, [r7, #23]
}
 80068dc:	4618      	mov	r0, r3
 80068de:	371c      	adds	r7, #28
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b089      	sub	sp, #36	; 0x24
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	4611      	mov	r1, r2
 80068f4:	461a      	mov	r2, r3
 80068f6:	460b      	mov	r3, r1
 80068f8:	71fb      	strb	r3, [r7, #7]
 80068fa:	4613      	mov	r3, r2
 80068fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006906:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800690a:	2b00      	cmp	r3, #0
 800690c:	d123      	bne.n	8006956 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800690e:	88bb      	ldrh	r3, [r7, #4]
 8006910:	3303      	adds	r3, #3
 8006912:	089b      	lsrs	r3, r3, #2
 8006914:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006916:	2300      	movs	r3, #0
 8006918:	61bb      	str	r3, [r7, #24]
 800691a:	e018      	b.n	800694e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800691c:	79fb      	ldrb	r3, [r7, #7]
 800691e:	031a      	lsls	r2, r3, #12
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	4413      	add	r3, r2
 8006924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006928:	461a      	mov	r2, r3
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	3301      	adds	r3, #1
 8006934:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	3301      	adds	r3, #1
 800693a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	3301      	adds	r3, #1
 8006940:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	3301      	adds	r3, #1
 8006946:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	3301      	adds	r3, #1
 800694c:	61bb      	str	r3, [r7, #24]
 800694e:	69ba      	ldr	r2, [r7, #24]
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	429a      	cmp	r2, r3
 8006954:	d3e2      	bcc.n	800691c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3724      	adds	r7, #36	; 0x24
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006964:	b480      	push	{r7}
 8006966:	b08b      	sub	sp, #44	; 0x2c
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	4613      	mov	r3, r2
 8006970:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800697a:	88fb      	ldrh	r3, [r7, #6]
 800697c:	089b      	lsrs	r3, r3, #2
 800697e:	b29b      	uxth	r3, r3
 8006980:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006982:	88fb      	ldrh	r3, [r7, #6]
 8006984:	f003 0303 	and.w	r3, r3, #3
 8006988:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800698a:	2300      	movs	r3, #0
 800698c:	623b      	str	r3, [r7, #32]
 800698e:	e014      	b.n	80069ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699a:	601a      	str	r2, [r3, #0]
    pDest++;
 800699c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699e:	3301      	adds	r3, #1
 80069a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80069a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a4:	3301      	adds	r3, #1
 80069a6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80069a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069aa:	3301      	adds	r3, #1
 80069ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80069ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b0:	3301      	adds	r3, #1
 80069b2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80069b4:	6a3b      	ldr	r3, [r7, #32]
 80069b6:	3301      	adds	r3, #1
 80069b8:	623b      	str	r3, [r7, #32]
 80069ba:	6a3a      	ldr	r2, [r7, #32]
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d3e6      	bcc.n	8006990 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80069c2:	8bfb      	ldrh	r3, [r7, #30]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d01e      	beq.n	8006a06 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80069c8:	2300      	movs	r3, #0
 80069ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069d2:	461a      	mov	r2, r3
 80069d4:	f107 0310 	add.w	r3, r7, #16
 80069d8:	6812      	ldr	r2, [r2, #0]
 80069da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	6a3b      	ldr	r3, [r7, #32]
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	00db      	lsls	r3, r3, #3
 80069e4:	fa22 f303 	lsr.w	r3, r2, r3
 80069e8:	b2da      	uxtb	r2, r3
 80069ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ec:	701a      	strb	r2, [r3, #0]
      i++;
 80069ee:	6a3b      	ldr	r3, [r7, #32]
 80069f0:	3301      	adds	r3, #1
 80069f2:	623b      	str	r3, [r7, #32]
      pDest++;
 80069f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f6:	3301      	adds	r3, #1
 80069f8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80069fa:	8bfb      	ldrh	r3, [r7, #30]
 80069fc:	3b01      	subs	r3, #1
 80069fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006a00:	8bfb      	ldrh	r3, [r7, #30]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1ea      	bne.n	80069dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	372c      	adds	r7, #44	; 0x2c
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	785b      	ldrb	r3, [r3, #1]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d12c      	bne.n	8006a8a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	015a      	lsls	r2, r3, #5
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	db12      	blt.n	8006a68 <USB_EPSetStall+0x54>
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00f      	beq.n	8006a68 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	015a      	lsls	r2, r3, #5
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	4413      	add	r3, r2
 8006a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	0151      	lsls	r1, r2, #5
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	440a      	add	r2, r1
 8006a5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a66:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	015a      	lsls	r2, r3, #5
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4413      	add	r3, r2
 8006a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68ba      	ldr	r2, [r7, #8]
 8006a78:	0151      	lsls	r1, r2, #5
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	440a      	add	r2, r1
 8006a7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a86:	6013      	str	r3, [r2, #0]
 8006a88:	e02b      	b.n	8006ae2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	015a      	lsls	r2, r3, #5
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	4413      	add	r3, r2
 8006a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	db12      	blt.n	8006ac2 <USB_EPSetStall+0xae>
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00f      	beq.n	8006ac2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	015a      	lsls	r2, r3, #5
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68ba      	ldr	r2, [r7, #8]
 8006ab2:	0151      	lsls	r1, r2, #5
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	440a      	add	r2, r1
 8006ab8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006abc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ac0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	015a      	lsls	r2, r3, #5
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	4413      	add	r3, r2
 8006aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	0151      	lsls	r1, r2, #5
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	440a      	add	r2, r1
 8006ad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006adc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ae0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3714      	adds	r7, #20
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	785b      	ldrb	r3, [r3, #1]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d128      	bne.n	8006b5e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	015a      	lsls	r2, r3, #5
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	4413      	add	r3, r2
 8006b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	0151      	lsls	r1, r2, #5
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	440a      	add	r2, r1
 8006b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b2a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	791b      	ldrb	r3, [r3, #4]
 8006b30:	2b03      	cmp	r3, #3
 8006b32:	d003      	beq.n	8006b3c <USB_EPClearStall+0x4c>
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	791b      	ldrb	r3, [r3, #4]
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d138      	bne.n	8006bae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	015a      	lsls	r2, r3, #5
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	4413      	add	r3, r2
 8006b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68ba      	ldr	r2, [r7, #8]
 8006b4c:	0151      	lsls	r1, r2, #5
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	440a      	add	r2, r1
 8006b52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b5a:	6013      	str	r3, [r2, #0]
 8006b5c:	e027      	b.n	8006bae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	015a      	lsls	r2, r3, #5
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	4413      	add	r3, r2
 8006b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	0151      	lsls	r1, r2, #5
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	440a      	add	r2, r1
 8006b74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b7c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	791b      	ldrb	r3, [r3, #4]
 8006b82:	2b03      	cmp	r3, #3
 8006b84:	d003      	beq.n	8006b8e <USB_EPClearStall+0x9e>
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	791b      	ldrb	r3, [r3, #4]
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d10f      	bne.n	8006bae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	015a      	lsls	r2, r3, #5
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	4413      	add	r3, r2
 8006b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68ba      	ldr	r2, [r7, #8]
 8006b9e:	0151      	lsls	r1, r2, #5
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	440a      	add	r2, r1
 8006ba4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3714      	adds	r7, #20
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bda:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006bde:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	78fb      	ldrb	r3, [r7, #3]
 8006bea:	011b      	lsls	r3, r3, #4
 8006bec:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006bf0:	68f9      	ldr	r1, [r7, #12]
 8006bf2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3714      	adds	r7, #20
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c22:	f023 0303 	bic.w	r3, r3, #3
 8006c26:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c36:	f023 0302 	bic.w	r3, r3, #2
 8006c3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3714      	adds	r7, #20
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006c4a:	b480      	push	{r7}
 8006c4c:	b085      	sub	sp, #20
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c64:	f023 0303 	bic.w	r3, r3, #3
 8006c68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c78:	f043 0302 	orr.w	r3, r3, #2
 8006c7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3714      	adds	r7, #20
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	695b      	ldr	r3, [r3, #20]
 8006c98:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3714      	adds	r7, #20
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr

08006cb2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006cb2:	b480      	push	{r7}
 8006cb4:	b085      	sub	sp, #20
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cce:	69db      	ldr	r3, [r3, #28]
 8006cd0:	68ba      	ldr	r2, [r7, #8]
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	0c1b      	lsrs	r3, r3, #16
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3714      	adds	r7, #20
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr

08006ce6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b085      	sub	sp, #20
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d02:	69db      	ldr	r3, [r3, #28]
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	4013      	ands	r3, r2
 8006d08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	b29b      	uxth	r3, r3
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3714      	adds	r7, #20
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr

08006d1a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b085      	sub	sp, #20
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
 8006d22:	460b      	mov	r3, r1
 8006d24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006d2a:	78fb      	ldrb	r3, [r7, #3]
 8006d2c:	015a      	lsls	r2, r3, #5
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	4413      	add	r3, r2
 8006d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d40:	695b      	ldr	r3, [r3, #20]
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	4013      	ands	r3, r2
 8006d46:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006d48:	68bb      	ldr	r3, [r7, #8]
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3714      	adds	r7, #20
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b087      	sub	sp, #28
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
 8006d5e:	460b      	mov	r3, r1
 8006d60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d78:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006d7a:	78fb      	ldrb	r3, [r7, #3]
 8006d7c:	f003 030f 	and.w	r3, r3, #15
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	fa22 f303 	lsr.w	r3, r2, r3
 8006d86:	01db      	lsls	r3, r3, #7
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006d90:	78fb      	ldrb	r3, [r7, #3]
 8006d92:	015a      	lsls	r2, r3, #5
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	4413      	add	r3, r2
 8006d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	4013      	ands	r3, r2
 8006da2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006da4:	68bb      	ldr	r3, [r7, #8]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	371c      	adds	r7, #28
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr

08006db2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006db2:	b480      	push	{r7}
 8006db4:	b083      	sub	sp, #12
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	f003 0301 	and.w	r3, r3, #1
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	370c      	adds	r7, #12
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
	...

08006dd0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dea:	4619      	mov	r1, r3
 8006dec:	4b09      	ldr	r3, [pc, #36]	; (8006e14 <USB_ActivateSetup+0x44>)
 8006dee:	4013      	ands	r3, r2
 8006df0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3714      	adds	r7, #20
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr
 8006e14:	fffff800 	.word	0xfffff800

08006e18 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b087      	sub	sp, #28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	460b      	mov	r3, r1
 8006e22:	607a      	str	r2, [r7, #4]
 8006e24:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	333c      	adds	r3, #60	; 0x3c
 8006e2e:	3304      	adds	r3, #4
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	4a26      	ldr	r2, [pc, #152]	; (8006ed0 <USB_EP0_OutStart+0xb8>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d90a      	bls.n	8006e52 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e4c:	d101      	bne.n	8006e52 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	e037      	b.n	8006ec2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e58:	461a      	mov	r2, r3
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	697a      	ldr	r2, [r7, #20]
 8006e7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e80:	f043 0318 	orr.w	r3, r3, #24
 8006e84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	697a      	ldr	r2, [r7, #20]
 8006e90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e94:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006e98:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006e9a:	7afb      	ldrb	r3, [r7, #11]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d10f      	bne.n	8006ec0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006ebe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	371c      	adds	r7, #28
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	4f54300a 	.word	0x4f54300a

08006ed4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006edc:	2300      	movs	r3, #0
 8006ede:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	4a13      	ldr	r2, [pc, #76]	; (8006f38 <USB_CoreReset+0x64>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d901      	bls.n	8006ef2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e01b      	b.n	8006f2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	daf2      	bge.n	8006ee0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006efa:	2300      	movs	r3, #0
 8006efc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	f043 0201 	orr.w	r2, r3, #1
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	4a09      	ldr	r2, [pc, #36]	; (8006f38 <USB_CoreReset+0x64>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d901      	bls.n	8006f1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e006      	b.n	8006f2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	f003 0301 	and.w	r3, r3, #1
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d0f0      	beq.n	8006f0a <USB_CoreReset+0x36>

  return HAL_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3714      	adds	r7, #20
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	00030d40 	.word	0x00030d40

08006f3c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	460b      	mov	r3, r1
 8006f46:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006f48:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006f4c:	f002 feaa 	bl	8009ca4 <malloc>
 8006f50:	4603      	mov	r3, r0
 8006f52:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d109      	bne.n	8006f6e <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	32b0      	adds	r2, #176	; 0xb0
 8006f64:	2100      	movs	r1, #0
 8006f66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006f6a:	2302      	movs	r3, #2
 8006f6c:	e0d4      	b.n	8007118 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006f6e:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006f72:	2100      	movs	r1, #0
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	f002 feb3 	bl	8009ce0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	32b0      	adds	r2, #176	; 0xb0
 8006f84:	68f9      	ldr	r1, [r7, #12]
 8006f86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	32b0      	adds	r2, #176	; 0xb0
 8006f94:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	7c1b      	ldrb	r3, [r3, #16]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d138      	bne.n	8007018 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006fa6:	4b5e      	ldr	r3, [pc, #376]	; (8007120 <USBD_CDC_Init+0x1e4>)
 8006fa8:	7819      	ldrb	r1, [r3, #0]
 8006faa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fae:	2202      	movs	r2, #2
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f002 fcaa 	bl	800990a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006fb6:	4b5a      	ldr	r3, [pc, #360]	; (8007120 <USBD_CDC_Init+0x1e4>)
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	f003 020f 	and.w	r2, r3, #15
 8006fbe:	6879      	ldr	r1, [r7, #4]
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	4413      	add	r3, r2
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	440b      	add	r3, r1
 8006fca:	3324      	adds	r3, #36	; 0x24
 8006fcc:	2201      	movs	r2, #1
 8006fce:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006fd0:	4b54      	ldr	r3, [pc, #336]	; (8007124 <USBD_CDC_Init+0x1e8>)
 8006fd2:	7819      	ldrb	r1, [r3, #0]
 8006fd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fd8:	2202      	movs	r2, #2
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f002 fc95 	bl	800990a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006fe0:	4b50      	ldr	r3, [pc, #320]	; (8007124 <USBD_CDC_Init+0x1e8>)
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	f003 020f 	and.w	r2, r3, #15
 8006fe8:	6879      	ldr	r1, [r7, #4]
 8006fea:	4613      	mov	r3, r2
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	4413      	add	r3, r2
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	440b      	add	r3, r1
 8006ff4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006ffc:	4b4a      	ldr	r3, [pc, #296]	; (8007128 <USBD_CDC_Init+0x1ec>)
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	f003 020f 	and.w	r2, r3, #15
 8007004:	6879      	ldr	r1, [r7, #4]
 8007006:	4613      	mov	r3, r2
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	4413      	add	r3, r2
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	440b      	add	r3, r1
 8007010:	3326      	adds	r3, #38	; 0x26
 8007012:	2210      	movs	r2, #16
 8007014:	801a      	strh	r2, [r3, #0]
 8007016:	e035      	b.n	8007084 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007018:	4b41      	ldr	r3, [pc, #260]	; (8007120 <USBD_CDC_Init+0x1e4>)
 800701a:	7819      	ldrb	r1, [r3, #0]
 800701c:	2340      	movs	r3, #64	; 0x40
 800701e:	2202      	movs	r2, #2
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f002 fc72 	bl	800990a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007026:	4b3e      	ldr	r3, [pc, #248]	; (8007120 <USBD_CDC_Init+0x1e4>)
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	f003 020f 	and.w	r2, r3, #15
 800702e:	6879      	ldr	r1, [r7, #4]
 8007030:	4613      	mov	r3, r2
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	4413      	add	r3, r2
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	440b      	add	r3, r1
 800703a:	3324      	adds	r3, #36	; 0x24
 800703c:	2201      	movs	r2, #1
 800703e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007040:	4b38      	ldr	r3, [pc, #224]	; (8007124 <USBD_CDC_Init+0x1e8>)
 8007042:	7819      	ldrb	r1, [r3, #0]
 8007044:	2340      	movs	r3, #64	; 0x40
 8007046:	2202      	movs	r2, #2
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f002 fc5e 	bl	800990a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800704e:	4b35      	ldr	r3, [pc, #212]	; (8007124 <USBD_CDC_Init+0x1e8>)
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	f003 020f 	and.w	r2, r3, #15
 8007056:	6879      	ldr	r1, [r7, #4]
 8007058:	4613      	mov	r3, r2
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	4413      	add	r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	440b      	add	r3, r1
 8007062:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007066:	2201      	movs	r2, #1
 8007068:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800706a:	4b2f      	ldr	r3, [pc, #188]	; (8007128 <USBD_CDC_Init+0x1ec>)
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	f003 020f 	and.w	r2, r3, #15
 8007072:	6879      	ldr	r1, [r7, #4]
 8007074:	4613      	mov	r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	440b      	add	r3, r1
 800707e:	3326      	adds	r3, #38	; 0x26
 8007080:	2210      	movs	r2, #16
 8007082:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007084:	4b28      	ldr	r3, [pc, #160]	; (8007128 <USBD_CDC_Init+0x1ec>)
 8007086:	7819      	ldrb	r1, [r3, #0]
 8007088:	2308      	movs	r3, #8
 800708a:	2203      	movs	r2, #3
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f002 fc3c 	bl	800990a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007092:	4b25      	ldr	r3, [pc, #148]	; (8007128 <USBD_CDC_Init+0x1ec>)
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	f003 020f 	and.w	r2, r3, #15
 800709a:	6879      	ldr	r1, [r7, #4]
 800709c:	4613      	mov	r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	440b      	add	r3, r1
 80070a6:	3324      	adds	r3, #36	; 0x24
 80070a8:	2201      	movs	r2, #1
 80070aa:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	33b0      	adds	r3, #176	; 0xb0
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d101      	bne.n	80070e6 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 80070e2:	2302      	movs	r3, #2
 80070e4:	e018      	b.n	8007118 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	7c1b      	ldrb	r3, [r3, #16]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10a      	bne.n	8007104 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80070ee:	4b0d      	ldr	r3, [pc, #52]	; (8007124 <USBD_CDC_Init+0x1e8>)
 80070f0:	7819      	ldrb	r1, [r3, #0]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f002 fcf3 	bl	8009ae8 <USBD_LL_PrepareReceive>
 8007102:	e008      	b.n	8007116 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007104:	4b07      	ldr	r3, [pc, #28]	; (8007124 <USBD_CDC_Init+0x1e8>)
 8007106:	7819      	ldrb	r1, [r3, #0]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800710e:	2340      	movs	r3, #64	; 0x40
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f002 fce9 	bl	8009ae8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3710      	adds	r7, #16
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	200000a3 	.word	0x200000a3
 8007124:	200000a4 	.word	0x200000a4
 8007128:	200000a5 	.word	0x200000a5

0800712c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	460b      	mov	r3, r1
 8007136:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007138:	4b3a      	ldr	r3, [pc, #232]	; (8007224 <USBD_CDC_DeInit+0xf8>)
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	4619      	mov	r1, r3
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f002 fc09 	bl	8009956 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007144:	4b37      	ldr	r3, [pc, #220]	; (8007224 <USBD_CDC_DeInit+0xf8>)
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	f003 020f 	and.w	r2, r3, #15
 800714c:	6879      	ldr	r1, [r7, #4]
 800714e:	4613      	mov	r3, r2
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	4413      	add	r3, r2
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	440b      	add	r3, r1
 8007158:	3324      	adds	r3, #36	; 0x24
 800715a:	2200      	movs	r2, #0
 800715c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800715e:	4b32      	ldr	r3, [pc, #200]	; (8007228 <USBD_CDC_DeInit+0xfc>)
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	4619      	mov	r1, r3
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f002 fbf6 	bl	8009956 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800716a:	4b2f      	ldr	r3, [pc, #188]	; (8007228 <USBD_CDC_DeInit+0xfc>)
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	f003 020f 	and.w	r2, r3, #15
 8007172:	6879      	ldr	r1, [r7, #4]
 8007174:	4613      	mov	r3, r2
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	4413      	add	r3, r2
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	440b      	add	r3, r1
 800717e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007182:	2200      	movs	r2, #0
 8007184:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007186:	4b29      	ldr	r3, [pc, #164]	; (800722c <USBD_CDC_DeInit+0x100>)
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	4619      	mov	r1, r3
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f002 fbe2 	bl	8009956 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007192:	4b26      	ldr	r3, [pc, #152]	; (800722c <USBD_CDC_DeInit+0x100>)
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	f003 020f 	and.w	r2, r3, #15
 800719a:	6879      	ldr	r1, [r7, #4]
 800719c:	4613      	mov	r3, r2
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	4413      	add	r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	440b      	add	r3, r1
 80071a6:	3324      	adds	r3, #36	; 0x24
 80071a8:	2200      	movs	r2, #0
 80071aa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80071ac:	4b1f      	ldr	r3, [pc, #124]	; (800722c <USBD_CDC_DeInit+0x100>)
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	f003 020f 	and.w	r2, r3, #15
 80071b4:	6879      	ldr	r1, [r7, #4]
 80071b6:	4613      	mov	r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4413      	add	r3, r2
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	440b      	add	r3, r1
 80071c0:	3326      	adds	r3, #38	; 0x26
 80071c2:	2200      	movs	r2, #0
 80071c4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	32b0      	adds	r2, #176	; 0xb0
 80071d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d01f      	beq.n	8007218 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	33b0      	adds	r3, #176	; 0xb0
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	4413      	add	r3, r2
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	32b0      	adds	r2, #176	; 0xb0
 80071f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071fa:	4618      	mov	r0, r3
 80071fc:	f002 fd5a 	bl	8009cb4 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	32b0      	adds	r2, #176	; 0xb0
 800720a:	2100      	movs	r1, #0
 800720c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3708      	adds	r7, #8
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	200000a3 	.word	0x200000a3
 8007228:	200000a4 	.word	0x200000a4
 800722c:	200000a5 	.word	0x200000a5

08007230 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b086      	sub	sp, #24
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	32b0      	adds	r2, #176	; 0xb0
 8007244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007248:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800724a:	2300      	movs	r3, #0
 800724c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800724e:	2300      	movs	r3, #0
 8007250:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007252:	2300      	movs	r3, #0
 8007254:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d101      	bne.n	8007260 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800725c:	2303      	movs	r3, #3
 800725e:	e0bf      	b.n	80073e0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007268:	2b00      	cmp	r3, #0
 800726a:	d050      	beq.n	800730e <USBD_CDC_Setup+0xde>
 800726c:	2b20      	cmp	r3, #32
 800726e:	f040 80af 	bne.w	80073d0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	88db      	ldrh	r3, [r3, #6]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d03a      	beq.n	80072f0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	b25b      	sxtb	r3, r3
 8007280:	2b00      	cmp	r3, #0
 8007282:	da1b      	bge.n	80072bc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	33b0      	adds	r3, #176	; 0xb0
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	4413      	add	r3, r2
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	683a      	ldr	r2, [r7, #0]
 8007298:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800729a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800729c:	683a      	ldr	r2, [r7, #0]
 800729e:	88d2      	ldrh	r2, [r2, #6]
 80072a0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	88db      	ldrh	r3, [r3, #6]
 80072a6:	2b07      	cmp	r3, #7
 80072a8:	bf28      	it	cs
 80072aa:	2307      	movcs	r3, #7
 80072ac:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	89fa      	ldrh	r2, [r7, #14]
 80072b2:	4619      	mov	r1, r3
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f001 fdad 	bl	8008e14 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80072ba:	e090      	b.n	80073de <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	785a      	ldrb	r2, [r3, #1]
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	88db      	ldrh	r3, [r3, #6]
 80072ca:	2b3f      	cmp	r3, #63	; 0x3f
 80072cc:	d803      	bhi.n	80072d6 <USBD_CDC_Setup+0xa6>
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	88db      	ldrh	r3, [r3, #6]
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	e000      	b.n	80072d8 <USBD_CDC_Setup+0xa8>
 80072d6:	2240      	movs	r2, #64	; 0x40
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80072de:	6939      	ldr	r1, [r7, #16]
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80072e6:	461a      	mov	r2, r3
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f001 fdbf 	bl	8008e6c <USBD_CtlPrepareRx>
      break;
 80072ee:	e076      	b.n	80073de <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	33b0      	adds	r3, #176	; 0xb0
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	4413      	add	r3, r2
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	683a      	ldr	r2, [r7, #0]
 8007304:	7850      	ldrb	r0, [r2, #1]
 8007306:	2200      	movs	r2, #0
 8007308:	6839      	ldr	r1, [r7, #0]
 800730a:	4798      	blx	r3
      break;
 800730c:	e067      	b.n	80073de <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	785b      	ldrb	r3, [r3, #1]
 8007312:	2b0b      	cmp	r3, #11
 8007314:	d851      	bhi.n	80073ba <USBD_CDC_Setup+0x18a>
 8007316:	a201      	add	r2, pc, #4	; (adr r2, 800731c <USBD_CDC_Setup+0xec>)
 8007318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800731c:	0800734d 	.word	0x0800734d
 8007320:	080073c9 	.word	0x080073c9
 8007324:	080073bb 	.word	0x080073bb
 8007328:	080073bb 	.word	0x080073bb
 800732c:	080073bb 	.word	0x080073bb
 8007330:	080073bb 	.word	0x080073bb
 8007334:	080073bb 	.word	0x080073bb
 8007338:	080073bb 	.word	0x080073bb
 800733c:	080073bb 	.word	0x080073bb
 8007340:	080073bb 	.word	0x080073bb
 8007344:	08007377 	.word	0x08007377
 8007348:	080073a1 	.word	0x080073a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007352:	b2db      	uxtb	r3, r3
 8007354:	2b03      	cmp	r3, #3
 8007356:	d107      	bne.n	8007368 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007358:	f107 030a 	add.w	r3, r7, #10
 800735c:	2202      	movs	r2, #2
 800735e:	4619      	mov	r1, r3
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f001 fd57 	bl	8008e14 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007366:	e032      	b.n	80073ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007368:	6839      	ldr	r1, [r7, #0]
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f001 fce1 	bl	8008d32 <USBD_CtlError>
            ret = USBD_FAIL;
 8007370:	2303      	movs	r3, #3
 8007372:	75fb      	strb	r3, [r7, #23]
          break;
 8007374:	e02b      	b.n	80073ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800737c:	b2db      	uxtb	r3, r3
 800737e:	2b03      	cmp	r3, #3
 8007380:	d107      	bne.n	8007392 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007382:	f107 030d 	add.w	r3, r7, #13
 8007386:	2201      	movs	r2, #1
 8007388:	4619      	mov	r1, r3
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f001 fd42 	bl	8008e14 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007390:	e01d      	b.n	80073ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007392:	6839      	ldr	r1, [r7, #0]
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f001 fccc 	bl	8008d32 <USBD_CtlError>
            ret = USBD_FAIL;
 800739a:	2303      	movs	r3, #3
 800739c:	75fb      	strb	r3, [r7, #23]
          break;
 800739e:	e016      	b.n	80073ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b03      	cmp	r3, #3
 80073aa:	d00f      	beq.n	80073cc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80073ac:	6839      	ldr	r1, [r7, #0]
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f001 fcbf 	bl	8008d32 <USBD_CtlError>
            ret = USBD_FAIL;
 80073b4:	2303      	movs	r3, #3
 80073b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80073b8:	e008      	b.n	80073cc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80073ba:	6839      	ldr	r1, [r7, #0]
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f001 fcb8 	bl	8008d32 <USBD_CtlError>
          ret = USBD_FAIL;
 80073c2:	2303      	movs	r3, #3
 80073c4:	75fb      	strb	r3, [r7, #23]
          break;
 80073c6:	e002      	b.n	80073ce <USBD_CDC_Setup+0x19e>
          break;
 80073c8:	bf00      	nop
 80073ca:	e008      	b.n	80073de <USBD_CDC_Setup+0x1ae>
          break;
 80073cc:	bf00      	nop
      }
      break;
 80073ce:	e006      	b.n	80073de <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80073d0:	6839      	ldr	r1, [r7, #0]
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f001 fcad 	bl	8008d32 <USBD_CtlError>
      ret = USBD_FAIL;
 80073d8:	2303      	movs	r3, #3
 80073da:	75fb      	strb	r3, [r7, #23]
      break;
 80073dc:	bf00      	nop
  }

  return (uint8_t)ret;
 80073de:	7dfb      	ldrb	r3, [r7, #23]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3718      	adds	r7, #24
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	460b      	mov	r3, r1
 80073f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80073fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	32b0      	adds	r2, #176	; 0xb0
 8007406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d101      	bne.n	8007412 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800740e:	2303      	movs	r3, #3
 8007410:	e065      	b.n	80074de <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	32b0      	adds	r2, #176	; 0xb0
 800741c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007420:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007422:	78fb      	ldrb	r3, [r7, #3]
 8007424:	f003 020f 	and.w	r2, r3, #15
 8007428:	6879      	ldr	r1, [r7, #4]
 800742a:	4613      	mov	r3, r2
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	4413      	add	r3, r2
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	440b      	add	r3, r1
 8007434:	3318      	adds	r3, #24
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d02f      	beq.n	800749c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800743c:	78fb      	ldrb	r3, [r7, #3]
 800743e:	f003 020f 	and.w	r2, r3, #15
 8007442:	6879      	ldr	r1, [r7, #4]
 8007444:	4613      	mov	r3, r2
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	4413      	add	r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	440b      	add	r3, r1
 800744e:	3318      	adds	r3, #24
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	78fb      	ldrb	r3, [r7, #3]
 8007454:	f003 010f 	and.w	r1, r3, #15
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	460b      	mov	r3, r1
 800745c:	00db      	lsls	r3, r3, #3
 800745e:	440b      	add	r3, r1
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4403      	add	r3, r0
 8007464:	3348      	adds	r3, #72	; 0x48
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	fbb2 f1f3 	udiv	r1, r2, r3
 800746c:	fb01 f303 	mul.w	r3, r1, r3
 8007470:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007472:	2b00      	cmp	r3, #0
 8007474:	d112      	bne.n	800749c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007476:	78fb      	ldrb	r3, [r7, #3]
 8007478:	f003 020f 	and.w	r2, r3, #15
 800747c:	6879      	ldr	r1, [r7, #4]
 800747e:	4613      	mov	r3, r2
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	4413      	add	r3, r2
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	440b      	add	r3, r1
 8007488:	3318      	adds	r3, #24
 800748a:	2200      	movs	r2, #0
 800748c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800748e:	78f9      	ldrb	r1, [r7, #3]
 8007490:	2300      	movs	r3, #0
 8007492:	2200      	movs	r2, #0
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f002 fb06 	bl	8009aa6 <USBD_LL_Transmit>
 800749a:	e01f      	b.n	80074dc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	2200      	movs	r2, #0
 80074a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	33b0      	adds	r3, #176	; 0xb0
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	4413      	add	r3, r2
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d010      	beq.n	80074dc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	33b0      	adds	r3, #176	; 0xb0
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	4413      	add	r3, r2
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	68ba      	ldr	r2, [r7, #8]
 80074ce:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80074d2:	68ba      	ldr	r2, [r7, #8]
 80074d4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80074d8:	78fa      	ldrb	r2, [r7, #3]
 80074da:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b084      	sub	sp, #16
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
 80074ee:	460b      	mov	r3, r1
 80074f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	32b0      	adds	r2, #176	; 0xb0
 80074fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007500:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	32b0      	adds	r2, #176	; 0xb0
 800750c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d101      	bne.n	8007518 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007514:	2303      	movs	r3, #3
 8007516:	e01a      	b.n	800754e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007518:	78fb      	ldrb	r3, [r7, #3]
 800751a:	4619      	mov	r1, r3
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f002 fb04 	bl	8009b2a <USBD_LL_GetRxDataSize>
 8007522:	4602      	mov	r2, r0
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	33b0      	adds	r3, #176	; 0xb0
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	4413      	add	r3, r2
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007548:	4611      	mov	r1, r2
 800754a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b084      	sub	sp, #16
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	32b0      	adds	r2, #176	; 0xb0
 8007568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800756c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d101      	bne.n	8007578 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007574:	2303      	movs	r3, #3
 8007576:	e025      	b.n	80075c4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	33b0      	adds	r3, #176	; 0xb0
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	4413      	add	r3, r2
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d01a      	beq.n	80075c2 <USBD_CDC_EP0_RxReady+0x6c>
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007592:	2bff      	cmp	r3, #255	; 0xff
 8007594:	d015      	beq.n	80075c2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	33b0      	adds	r3, #176	; 0xb0
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	4413      	add	r3, r2
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80075ae:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80075b6:	b292      	uxth	r2, r2
 80075b8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	22ff      	movs	r2, #255	; 0xff
 80075be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b086      	sub	sp, #24
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80075d4:	2182      	movs	r1, #130	; 0x82
 80075d6:	4818      	ldr	r0, [pc, #96]	; (8007638 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80075d8:	f000 fd49 	bl	800806e <USBD_GetEpDesc>
 80075dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80075de:	2101      	movs	r1, #1
 80075e0:	4815      	ldr	r0, [pc, #84]	; (8007638 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80075e2:	f000 fd44 	bl	800806e <USBD_GetEpDesc>
 80075e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80075e8:	2181      	movs	r1, #129	; 0x81
 80075ea:	4813      	ldr	r0, [pc, #76]	; (8007638 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80075ec:	f000 fd3f 	bl	800806e <USBD_GetEpDesc>
 80075f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d002      	beq.n	80075fe <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	2210      	movs	r2, #16
 80075fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d006      	beq.n	8007612 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	2200      	movs	r2, #0
 8007608:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800760c:	711a      	strb	r2, [r3, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d006      	beq.n	8007626 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2200      	movs	r2, #0
 800761c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007620:	711a      	strb	r2, [r3, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2243      	movs	r2, #67	; 0x43
 800762a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800762c:	4b02      	ldr	r3, [pc, #8]	; (8007638 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800762e:	4618      	mov	r0, r3
 8007630:	3718      	adds	r7, #24
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	20000060 	.word	0x20000060

0800763c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b086      	sub	sp, #24
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007644:	2182      	movs	r1, #130	; 0x82
 8007646:	4818      	ldr	r0, [pc, #96]	; (80076a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007648:	f000 fd11 	bl	800806e <USBD_GetEpDesc>
 800764c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800764e:	2101      	movs	r1, #1
 8007650:	4815      	ldr	r0, [pc, #84]	; (80076a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007652:	f000 fd0c 	bl	800806e <USBD_GetEpDesc>
 8007656:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007658:	2181      	movs	r1, #129	; 0x81
 800765a:	4813      	ldr	r0, [pc, #76]	; (80076a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800765c:	f000 fd07 	bl	800806e <USBD_GetEpDesc>
 8007660:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d002      	beq.n	800766e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	2210      	movs	r2, #16
 800766c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d006      	beq.n	8007682 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	2200      	movs	r2, #0
 8007678:	711a      	strb	r2, [r3, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	f042 0202 	orr.w	r2, r2, #2
 8007680:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d006      	beq.n	8007696 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	711a      	strb	r2, [r3, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	f042 0202 	orr.w	r2, r2, #2
 8007694:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2243      	movs	r2, #67	; 0x43
 800769a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800769c:	4b02      	ldr	r3, [pc, #8]	; (80076a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3718      	adds	r7, #24
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	20000060 	.word	0x20000060

080076ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b086      	sub	sp, #24
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80076b4:	2182      	movs	r1, #130	; 0x82
 80076b6:	4818      	ldr	r0, [pc, #96]	; (8007718 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80076b8:	f000 fcd9 	bl	800806e <USBD_GetEpDesc>
 80076bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80076be:	2101      	movs	r1, #1
 80076c0:	4815      	ldr	r0, [pc, #84]	; (8007718 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80076c2:	f000 fcd4 	bl	800806e <USBD_GetEpDesc>
 80076c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80076c8:	2181      	movs	r1, #129	; 0x81
 80076ca:	4813      	ldr	r0, [pc, #76]	; (8007718 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80076cc:	f000 fccf 	bl	800806e <USBD_GetEpDesc>
 80076d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d002      	beq.n	80076de <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	2210      	movs	r2, #16
 80076dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d006      	beq.n	80076f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076ec:	711a      	strb	r2, [r3, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d006      	beq.n	8007706 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007700:	711a      	strb	r2, [r3, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2243      	movs	r2, #67	; 0x43
 800770a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800770c:	4b02      	ldr	r3, [pc, #8]	; (8007718 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800770e:	4618      	mov	r0, r3
 8007710:	3718      	adds	r7, #24
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	20000060 	.word	0x20000060

0800771c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	220a      	movs	r2, #10
 8007728:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800772a:	4b03      	ldr	r3, [pc, #12]	; (8007738 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800772c:	4618      	mov	r0, r3
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr
 8007738:	20000018 	.word	0x20000018

0800773c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d101      	bne.n	8007750 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800774c:	2303      	movs	r3, #3
 800774e:	e009      	b.n	8007764 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	33b0      	adds	r3, #176	; 0xb0
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	4413      	add	r3, r2
 800775e:	683a      	ldr	r2, [r7, #0]
 8007760:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007770:	b480      	push	{r7}
 8007772:	b087      	sub	sp, #28
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	32b0      	adds	r2, #176	; 0xb0
 8007786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800778a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d101      	bne.n	8007796 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007792:	2303      	movs	r3, #3
 8007794:	e008      	b.n	80077a8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	68ba      	ldr	r2, [r7, #8]
 800779a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	371c      	adds	r7, #28
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	32b0      	adds	r2, #176	; 0xb0
 80077c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d101      	bne.n	80077d8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80077d4:	2303      	movs	r3, #3
 80077d6:	e004      	b.n	80077e2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	683a      	ldr	r2, [r7, #0]
 80077dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3714      	adds	r7, #20
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
	...

080077f0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	32b0      	adds	r2, #176	; 0xb0
 8007802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007806:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007808:	2301      	movs	r3, #1
 800780a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d101      	bne.n	8007816 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007812:	2303      	movs	r3, #3
 8007814:	e025      	b.n	8007862 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800781c:	2b00      	cmp	r3, #0
 800781e:	d11f      	bne.n	8007860 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	2201      	movs	r2, #1
 8007824:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007828:	4b10      	ldr	r3, [pc, #64]	; (800786c <USBD_CDC_TransmitPacket+0x7c>)
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	f003 020f 	and.w	r2, r3, #15
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	4613      	mov	r3, r2
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	4413      	add	r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4403      	add	r3, r0
 8007842:	3318      	adds	r3, #24
 8007844:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007846:	4b09      	ldr	r3, [pc, #36]	; (800786c <USBD_CDC_TransmitPacket+0x7c>)
 8007848:	7819      	ldrb	r1, [r3, #0]
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f002 f925 	bl	8009aa6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800785c:	2300      	movs	r3, #0
 800785e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007860:	7bfb      	ldrb	r3, [r7, #15]
}
 8007862:	4618      	mov	r0, r3
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	200000a3 	.word	0x200000a3

08007870 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	32b0      	adds	r2, #176	; 0xb0
 8007882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007886:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	32b0      	adds	r2, #176	; 0xb0
 8007892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d101      	bne.n	800789e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800789a:	2303      	movs	r3, #3
 800789c:	e018      	b.n	80078d0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	7c1b      	ldrb	r3, [r3, #16]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d10a      	bne.n	80078bc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80078a6:	4b0c      	ldr	r3, [pc, #48]	; (80078d8 <USBD_CDC_ReceivePacket+0x68>)
 80078a8:	7819      	ldrb	r1, [r3, #0]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f002 f917 	bl	8009ae8 <USBD_LL_PrepareReceive>
 80078ba:	e008      	b.n	80078ce <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80078bc:	4b06      	ldr	r3, [pc, #24]	; (80078d8 <USBD_CDC_ReceivePacket+0x68>)
 80078be:	7819      	ldrb	r1, [r3, #0]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078c6:	2340      	movs	r3, #64	; 0x40
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f002 f90d 	bl	8009ae8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	200000a4 	.word	0x200000a4

080078dc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b086      	sub	sp, #24
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	4613      	mov	r3, r2
 80078e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d101      	bne.n	80078f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e01f      	b.n	8007934 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2200      	movs	r2, #0
 8007908:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d003      	beq.n	800791a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	68ba      	ldr	r2, [r7, #8]
 8007916:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2201      	movs	r2, #1
 800791e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	79fa      	ldrb	r2, [r7, #7]
 8007926:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f001 ff87 	bl	800983c <USBD_LL_Init>
 800792e:	4603      	mov	r3, r0
 8007930:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007932:	7dfb      	ldrb	r3, [r7, #23]
}
 8007934:	4618      	mov	r0, r3
 8007936:	3718      	adds	r7, #24
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007946:	2300      	movs	r3, #0
 8007948:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d101      	bne.n	8007954 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007950:	2303      	movs	r3, #3
 8007952:	e025      	b.n	80079a0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	683a      	ldr	r2, [r7, #0]
 8007958:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	32ae      	adds	r2, #174	; 0xae
 8007966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800796a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00f      	beq.n	8007990 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	32ae      	adds	r2, #174	; 0xae
 800797a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800797e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007980:	f107 020e 	add.w	r2, r7, #14
 8007984:	4610      	mov	r0, r2
 8007986:	4798      	blx	r3
 8007988:	4602      	mov	r2, r0
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007996:	1c5a      	adds	r2, r3, #1
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3710      	adds	r7, #16
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f001 ff8f 	bl	80098d4 <USBD_LL_Start>
 80079b6:	4603      	mov	r3, r0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3708      	adds	r7, #8
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80079c8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	370c      	adds	r7, #12
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr

080079d6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b084      	sub	sp, #16
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
 80079de:	460b      	mov	r3, r1
 80079e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80079e2:	2300      	movs	r3, #0
 80079e4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d009      	beq.n	8007a04 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	78fa      	ldrb	r2, [r7, #3]
 80079fa:	4611      	mov	r1, r2
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	4798      	blx	r3
 8007a00:	4603      	mov	r3, r0
 8007a02:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b084      	sub	sp, #16
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
 8007a16:	460b      	mov	r3, r1
 8007a18:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	78fa      	ldrb	r2, [r7, #3]
 8007a28:	4611      	mov	r1, r2
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	4798      	blx	r3
 8007a2e:	4603      	mov	r3, r0
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d001      	beq.n	8007a38 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007a34:	2303      	movs	r3, #3
 8007a36:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b084      	sub	sp, #16
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
 8007a4a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a52:	6839      	ldr	r1, [r7, #0]
 8007a54:	4618      	mov	r0, r3
 8007a56:	f001 f932 	bl	8008cbe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007a68:	461a      	mov	r2, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a76:	f003 031f 	and.w	r3, r3, #31
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	d01a      	beq.n	8007ab4 <USBD_LL_SetupStage+0x72>
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d822      	bhi.n	8007ac8 <USBD_LL_SetupStage+0x86>
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d002      	beq.n	8007a8c <USBD_LL_SetupStage+0x4a>
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d00a      	beq.n	8007aa0 <USBD_LL_SetupStage+0x5e>
 8007a8a:	e01d      	b.n	8007ac8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a92:	4619      	mov	r1, r3
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 fb5f 	bl	8008158 <USBD_StdDevReq>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	73fb      	strb	r3, [r7, #15]
      break;
 8007a9e:	e020      	b.n	8007ae2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 fbc7 	bl	800823c <USBD_StdItfReq>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ab2:	e016      	b.n	8007ae2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007aba:	4619      	mov	r1, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fc29 	bl	8008314 <USBD_StdEPReq>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ac6:	e00c      	b.n	8007ae2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007ace:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f001 ff5c 	bl	8009994 <USBD_LL_StallEP>
 8007adc:	4603      	mov	r3, r0
 8007ade:	73fb      	strb	r3, [r7, #15]
      break;
 8007ae0:	bf00      	nop
  }

  return ret;
 8007ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3710      	adds	r7, #16
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b086      	sub	sp, #24
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	460b      	mov	r3, r1
 8007af6:	607a      	str	r2, [r7, #4]
 8007af8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007afa:	2300      	movs	r3, #0
 8007afc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007afe:	7afb      	ldrb	r3, [r7, #11]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d16e      	bne.n	8007be2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007b0a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b12:	2b03      	cmp	r3, #3
 8007b14:	f040 8098 	bne.w	8007c48 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	689a      	ldr	r2, [r3, #8]
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d913      	bls.n	8007b4c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	689a      	ldr	r2, [r3, #8]
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	1ad2      	subs	r2, r2, r3
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	68da      	ldr	r2, [r3, #12]
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	bf28      	it	cs
 8007b3e:	4613      	movcs	r3, r2
 8007b40:	461a      	mov	r2, r3
 8007b42:	6879      	ldr	r1, [r7, #4]
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	f001 f9ae 	bl	8008ea6 <USBD_CtlContinueRx>
 8007b4a:	e07d      	b.n	8007c48 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007b52:	f003 031f 	and.w	r3, r3, #31
 8007b56:	2b02      	cmp	r3, #2
 8007b58:	d014      	beq.n	8007b84 <USBD_LL_DataOutStage+0x98>
 8007b5a:	2b02      	cmp	r3, #2
 8007b5c:	d81d      	bhi.n	8007b9a <USBD_LL_DataOutStage+0xae>
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d002      	beq.n	8007b68 <USBD_LL_DataOutStage+0x7c>
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d003      	beq.n	8007b6e <USBD_LL_DataOutStage+0x82>
 8007b66:	e018      	b.n	8007b9a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	75bb      	strb	r3, [r7, #22]
            break;
 8007b6c:	e018      	b.n	8007ba0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	4619      	mov	r1, r3
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f000 fa5e 	bl	800803a <USBD_CoreFindIF>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	75bb      	strb	r3, [r7, #22]
            break;
 8007b82:	e00d      	b.n	8007ba0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f000 fa60 	bl	8008054 <USBD_CoreFindEP>
 8007b94:	4603      	mov	r3, r0
 8007b96:	75bb      	strb	r3, [r7, #22]
            break;
 8007b98:	e002      	b.n	8007ba0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	75bb      	strb	r3, [r7, #22]
            break;
 8007b9e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007ba0:	7dbb      	ldrb	r3, [r7, #22]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d119      	bne.n	8007bda <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	2b03      	cmp	r3, #3
 8007bb0:	d113      	bne.n	8007bda <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007bb2:	7dba      	ldrb	r2, [r7, #22]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	32ae      	adds	r2, #174	; 0xae
 8007bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00b      	beq.n	8007bda <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007bc2:	7dba      	ldrb	r2, [r7, #22]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007bca:	7dba      	ldrb	r2, [r7, #22]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	32ae      	adds	r2, #174	; 0xae
 8007bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f001 f974 	bl	8008ec8 <USBD_CtlSendStatus>
 8007be0:	e032      	b.n	8007c48 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007be2:	7afb      	ldrb	r3, [r7, #11]
 8007be4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	4619      	mov	r1, r3
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f000 fa31 	bl	8008054 <USBD_CoreFindEP>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bf6:	7dbb      	ldrb	r3, [r7, #22]
 8007bf8:	2bff      	cmp	r3, #255	; 0xff
 8007bfa:	d025      	beq.n	8007c48 <USBD_LL_DataOutStage+0x15c>
 8007bfc:	7dbb      	ldrb	r3, [r7, #22]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d122      	bne.n	8007c48 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	2b03      	cmp	r3, #3
 8007c0c:	d117      	bne.n	8007c3e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007c0e:	7dba      	ldrb	r2, [r7, #22]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	32ae      	adds	r2, #174	; 0xae
 8007c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c18:	699b      	ldr	r3, [r3, #24]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00f      	beq.n	8007c3e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007c1e:	7dba      	ldrb	r2, [r7, #22]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007c26:	7dba      	ldrb	r2, [r7, #22]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	32ae      	adds	r2, #174	; 0xae
 8007c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c30:	699b      	ldr	r3, [r3, #24]
 8007c32:	7afa      	ldrb	r2, [r7, #11]
 8007c34:	4611      	mov	r1, r2
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	4798      	blx	r3
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007c3e:	7dfb      	ldrb	r3, [r7, #23]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d001      	beq.n	8007c48 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007c44:	7dfb      	ldrb	r3, [r7, #23]
 8007c46:	e000      	b.n	8007c4a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3718      	adds	r7, #24
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b086      	sub	sp, #24
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	60f8      	str	r0, [r7, #12]
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	607a      	str	r2, [r7, #4]
 8007c5e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007c60:	7afb      	ldrb	r3, [r7, #11]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d16f      	bne.n	8007d46 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	3314      	adds	r3, #20
 8007c6a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d15a      	bne.n	8007d2c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	689a      	ldr	r2, [r3, #8]
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d914      	bls.n	8007cac <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	689a      	ldr	r2, [r3, #8]
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	1ad2      	subs	r2, r2, r3
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	461a      	mov	r2, r3
 8007c96:	6879      	ldr	r1, [r7, #4]
 8007c98:	68f8      	ldr	r0, [r7, #12]
 8007c9a:	f001 f8d6 	bl	8008e4a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	f001 ff1f 	bl	8009ae8 <USBD_LL_PrepareReceive>
 8007caa:	e03f      	b.n	8007d2c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	68da      	ldr	r2, [r3, #12]
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d11c      	bne.n	8007cf2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	685a      	ldr	r2, [r3, #4]
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d316      	bcc.n	8007cf2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	685a      	ldr	r2, [r3, #4]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d20f      	bcs.n	8007cf2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	f001 f8b7 	bl	8008e4a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	2100      	movs	r1, #0
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f001 fefc 	bl	8009ae8 <USBD_LL_PrepareReceive>
 8007cf0:	e01c      	b.n	8007d2c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	2b03      	cmp	r3, #3
 8007cfc:	d10f      	bne.n	8007d1e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d009      	beq.n	8007d1e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d1e:	2180      	movs	r1, #128	; 0x80
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f001 fe37 	bl	8009994 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	f001 f8e1 	bl	8008eee <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d03a      	beq.n	8007dac <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f7ff fe42 	bl	80079c0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007d44:	e032      	b.n	8007dac <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007d46:	7afb      	ldrb	r3, [r7, #11]
 8007d48:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	4619      	mov	r1, r3
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f000 f97f 	bl	8008054 <USBD_CoreFindEP>
 8007d56:	4603      	mov	r3, r0
 8007d58:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d5a:	7dfb      	ldrb	r3, [r7, #23]
 8007d5c:	2bff      	cmp	r3, #255	; 0xff
 8007d5e:	d025      	beq.n	8007dac <USBD_LL_DataInStage+0x15a>
 8007d60:	7dfb      	ldrb	r3, [r7, #23]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d122      	bne.n	8007dac <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	2b03      	cmp	r3, #3
 8007d70:	d11c      	bne.n	8007dac <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007d72:	7dfa      	ldrb	r2, [r7, #23]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	32ae      	adds	r2, #174	; 0xae
 8007d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d7c:	695b      	ldr	r3, [r3, #20]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d014      	beq.n	8007dac <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007d82:	7dfa      	ldrb	r2, [r7, #23]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007d8a:	7dfa      	ldrb	r2, [r7, #23]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	32ae      	adds	r2, #174	; 0xae
 8007d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d94:	695b      	ldr	r3, [r3, #20]
 8007d96:	7afa      	ldrb	r2, [r7, #11]
 8007d98:	4611      	mov	r1, r2
 8007d9a:	68f8      	ldr	r0, [r7, #12]
 8007d9c:	4798      	blx	r3
 8007d9e:	4603      	mov	r3, r0
 8007da0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007da2:	7dbb      	ldrb	r3, [r7, #22]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d001      	beq.n	8007dac <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007da8:	7dbb      	ldrb	r3, [r7, #22]
 8007daa:	e000      	b.n	8007dae <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3718      	adds	r7, #24
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b084      	sub	sp, #16
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d014      	beq.n	8007e1c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00e      	beq.n	8007e1c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	6852      	ldr	r2, [r2, #4]
 8007e0a:	b2d2      	uxtb	r2, r2
 8007e0c:	4611      	mov	r1, r2
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	4798      	blx	r3
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d001      	beq.n	8007e1c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007e18:	2303      	movs	r3, #3
 8007e1a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e1c:	2340      	movs	r3, #64	; 0x40
 8007e1e:	2200      	movs	r2, #0
 8007e20:	2100      	movs	r1, #0
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f001 fd71 	bl	800990a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2240      	movs	r2, #64	; 0x40
 8007e34:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e38:	2340      	movs	r3, #64	; 0x40
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	2180      	movs	r1, #128	; 0x80
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f001 fd63 	bl	800990a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2240      	movs	r2, #64	; 0x40
 8007e4e:	621a      	str	r2, [r3, #32]

  return ret;
 8007e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007e5a:	b480      	push	{r7}
 8007e5c:	b083      	sub	sp, #12
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
 8007e62:	460b      	mov	r3, r1
 8007e64:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	78fa      	ldrb	r2, [r7, #3]
 8007e6a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	370c      	adds	r7, #12
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr

08007e7a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007e7a:	b480      	push	{r7}
 8007e7c:	b083      	sub	sp, #12
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e88:	b2da      	uxtb	r2, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2204      	movs	r2, #4
 8007e94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	370c      	adds	r7, #12
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr

08007ea6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	b083      	sub	sp, #12
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	2b04      	cmp	r3, #4
 8007eb8:	d106      	bne.n	8007ec8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007ec0:	b2da      	uxtb	r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	370c      	adds	r7, #12
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b082      	sub	sp, #8
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b03      	cmp	r3, #3
 8007ee8:	d110      	bne.n	8007f0c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00b      	beq.n	8007f0c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007efa:	69db      	ldr	r3, [r3, #28]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d005      	beq.n	8007f0c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f06:	69db      	ldr	r3, [r3, #28]
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3708      	adds	r7, #8
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b082      	sub	sp, #8
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
 8007f1e:	460b      	mov	r3, r1
 8007f20:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	32ae      	adds	r2, #174	; 0xae
 8007f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d101      	bne.n	8007f38 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007f34:	2303      	movs	r3, #3
 8007f36:	e01c      	b.n	8007f72 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	2b03      	cmp	r3, #3
 8007f42:	d115      	bne.n	8007f70 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	32ae      	adds	r2, #174	; 0xae
 8007f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f52:	6a1b      	ldr	r3, [r3, #32]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d00b      	beq.n	8007f70 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	32ae      	adds	r2, #174	; 0xae
 8007f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f66:	6a1b      	ldr	r3, [r3, #32]
 8007f68:	78fa      	ldrb	r2, [r7, #3]
 8007f6a:	4611      	mov	r1, r2
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3708      	adds	r7, #8
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b082      	sub	sp, #8
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
 8007f82:	460b      	mov	r3, r1
 8007f84:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	32ae      	adds	r2, #174	; 0xae
 8007f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d101      	bne.n	8007f9c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	e01c      	b.n	8007fd6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	2b03      	cmp	r3, #3
 8007fa6:	d115      	bne.n	8007fd4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	32ae      	adds	r2, #174	; 0xae
 8007fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00b      	beq.n	8007fd4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	32ae      	adds	r2, #174	; 0xae
 8007fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fcc:	78fa      	ldrb	r2, [r7, #3]
 8007fce:	4611      	mov	r1, r2
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3708      	adds	r7, #8
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007fde:	b480      	push	{r7}
 8007fe0:	b083      	sub	sp, #12
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00e      	beq.n	8008030 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	6852      	ldr	r2, [r2, #4]
 800801e:	b2d2      	uxtb	r2, r2
 8008020:	4611      	mov	r1, r2
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	4798      	blx	r3
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d001      	beq.n	8008030 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800802c:	2303      	movs	r3, #3
 800802e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008030:	7bfb      	ldrb	r3, [r7, #15]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800803a:	b480      	push	{r7}
 800803c:	b083      	sub	sp, #12
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
 8008042:	460b      	mov	r3, r1
 8008044:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008046:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008048:	4618      	mov	r0, r3
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	460b      	mov	r3, r1
 800805e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008060:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008062:	4618      	mov	r0, r3
 8008064:	370c      	adds	r7, #12
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr

0800806e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b086      	sub	sp, #24
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
 8008076:	460b      	mov	r3, r1
 8008078:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008082:	2300      	movs	r3, #0
 8008084:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	885b      	ldrh	r3, [r3, #2]
 800808a:	b29a      	uxth	r2, r3
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	b29b      	uxth	r3, r3
 8008092:	429a      	cmp	r2, r3
 8008094:	d920      	bls.n	80080d8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	b29b      	uxth	r3, r3
 800809c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800809e:	e013      	b.n	80080c8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80080a0:	f107 030a 	add.w	r3, r7, #10
 80080a4:	4619      	mov	r1, r3
 80080a6:	6978      	ldr	r0, [r7, #20]
 80080a8:	f000 f81b 	bl	80080e2 <USBD_GetNextDesc>
 80080ac:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	785b      	ldrb	r3, [r3, #1]
 80080b2:	2b05      	cmp	r3, #5
 80080b4:	d108      	bne.n	80080c8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	789b      	ldrb	r3, [r3, #2]
 80080be:	78fa      	ldrb	r2, [r7, #3]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d008      	beq.n	80080d6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80080c4:	2300      	movs	r3, #0
 80080c6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	885b      	ldrh	r3, [r3, #2]
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	897b      	ldrh	r3, [r7, #10]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d8e5      	bhi.n	80080a0 <USBD_GetEpDesc+0x32>
 80080d4:	e000      	b.n	80080d8 <USBD_GetEpDesc+0x6a>
          break;
 80080d6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80080d8:	693b      	ldr	r3, [r7, #16]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3718      	adds	r7, #24
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80080e2:	b480      	push	{r7}
 80080e4:	b085      	sub	sp, #20
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
 80080ea:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	881a      	ldrh	r2, [r3, #0]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	4413      	add	r3, r2
 80080fc:	b29a      	uxth	r2, r3
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	461a      	mov	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4413      	add	r3, r2
 800810c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800810e:	68fb      	ldr	r3, [r7, #12]
}
 8008110:	4618      	mov	r0, r3
 8008112:	3714      	adds	r7, #20
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800811c:	b480      	push	{r7}
 800811e:	b087      	sub	sp, #28
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	3301      	adds	r3, #1
 8008132:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800813a:	8a3b      	ldrh	r3, [r7, #16]
 800813c:	021b      	lsls	r3, r3, #8
 800813e:	b21a      	sxth	r2, r3
 8008140:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008144:	4313      	orrs	r3, r2
 8008146:	b21b      	sxth	r3, r3
 8008148:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800814a:	89fb      	ldrh	r3, [r7, #14]
}
 800814c:	4618      	mov	r0, r3
 800814e:	371c      	adds	r7, #28
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008162:	2300      	movs	r3, #0
 8008164:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800816e:	2b40      	cmp	r3, #64	; 0x40
 8008170:	d005      	beq.n	800817e <USBD_StdDevReq+0x26>
 8008172:	2b40      	cmp	r3, #64	; 0x40
 8008174:	d857      	bhi.n	8008226 <USBD_StdDevReq+0xce>
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00f      	beq.n	800819a <USBD_StdDevReq+0x42>
 800817a:	2b20      	cmp	r3, #32
 800817c:	d153      	bne.n	8008226 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	32ae      	adds	r2, #174	; 0xae
 8008188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	6839      	ldr	r1, [r7, #0]
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	4798      	blx	r3
 8008194:	4603      	mov	r3, r0
 8008196:	73fb      	strb	r3, [r7, #15]
      break;
 8008198:	e04a      	b.n	8008230 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	785b      	ldrb	r3, [r3, #1]
 800819e:	2b09      	cmp	r3, #9
 80081a0:	d83b      	bhi.n	800821a <USBD_StdDevReq+0xc2>
 80081a2:	a201      	add	r2, pc, #4	; (adr r2, 80081a8 <USBD_StdDevReq+0x50>)
 80081a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a8:	080081fd 	.word	0x080081fd
 80081ac:	08008211 	.word	0x08008211
 80081b0:	0800821b 	.word	0x0800821b
 80081b4:	08008207 	.word	0x08008207
 80081b8:	0800821b 	.word	0x0800821b
 80081bc:	080081db 	.word	0x080081db
 80081c0:	080081d1 	.word	0x080081d1
 80081c4:	0800821b 	.word	0x0800821b
 80081c8:	080081f3 	.word	0x080081f3
 80081cc:	080081e5 	.word	0x080081e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80081d0:	6839      	ldr	r1, [r7, #0]
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 fa3c 	bl	8008650 <USBD_GetDescriptor>
          break;
 80081d8:	e024      	b.n	8008224 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80081da:	6839      	ldr	r1, [r7, #0]
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 fbcb 	bl	8008978 <USBD_SetAddress>
          break;
 80081e2:	e01f      	b.n	8008224 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80081e4:	6839      	ldr	r1, [r7, #0]
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 fc0a 	bl	8008a00 <USBD_SetConfig>
 80081ec:	4603      	mov	r3, r0
 80081ee:	73fb      	strb	r3, [r7, #15]
          break;
 80081f0:	e018      	b.n	8008224 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80081f2:	6839      	ldr	r1, [r7, #0]
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 fcad 	bl	8008b54 <USBD_GetConfig>
          break;
 80081fa:	e013      	b.n	8008224 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80081fc:	6839      	ldr	r1, [r7, #0]
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 fcde 	bl	8008bc0 <USBD_GetStatus>
          break;
 8008204:	e00e      	b.n	8008224 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008206:	6839      	ldr	r1, [r7, #0]
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 fd0d 	bl	8008c28 <USBD_SetFeature>
          break;
 800820e:	e009      	b.n	8008224 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008210:	6839      	ldr	r1, [r7, #0]
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 fd31 	bl	8008c7a <USBD_ClrFeature>
          break;
 8008218:	e004      	b.n	8008224 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800821a:	6839      	ldr	r1, [r7, #0]
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 fd88 	bl	8008d32 <USBD_CtlError>
          break;
 8008222:	bf00      	nop
      }
      break;
 8008224:	e004      	b.n	8008230 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008226:	6839      	ldr	r1, [r7, #0]
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 fd82 	bl	8008d32 <USBD_CtlError>
      break;
 800822e:	bf00      	nop
  }

  return ret;
 8008230:	7bfb      	ldrb	r3, [r7, #15]
}
 8008232:	4618      	mov	r0, r3
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop

0800823c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008246:	2300      	movs	r3, #0
 8008248:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008252:	2b40      	cmp	r3, #64	; 0x40
 8008254:	d005      	beq.n	8008262 <USBD_StdItfReq+0x26>
 8008256:	2b40      	cmp	r3, #64	; 0x40
 8008258:	d852      	bhi.n	8008300 <USBD_StdItfReq+0xc4>
 800825a:	2b00      	cmp	r3, #0
 800825c:	d001      	beq.n	8008262 <USBD_StdItfReq+0x26>
 800825e:	2b20      	cmp	r3, #32
 8008260:	d14e      	bne.n	8008300 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008268:	b2db      	uxtb	r3, r3
 800826a:	3b01      	subs	r3, #1
 800826c:	2b02      	cmp	r3, #2
 800826e:	d840      	bhi.n	80082f2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	889b      	ldrh	r3, [r3, #4]
 8008274:	b2db      	uxtb	r3, r3
 8008276:	2b01      	cmp	r3, #1
 8008278:	d836      	bhi.n	80082e8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	889b      	ldrh	r3, [r3, #4]
 800827e:	b2db      	uxtb	r3, r3
 8008280:	4619      	mov	r1, r3
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f7ff fed9 	bl	800803a <USBD_CoreFindIF>
 8008288:	4603      	mov	r3, r0
 800828a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800828c:	7bbb      	ldrb	r3, [r7, #14]
 800828e:	2bff      	cmp	r3, #255	; 0xff
 8008290:	d01d      	beq.n	80082ce <USBD_StdItfReq+0x92>
 8008292:	7bbb      	ldrb	r3, [r7, #14]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d11a      	bne.n	80082ce <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008298:	7bba      	ldrb	r2, [r7, #14]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	32ae      	adds	r2, #174	; 0xae
 800829e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d00f      	beq.n	80082c8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80082a8:	7bba      	ldrb	r2, [r7, #14]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80082b0:	7bba      	ldrb	r2, [r7, #14]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	32ae      	adds	r2, #174	; 0xae
 80082b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	6839      	ldr	r1, [r7, #0]
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	4798      	blx	r3
 80082c2:	4603      	mov	r3, r0
 80082c4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80082c6:	e004      	b.n	80082d2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80082c8:	2303      	movs	r3, #3
 80082ca:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80082cc:	e001      	b.n	80082d2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80082ce:	2303      	movs	r3, #3
 80082d0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	88db      	ldrh	r3, [r3, #6]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d110      	bne.n	80082fc <USBD_StdItfReq+0xc0>
 80082da:	7bfb      	ldrb	r3, [r7, #15]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d10d      	bne.n	80082fc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 fdf1 	bl	8008ec8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80082e6:	e009      	b.n	80082fc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80082e8:	6839      	ldr	r1, [r7, #0]
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 fd21 	bl	8008d32 <USBD_CtlError>
          break;
 80082f0:	e004      	b.n	80082fc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80082f2:	6839      	ldr	r1, [r7, #0]
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 fd1c 	bl	8008d32 <USBD_CtlError>
          break;
 80082fa:	e000      	b.n	80082fe <USBD_StdItfReq+0xc2>
          break;
 80082fc:	bf00      	nop
      }
      break;
 80082fe:	e004      	b.n	800830a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008300:	6839      	ldr	r1, [r7, #0]
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 fd15 	bl	8008d32 <USBD_CtlError>
      break;
 8008308:	bf00      	nop
  }

  return ret;
 800830a:	7bfb      	ldrb	r3, [r7, #15]
}
 800830c:	4618      	mov	r0, r3
 800830e:	3710      	adds	r7, #16
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800831e:	2300      	movs	r3, #0
 8008320:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	889b      	ldrh	r3, [r3, #4]
 8008326:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008330:	2b40      	cmp	r3, #64	; 0x40
 8008332:	d007      	beq.n	8008344 <USBD_StdEPReq+0x30>
 8008334:	2b40      	cmp	r3, #64	; 0x40
 8008336:	f200 817f 	bhi.w	8008638 <USBD_StdEPReq+0x324>
 800833a:	2b00      	cmp	r3, #0
 800833c:	d02a      	beq.n	8008394 <USBD_StdEPReq+0x80>
 800833e:	2b20      	cmp	r3, #32
 8008340:	f040 817a 	bne.w	8008638 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008344:	7bbb      	ldrb	r3, [r7, #14]
 8008346:	4619      	mov	r1, r3
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f7ff fe83 	bl	8008054 <USBD_CoreFindEP>
 800834e:	4603      	mov	r3, r0
 8008350:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008352:	7b7b      	ldrb	r3, [r7, #13]
 8008354:	2bff      	cmp	r3, #255	; 0xff
 8008356:	f000 8174 	beq.w	8008642 <USBD_StdEPReq+0x32e>
 800835a:	7b7b      	ldrb	r3, [r7, #13]
 800835c:	2b00      	cmp	r3, #0
 800835e:	f040 8170 	bne.w	8008642 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008362:	7b7a      	ldrb	r2, [r7, #13]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800836a:	7b7a      	ldrb	r2, [r7, #13]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	32ae      	adds	r2, #174	; 0xae
 8008370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	2b00      	cmp	r3, #0
 8008378:	f000 8163 	beq.w	8008642 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800837c:	7b7a      	ldrb	r2, [r7, #13]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	32ae      	adds	r2, #174	; 0xae
 8008382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	6839      	ldr	r1, [r7, #0]
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	4798      	blx	r3
 800838e:	4603      	mov	r3, r0
 8008390:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008392:	e156      	b.n	8008642 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	785b      	ldrb	r3, [r3, #1]
 8008398:	2b03      	cmp	r3, #3
 800839a:	d008      	beq.n	80083ae <USBD_StdEPReq+0x9a>
 800839c:	2b03      	cmp	r3, #3
 800839e:	f300 8145 	bgt.w	800862c <USBD_StdEPReq+0x318>
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f000 809b 	beq.w	80084de <USBD_StdEPReq+0x1ca>
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d03c      	beq.n	8008426 <USBD_StdEPReq+0x112>
 80083ac:	e13e      	b.n	800862c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	d002      	beq.n	80083c0 <USBD_StdEPReq+0xac>
 80083ba:	2b03      	cmp	r3, #3
 80083bc:	d016      	beq.n	80083ec <USBD_StdEPReq+0xd8>
 80083be:	e02c      	b.n	800841a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083c0:	7bbb      	ldrb	r3, [r7, #14]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00d      	beq.n	80083e2 <USBD_StdEPReq+0xce>
 80083c6:	7bbb      	ldrb	r3, [r7, #14]
 80083c8:	2b80      	cmp	r3, #128	; 0x80
 80083ca:	d00a      	beq.n	80083e2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80083cc:	7bbb      	ldrb	r3, [r7, #14]
 80083ce:	4619      	mov	r1, r3
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f001 fadf 	bl	8009994 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80083d6:	2180      	movs	r1, #128	; 0x80
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f001 fadb 	bl	8009994 <USBD_LL_StallEP>
 80083de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80083e0:	e020      	b.n	8008424 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80083e2:	6839      	ldr	r1, [r7, #0]
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 fca4 	bl	8008d32 <USBD_CtlError>
              break;
 80083ea:	e01b      	b.n	8008424 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	885b      	ldrh	r3, [r3, #2]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d10e      	bne.n	8008412 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80083f4:	7bbb      	ldrb	r3, [r7, #14]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00b      	beq.n	8008412 <USBD_StdEPReq+0xfe>
 80083fa:	7bbb      	ldrb	r3, [r7, #14]
 80083fc:	2b80      	cmp	r3, #128	; 0x80
 80083fe:	d008      	beq.n	8008412 <USBD_StdEPReq+0xfe>
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	88db      	ldrh	r3, [r3, #6]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d104      	bne.n	8008412 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008408:	7bbb      	ldrb	r3, [r7, #14]
 800840a:	4619      	mov	r1, r3
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f001 fac1 	bl	8009994 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 fd58 	bl	8008ec8 <USBD_CtlSendStatus>

              break;
 8008418:	e004      	b.n	8008424 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800841a:	6839      	ldr	r1, [r7, #0]
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 fc88 	bl	8008d32 <USBD_CtlError>
              break;
 8008422:	bf00      	nop
          }
          break;
 8008424:	e107      	b.n	8008636 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800842c:	b2db      	uxtb	r3, r3
 800842e:	2b02      	cmp	r3, #2
 8008430:	d002      	beq.n	8008438 <USBD_StdEPReq+0x124>
 8008432:	2b03      	cmp	r3, #3
 8008434:	d016      	beq.n	8008464 <USBD_StdEPReq+0x150>
 8008436:	e04b      	b.n	80084d0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008438:	7bbb      	ldrb	r3, [r7, #14]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00d      	beq.n	800845a <USBD_StdEPReq+0x146>
 800843e:	7bbb      	ldrb	r3, [r7, #14]
 8008440:	2b80      	cmp	r3, #128	; 0x80
 8008442:	d00a      	beq.n	800845a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008444:	7bbb      	ldrb	r3, [r7, #14]
 8008446:	4619      	mov	r1, r3
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f001 faa3 	bl	8009994 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800844e:	2180      	movs	r1, #128	; 0x80
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f001 fa9f 	bl	8009994 <USBD_LL_StallEP>
 8008456:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008458:	e040      	b.n	80084dc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800845a:	6839      	ldr	r1, [r7, #0]
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 fc68 	bl	8008d32 <USBD_CtlError>
              break;
 8008462:	e03b      	b.n	80084dc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	885b      	ldrh	r3, [r3, #2]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d136      	bne.n	80084da <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800846c:	7bbb      	ldrb	r3, [r7, #14]
 800846e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008472:	2b00      	cmp	r3, #0
 8008474:	d004      	beq.n	8008480 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008476:	7bbb      	ldrb	r3, [r7, #14]
 8008478:	4619      	mov	r1, r3
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f001 faa9 	bl	80099d2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 fd21 	bl	8008ec8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008486:	7bbb      	ldrb	r3, [r7, #14]
 8008488:	4619      	mov	r1, r3
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f7ff fde2 	bl	8008054 <USBD_CoreFindEP>
 8008490:	4603      	mov	r3, r0
 8008492:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008494:	7b7b      	ldrb	r3, [r7, #13]
 8008496:	2bff      	cmp	r3, #255	; 0xff
 8008498:	d01f      	beq.n	80084da <USBD_StdEPReq+0x1c6>
 800849a:	7b7b      	ldrb	r3, [r7, #13]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d11c      	bne.n	80084da <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80084a0:	7b7a      	ldrb	r2, [r7, #13]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80084a8:	7b7a      	ldrb	r2, [r7, #13]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	32ae      	adds	r2, #174	; 0xae
 80084ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d010      	beq.n	80084da <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80084b8:	7b7a      	ldrb	r2, [r7, #13]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	32ae      	adds	r2, #174	; 0xae
 80084be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	6839      	ldr	r1, [r7, #0]
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	4798      	blx	r3
 80084ca:	4603      	mov	r3, r0
 80084cc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80084ce:	e004      	b.n	80084da <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80084d0:	6839      	ldr	r1, [r7, #0]
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 fc2d 	bl	8008d32 <USBD_CtlError>
              break;
 80084d8:	e000      	b.n	80084dc <USBD_StdEPReq+0x1c8>
              break;
 80084da:	bf00      	nop
          }
          break;
 80084dc:	e0ab      	b.n	8008636 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	2b02      	cmp	r3, #2
 80084e8:	d002      	beq.n	80084f0 <USBD_StdEPReq+0x1dc>
 80084ea:	2b03      	cmp	r3, #3
 80084ec:	d032      	beq.n	8008554 <USBD_StdEPReq+0x240>
 80084ee:	e097      	b.n	8008620 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084f0:	7bbb      	ldrb	r3, [r7, #14]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d007      	beq.n	8008506 <USBD_StdEPReq+0x1f2>
 80084f6:	7bbb      	ldrb	r3, [r7, #14]
 80084f8:	2b80      	cmp	r3, #128	; 0x80
 80084fa:	d004      	beq.n	8008506 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80084fc:	6839      	ldr	r1, [r7, #0]
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 fc17 	bl	8008d32 <USBD_CtlError>
                break;
 8008504:	e091      	b.n	800862a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008506:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800850a:	2b00      	cmp	r3, #0
 800850c:	da0b      	bge.n	8008526 <USBD_StdEPReq+0x212>
 800850e:	7bbb      	ldrb	r3, [r7, #14]
 8008510:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008514:	4613      	mov	r3, r2
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	4413      	add	r3, r2
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	3310      	adds	r3, #16
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	4413      	add	r3, r2
 8008522:	3304      	adds	r3, #4
 8008524:	e00b      	b.n	800853e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008526:	7bbb      	ldrb	r3, [r7, #14]
 8008528:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800852c:	4613      	mov	r3, r2
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	4413      	add	r3, r2
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	4413      	add	r3, r2
 800853c:	3304      	adds	r3, #4
 800853e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	2200      	movs	r2, #0
 8008544:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	2202      	movs	r2, #2
 800854a:	4619      	mov	r1, r3
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 fc61 	bl	8008e14 <USBD_CtlSendData>
              break;
 8008552:	e06a      	b.n	800862a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008554:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008558:	2b00      	cmp	r3, #0
 800855a:	da11      	bge.n	8008580 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800855c:	7bbb      	ldrb	r3, [r7, #14]
 800855e:	f003 020f 	and.w	r2, r3, #15
 8008562:	6879      	ldr	r1, [r7, #4]
 8008564:	4613      	mov	r3, r2
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	4413      	add	r3, r2
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	440b      	add	r3, r1
 800856e:	3324      	adds	r3, #36	; 0x24
 8008570:	881b      	ldrh	r3, [r3, #0]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d117      	bne.n	80085a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008576:	6839      	ldr	r1, [r7, #0]
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 fbda 	bl	8008d32 <USBD_CtlError>
                  break;
 800857e:	e054      	b.n	800862a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008580:	7bbb      	ldrb	r3, [r7, #14]
 8008582:	f003 020f 	and.w	r2, r3, #15
 8008586:	6879      	ldr	r1, [r7, #4]
 8008588:	4613      	mov	r3, r2
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	4413      	add	r3, r2
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	440b      	add	r3, r1
 8008592:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008596:	881b      	ldrh	r3, [r3, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d104      	bne.n	80085a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800859c:	6839      	ldr	r1, [r7, #0]
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 fbc7 	bl	8008d32 <USBD_CtlError>
                  break;
 80085a4:	e041      	b.n	800862a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	da0b      	bge.n	80085c6 <USBD_StdEPReq+0x2b2>
 80085ae:	7bbb      	ldrb	r3, [r7, #14]
 80085b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085b4:	4613      	mov	r3, r2
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	4413      	add	r3, r2
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	3310      	adds	r3, #16
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	4413      	add	r3, r2
 80085c2:	3304      	adds	r3, #4
 80085c4:	e00b      	b.n	80085de <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80085c6:	7bbb      	ldrb	r3, [r7, #14]
 80085c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085cc:	4613      	mov	r3, r2
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	4413      	add	r3, r2
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	4413      	add	r3, r2
 80085dc:	3304      	adds	r3, #4
 80085de:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80085e0:	7bbb      	ldrb	r3, [r7, #14]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d002      	beq.n	80085ec <USBD_StdEPReq+0x2d8>
 80085e6:	7bbb      	ldrb	r3, [r7, #14]
 80085e8:	2b80      	cmp	r3, #128	; 0x80
 80085ea:	d103      	bne.n	80085f4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	2200      	movs	r2, #0
 80085f0:	601a      	str	r2, [r3, #0]
 80085f2:	e00e      	b.n	8008612 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80085f4:	7bbb      	ldrb	r3, [r7, #14]
 80085f6:	4619      	mov	r1, r3
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f001 fa09 	bl	8009a10 <USBD_LL_IsStallEP>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d003      	beq.n	800860c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	2201      	movs	r2, #1
 8008608:	601a      	str	r2, [r3, #0]
 800860a:	e002      	b.n	8008612 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	2200      	movs	r2, #0
 8008610:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	2202      	movs	r2, #2
 8008616:	4619      	mov	r1, r3
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 fbfb 	bl	8008e14 <USBD_CtlSendData>
              break;
 800861e:	e004      	b.n	800862a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008620:	6839      	ldr	r1, [r7, #0]
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 fb85 	bl	8008d32 <USBD_CtlError>
              break;
 8008628:	bf00      	nop
          }
          break;
 800862a:	e004      	b.n	8008636 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800862c:	6839      	ldr	r1, [r7, #0]
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 fb7f 	bl	8008d32 <USBD_CtlError>
          break;
 8008634:	bf00      	nop
      }
      break;
 8008636:	e005      	b.n	8008644 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008638:	6839      	ldr	r1, [r7, #0]
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 fb79 	bl	8008d32 <USBD_CtlError>
      break;
 8008640:	e000      	b.n	8008644 <USBD_StdEPReq+0x330>
      break;
 8008642:	bf00      	nop
  }

  return ret;
 8008644:	7bfb      	ldrb	r3, [r7, #15]
}
 8008646:	4618      	mov	r0, r3
 8008648:	3710      	adds	r7, #16
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
	...

08008650 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800865a:	2300      	movs	r3, #0
 800865c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800865e:	2300      	movs	r3, #0
 8008660:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008662:	2300      	movs	r3, #0
 8008664:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	885b      	ldrh	r3, [r3, #2]
 800866a:	0a1b      	lsrs	r3, r3, #8
 800866c:	b29b      	uxth	r3, r3
 800866e:	3b01      	subs	r3, #1
 8008670:	2b0e      	cmp	r3, #14
 8008672:	f200 8152 	bhi.w	800891a <USBD_GetDescriptor+0x2ca>
 8008676:	a201      	add	r2, pc, #4	; (adr r2, 800867c <USBD_GetDescriptor+0x2c>)
 8008678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800867c:	080086ed 	.word	0x080086ed
 8008680:	08008705 	.word	0x08008705
 8008684:	08008745 	.word	0x08008745
 8008688:	0800891b 	.word	0x0800891b
 800868c:	0800891b 	.word	0x0800891b
 8008690:	080088bb 	.word	0x080088bb
 8008694:	080088e7 	.word	0x080088e7
 8008698:	0800891b 	.word	0x0800891b
 800869c:	0800891b 	.word	0x0800891b
 80086a0:	0800891b 	.word	0x0800891b
 80086a4:	0800891b 	.word	0x0800891b
 80086a8:	0800891b 	.word	0x0800891b
 80086ac:	0800891b 	.word	0x0800891b
 80086b0:	0800891b 	.word	0x0800891b
 80086b4:	080086b9 	.word	0x080086b9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086be:	69db      	ldr	r3, [r3, #28]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d00b      	beq.n	80086dc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ca:	69db      	ldr	r3, [r3, #28]
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	7c12      	ldrb	r2, [r2, #16]
 80086d0:	f107 0108 	add.w	r1, r7, #8
 80086d4:	4610      	mov	r0, r2
 80086d6:	4798      	blx	r3
 80086d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086da:	e126      	b.n	800892a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80086dc:	6839      	ldr	r1, [r7, #0]
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 fb27 	bl	8008d32 <USBD_CtlError>
        err++;
 80086e4:	7afb      	ldrb	r3, [r7, #11]
 80086e6:	3301      	adds	r3, #1
 80086e8:	72fb      	strb	r3, [r7, #11]
      break;
 80086ea:	e11e      	b.n	800892a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	7c12      	ldrb	r2, [r2, #16]
 80086f8:	f107 0108 	add.w	r1, r7, #8
 80086fc:	4610      	mov	r0, r2
 80086fe:	4798      	blx	r3
 8008700:	60f8      	str	r0, [r7, #12]
      break;
 8008702:	e112      	b.n	800892a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	7c1b      	ldrb	r3, [r3, #16]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d10d      	bne.n	8008728 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008714:	f107 0208 	add.w	r2, r7, #8
 8008718:	4610      	mov	r0, r2
 800871a:	4798      	blx	r3
 800871c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	3301      	adds	r3, #1
 8008722:	2202      	movs	r2, #2
 8008724:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008726:	e100      	b.n	800892a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800872e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008730:	f107 0208 	add.w	r2, r7, #8
 8008734:	4610      	mov	r0, r2
 8008736:	4798      	blx	r3
 8008738:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	3301      	adds	r3, #1
 800873e:	2202      	movs	r2, #2
 8008740:	701a      	strb	r2, [r3, #0]
      break;
 8008742:	e0f2      	b.n	800892a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	885b      	ldrh	r3, [r3, #2]
 8008748:	b2db      	uxtb	r3, r3
 800874a:	2b05      	cmp	r3, #5
 800874c:	f200 80ac 	bhi.w	80088a8 <USBD_GetDescriptor+0x258>
 8008750:	a201      	add	r2, pc, #4	; (adr r2, 8008758 <USBD_GetDescriptor+0x108>)
 8008752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008756:	bf00      	nop
 8008758:	08008771 	.word	0x08008771
 800875c:	080087a5 	.word	0x080087a5
 8008760:	080087d9 	.word	0x080087d9
 8008764:	0800880d 	.word	0x0800880d
 8008768:	08008841 	.word	0x08008841
 800876c:	08008875 	.word	0x08008875
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d00b      	beq.n	8008794 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	7c12      	ldrb	r2, [r2, #16]
 8008788:	f107 0108 	add.w	r1, r7, #8
 800878c:	4610      	mov	r0, r2
 800878e:	4798      	blx	r3
 8008790:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008792:	e091      	b.n	80088b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008794:	6839      	ldr	r1, [r7, #0]
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 facb 	bl	8008d32 <USBD_CtlError>
            err++;
 800879c:	7afb      	ldrb	r3, [r7, #11]
 800879e:	3301      	adds	r3, #1
 80087a0:	72fb      	strb	r3, [r7, #11]
          break;
 80087a2:	e089      	b.n	80088b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d00b      	beq.n	80087c8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	7c12      	ldrb	r2, [r2, #16]
 80087bc:	f107 0108 	add.w	r1, r7, #8
 80087c0:	4610      	mov	r0, r2
 80087c2:	4798      	blx	r3
 80087c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087c6:	e077      	b.n	80088b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80087c8:	6839      	ldr	r1, [r7, #0]
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 fab1 	bl	8008d32 <USBD_CtlError>
            err++;
 80087d0:	7afb      	ldrb	r3, [r7, #11]
 80087d2:	3301      	adds	r3, #1
 80087d4:	72fb      	strb	r3, [r7, #11]
          break;
 80087d6:	e06f      	b.n	80088b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087de:	68db      	ldr	r3, [r3, #12]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00b      	beq.n	80087fc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	7c12      	ldrb	r2, [r2, #16]
 80087f0:	f107 0108 	add.w	r1, r7, #8
 80087f4:	4610      	mov	r0, r2
 80087f6:	4798      	blx	r3
 80087f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087fa:	e05d      	b.n	80088b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80087fc:	6839      	ldr	r1, [r7, #0]
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 fa97 	bl	8008d32 <USBD_CtlError>
            err++;
 8008804:	7afb      	ldrb	r3, [r7, #11]
 8008806:	3301      	adds	r3, #1
 8008808:	72fb      	strb	r3, [r7, #11]
          break;
 800880a:	e055      	b.n	80088b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008812:	691b      	ldr	r3, [r3, #16]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d00b      	beq.n	8008830 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800881e:	691b      	ldr	r3, [r3, #16]
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	7c12      	ldrb	r2, [r2, #16]
 8008824:	f107 0108 	add.w	r1, r7, #8
 8008828:	4610      	mov	r0, r2
 800882a:	4798      	blx	r3
 800882c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800882e:	e043      	b.n	80088b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008830:	6839      	ldr	r1, [r7, #0]
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 fa7d 	bl	8008d32 <USBD_CtlError>
            err++;
 8008838:	7afb      	ldrb	r3, [r7, #11]
 800883a:	3301      	adds	r3, #1
 800883c:	72fb      	strb	r3, [r7, #11]
          break;
 800883e:	e03b      	b.n	80088b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008846:	695b      	ldr	r3, [r3, #20]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d00b      	beq.n	8008864 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008852:	695b      	ldr	r3, [r3, #20]
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	7c12      	ldrb	r2, [r2, #16]
 8008858:	f107 0108 	add.w	r1, r7, #8
 800885c:	4610      	mov	r0, r2
 800885e:	4798      	blx	r3
 8008860:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008862:	e029      	b.n	80088b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008864:	6839      	ldr	r1, [r7, #0]
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 fa63 	bl	8008d32 <USBD_CtlError>
            err++;
 800886c:	7afb      	ldrb	r3, [r7, #11]
 800886e:	3301      	adds	r3, #1
 8008870:	72fb      	strb	r3, [r7, #11]
          break;
 8008872:	e021      	b.n	80088b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800887a:	699b      	ldr	r3, [r3, #24]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d00b      	beq.n	8008898 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008886:	699b      	ldr	r3, [r3, #24]
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	7c12      	ldrb	r2, [r2, #16]
 800888c:	f107 0108 	add.w	r1, r7, #8
 8008890:	4610      	mov	r0, r2
 8008892:	4798      	blx	r3
 8008894:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008896:	e00f      	b.n	80088b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008898:	6839      	ldr	r1, [r7, #0]
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 fa49 	bl	8008d32 <USBD_CtlError>
            err++;
 80088a0:	7afb      	ldrb	r3, [r7, #11]
 80088a2:	3301      	adds	r3, #1
 80088a4:	72fb      	strb	r3, [r7, #11]
          break;
 80088a6:	e007      	b.n	80088b8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80088a8:	6839      	ldr	r1, [r7, #0]
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 fa41 	bl	8008d32 <USBD_CtlError>
          err++;
 80088b0:	7afb      	ldrb	r3, [r7, #11]
 80088b2:	3301      	adds	r3, #1
 80088b4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80088b6:	bf00      	nop
      }
      break;
 80088b8:	e037      	b.n	800892a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	7c1b      	ldrb	r3, [r3, #16]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d109      	bne.n	80088d6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ca:	f107 0208 	add.w	r2, r7, #8
 80088ce:	4610      	mov	r0, r2
 80088d0:	4798      	blx	r3
 80088d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088d4:	e029      	b.n	800892a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80088d6:	6839      	ldr	r1, [r7, #0]
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 fa2a 	bl	8008d32 <USBD_CtlError>
        err++;
 80088de:	7afb      	ldrb	r3, [r7, #11]
 80088e0:	3301      	adds	r3, #1
 80088e2:	72fb      	strb	r3, [r7, #11]
      break;
 80088e4:	e021      	b.n	800892a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	7c1b      	ldrb	r3, [r3, #16]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d10d      	bne.n	800890a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f6:	f107 0208 	add.w	r2, r7, #8
 80088fa:	4610      	mov	r0, r2
 80088fc:	4798      	blx	r3
 80088fe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	3301      	adds	r3, #1
 8008904:	2207      	movs	r2, #7
 8008906:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008908:	e00f      	b.n	800892a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800890a:	6839      	ldr	r1, [r7, #0]
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 fa10 	bl	8008d32 <USBD_CtlError>
        err++;
 8008912:	7afb      	ldrb	r3, [r7, #11]
 8008914:	3301      	adds	r3, #1
 8008916:	72fb      	strb	r3, [r7, #11]
      break;
 8008918:	e007      	b.n	800892a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800891a:	6839      	ldr	r1, [r7, #0]
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 fa08 	bl	8008d32 <USBD_CtlError>
      err++;
 8008922:	7afb      	ldrb	r3, [r7, #11]
 8008924:	3301      	adds	r3, #1
 8008926:	72fb      	strb	r3, [r7, #11]
      break;
 8008928:	bf00      	nop
  }

  if (err != 0U)
 800892a:	7afb      	ldrb	r3, [r7, #11]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d11e      	bne.n	800896e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	88db      	ldrh	r3, [r3, #6]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d016      	beq.n	8008966 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008938:	893b      	ldrh	r3, [r7, #8]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d00e      	beq.n	800895c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	88da      	ldrh	r2, [r3, #6]
 8008942:	893b      	ldrh	r3, [r7, #8]
 8008944:	4293      	cmp	r3, r2
 8008946:	bf28      	it	cs
 8008948:	4613      	movcs	r3, r2
 800894a:	b29b      	uxth	r3, r3
 800894c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800894e:	893b      	ldrh	r3, [r7, #8]
 8008950:	461a      	mov	r2, r3
 8008952:	68f9      	ldr	r1, [r7, #12]
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 fa5d 	bl	8008e14 <USBD_CtlSendData>
 800895a:	e009      	b.n	8008970 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800895c:	6839      	ldr	r1, [r7, #0]
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f9e7 	bl	8008d32 <USBD_CtlError>
 8008964:	e004      	b.n	8008970 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 faae 	bl	8008ec8 <USBD_CtlSendStatus>
 800896c:	e000      	b.n	8008970 <USBD_GetDescriptor+0x320>
    return;
 800896e:	bf00      	nop
  }
}
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop

08008978 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	889b      	ldrh	r3, [r3, #4]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d131      	bne.n	80089ee <USBD_SetAddress+0x76>
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	88db      	ldrh	r3, [r3, #6]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d12d      	bne.n	80089ee <USBD_SetAddress+0x76>
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	885b      	ldrh	r3, [r3, #2]
 8008996:	2b7f      	cmp	r3, #127	; 0x7f
 8008998:	d829      	bhi.n	80089ee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	885b      	ldrh	r3, [r3, #2]
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	2b03      	cmp	r3, #3
 80089b0:	d104      	bne.n	80089bc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80089b2:	6839      	ldr	r1, [r7, #0]
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 f9bc 	bl	8008d32 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089ba:	e01d      	b.n	80089f8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	7bfa      	ldrb	r2, [r7, #15]
 80089c0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80089c4:	7bfb      	ldrb	r3, [r7, #15]
 80089c6:	4619      	mov	r1, r3
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f001 f84d 	bl	8009a68 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 fa7a 	bl	8008ec8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80089d4:	7bfb      	ldrb	r3, [r7, #15]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d004      	beq.n	80089e4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2202      	movs	r2, #2
 80089de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089e2:	e009      	b.n	80089f8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089ec:	e004      	b.n	80089f8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80089ee:	6839      	ldr	r1, [r7, #0]
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 f99e 	bl	8008d32 <USBD_CtlError>
  }
}
 80089f6:	bf00      	nop
 80089f8:	bf00      	nop
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	885b      	ldrh	r3, [r3, #2]
 8008a12:	b2da      	uxtb	r2, r3
 8008a14:	4b4e      	ldr	r3, [pc, #312]	; (8008b50 <USBD_SetConfig+0x150>)
 8008a16:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008a18:	4b4d      	ldr	r3, [pc, #308]	; (8008b50 <USBD_SetConfig+0x150>)
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d905      	bls.n	8008a2c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008a20:	6839      	ldr	r1, [r7, #0]
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f985 	bl	8008d32 <USBD_CtlError>
    return USBD_FAIL;
 8008a28:	2303      	movs	r3, #3
 8008a2a:	e08c      	b.n	8008b46 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	d002      	beq.n	8008a3e <USBD_SetConfig+0x3e>
 8008a38:	2b03      	cmp	r3, #3
 8008a3a:	d029      	beq.n	8008a90 <USBD_SetConfig+0x90>
 8008a3c:	e075      	b.n	8008b2a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008a3e:	4b44      	ldr	r3, [pc, #272]	; (8008b50 <USBD_SetConfig+0x150>)
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d020      	beq.n	8008a88 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008a46:	4b42      	ldr	r3, [pc, #264]	; (8008b50 <USBD_SetConfig+0x150>)
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a50:	4b3f      	ldr	r3, [pc, #252]	; (8008b50 <USBD_SetConfig+0x150>)
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	4619      	mov	r1, r3
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f7fe ffbd 	bl	80079d6 <USBD_SetClassConfig>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008a60:	7bfb      	ldrb	r3, [r7, #15]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d008      	beq.n	8008a78 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008a66:	6839      	ldr	r1, [r7, #0]
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 f962 	bl	8008d32 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2202      	movs	r2, #2
 8008a72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a76:	e065      	b.n	8008b44 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 fa25 	bl	8008ec8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2203      	movs	r2, #3
 8008a82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008a86:	e05d      	b.n	8008b44 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 fa1d 	bl	8008ec8 <USBD_CtlSendStatus>
      break;
 8008a8e:	e059      	b.n	8008b44 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008a90:	4b2f      	ldr	r3, [pc, #188]	; (8008b50 <USBD_SetConfig+0x150>)
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d112      	bne.n	8008abe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2202      	movs	r2, #2
 8008a9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008aa0:	4b2b      	ldr	r3, [pc, #172]	; (8008b50 <USBD_SetConfig+0x150>)
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008aaa:	4b29      	ldr	r3, [pc, #164]	; (8008b50 <USBD_SetConfig+0x150>)
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	4619      	mov	r1, r3
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f7fe ffac 	bl	8007a0e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 fa06 	bl	8008ec8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008abc:	e042      	b.n	8008b44 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008abe:	4b24      	ldr	r3, [pc, #144]	; (8008b50 <USBD_SetConfig+0x150>)
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d02a      	beq.n	8008b22 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f7fe ff9a 	bl	8007a0e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008ada:	4b1d      	ldr	r3, [pc, #116]	; (8008b50 <USBD_SetConfig+0x150>)
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	461a      	mov	r2, r3
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ae4:	4b1a      	ldr	r3, [pc, #104]	; (8008b50 <USBD_SetConfig+0x150>)
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	4619      	mov	r1, r3
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f7fe ff73 	bl	80079d6 <USBD_SetClassConfig>
 8008af0:	4603      	mov	r3, r0
 8008af2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008af4:	7bfb      	ldrb	r3, [r7, #15]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00f      	beq.n	8008b1a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008afa:	6839      	ldr	r1, [r7, #0]
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 f918 	bl	8008d32 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	4619      	mov	r1, r3
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f7fe ff7f 	bl	8007a0e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2202      	movs	r2, #2
 8008b14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008b18:	e014      	b.n	8008b44 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 f9d4 	bl	8008ec8 <USBD_CtlSendStatus>
      break;
 8008b20:	e010      	b.n	8008b44 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 f9d0 	bl	8008ec8 <USBD_CtlSendStatus>
      break;
 8008b28:	e00c      	b.n	8008b44 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008b2a:	6839      	ldr	r1, [r7, #0]
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 f900 	bl	8008d32 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008b32:	4b07      	ldr	r3, [pc, #28]	; (8008b50 <USBD_SetConfig+0x150>)
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	4619      	mov	r1, r3
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f7fe ff68 	bl	8007a0e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008b3e:	2303      	movs	r3, #3
 8008b40:	73fb      	strb	r3, [r7, #15]
      break;
 8008b42:	bf00      	nop
  }

  return ret;
 8008b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	20000658 	.word	0x20000658

08008b54 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	88db      	ldrh	r3, [r3, #6]
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d004      	beq.n	8008b70 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008b66:	6839      	ldr	r1, [r7, #0]
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 f8e2 	bl	8008d32 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008b6e:	e023      	b.n	8008bb8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	2b02      	cmp	r3, #2
 8008b7a:	dc02      	bgt.n	8008b82 <USBD_GetConfig+0x2e>
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	dc03      	bgt.n	8008b88 <USBD_GetConfig+0x34>
 8008b80:	e015      	b.n	8008bae <USBD_GetConfig+0x5a>
 8008b82:	2b03      	cmp	r3, #3
 8008b84:	d00b      	beq.n	8008b9e <USBD_GetConfig+0x4a>
 8008b86:	e012      	b.n	8008bae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	3308      	adds	r3, #8
 8008b92:	2201      	movs	r2, #1
 8008b94:	4619      	mov	r1, r3
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 f93c 	bl	8008e14 <USBD_CtlSendData>
        break;
 8008b9c:	e00c      	b.n	8008bb8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	3304      	adds	r3, #4
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 f934 	bl	8008e14 <USBD_CtlSendData>
        break;
 8008bac:	e004      	b.n	8008bb8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008bae:	6839      	ldr	r1, [r7, #0]
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 f8be 	bl	8008d32 <USBD_CtlError>
        break;
 8008bb6:	bf00      	nop
}
 8008bb8:	bf00      	nop
 8008bba:	3708      	adds	r7, #8
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	3b01      	subs	r3, #1
 8008bd4:	2b02      	cmp	r3, #2
 8008bd6:	d81e      	bhi.n	8008c16 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	88db      	ldrh	r3, [r3, #6]
 8008bdc:	2b02      	cmp	r3, #2
 8008bde:	d004      	beq.n	8008bea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008be0:	6839      	ldr	r1, [r7, #0]
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 f8a5 	bl	8008d32 <USBD_CtlError>
        break;
 8008be8:	e01a      	b.n	8008c20 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2201      	movs	r2, #1
 8008bee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d005      	beq.n	8008c06 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	68db      	ldr	r3, [r3, #12]
 8008bfe:	f043 0202 	orr.w	r2, r3, #2
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	330c      	adds	r3, #12
 8008c0a:	2202      	movs	r2, #2
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 f900 	bl	8008e14 <USBD_CtlSendData>
      break;
 8008c14:	e004      	b.n	8008c20 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008c16:	6839      	ldr	r1, [r7, #0]
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 f88a 	bl	8008d32 <USBD_CtlError>
      break;
 8008c1e:	bf00      	nop
  }
}
 8008c20:	bf00      	nop
 8008c22:	3708      	adds	r7, #8
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	885b      	ldrh	r3, [r3, #2]
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d107      	bne.n	8008c4a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f940 	bl	8008ec8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008c48:	e013      	b.n	8008c72 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	885b      	ldrh	r3, [r3, #2]
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	d10b      	bne.n	8008c6a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	889b      	ldrh	r3, [r3, #4]
 8008c56:	0a1b      	lsrs	r3, r3, #8
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	b2da      	uxtb	r2, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 f930 	bl	8008ec8 <USBD_CtlSendStatus>
}
 8008c68:	e003      	b.n	8008c72 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008c6a:	6839      	ldr	r1, [r7, #0]
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 f860 	bl	8008d32 <USBD_CtlError>
}
 8008c72:	bf00      	nop
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b082      	sub	sp, #8
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
 8008c82:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	3b01      	subs	r3, #1
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	d80b      	bhi.n	8008caa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	885b      	ldrh	r3, [r3, #2]
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	d10c      	bne.n	8008cb4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f910 	bl	8008ec8 <USBD_CtlSendStatus>
      }
      break;
 8008ca8:	e004      	b.n	8008cb4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008caa:	6839      	ldr	r1, [r7, #0]
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 f840 	bl	8008d32 <USBD_CtlError>
      break;
 8008cb2:	e000      	b.n	8008cb6 <USBD_ClrFeature+0x3c>
      break;
 8008cb4:	bf00      	nop
  }
}
 8008cb6:	bf00      	nop
 8008cb8:	3708      	adds	r7, #8
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b084      	sub	sp, #16
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
 8008cc6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	781a      	ldrb	r2, [r3, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	781a      	ldrb	r2, [r3, #0]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f7ff fa17 	bl	800811c <SWAPBYTE>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008d02:	68f8      	ldr	r0, [r7, #12]
 8008d04:	f7ff fa0a 	bl	800811c <SWAPBYTE>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	3301      	adds	r3, #1
 8008d14:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008d1c:	68f8      	ldr	r0, [r7, #12]
 8008d1e:	f7ff f9fd 	bl	800811c <SWAPBYTE>
 8008d22:	4603      	mov	r3, r0
 8008d24:	461a      	mov	r2, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	80da      	strh	r2, [r3, #6]
}
 8008d2a:	bf00      	nop
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}

08008d32 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b082      	sub	sp, #8
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
 8008d3a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d3c:	2180      	movs	r1, #128	; 0x80
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 fe28 	bl	8009994 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008d44:	2100      	movs	r1, #0
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 fe24 	bl	8009994 <USBD_LL_StallEP>
}
 8008d4c:	bf00      	nop
 8008d4e:	3708      	adds	r7, #8
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b086      	sub	sp, #24
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008d60:	2300      	movs	r3, #0
 8008d62:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d036      	beq.n	8008dd8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008d6e:	6938      	ldr	r0, [r7, #16]
 8008d70:	f000 f836 	bl	8008de0 <USBD_GetLen>
 8008d74:	4603      	mov	r3, r0
 8008d76:	3301      	adds	r3, #1
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	005b      	lsls	r3, r3, #1
 8008d7c:	b29a      	uxth	r2, r3
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008d82:	7dfb      	ldrb	r3, [r7, #23]
 8008d84:	68ba      	ldr	r2, [r7, #8]
 8008d86:	4413      	add	r3, r2
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	7812      	ldrb	r2, [r2, #0]
 8008d8c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d8e:	7dfb      	ldrb	r3, [r7, #23]
 8008d90:	3301      	adds	r3, #1
 8008d92:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008d94:	7dfb      	ldrb	r3, [r7, #23]
 8008d96:	68ba      	ldr	r2, [r7, #8]
 8008d98:	4413      	add	r3, r2
 8008d9a:	2203      	movs	r2, #3
 8008d9c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d9e:	7dfb      	ldrb	r3, [r7, #23]
 8008da0:	3301      	adds	r3, #1
 8008da2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008da4:	e013      	b.n	8008dce <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008da6:	7dfb      	ldrb	r3, [r7, #23]
 8008da8:	68ba      	ldr	r2, [r7, #8]
 8008daa:	4413      	add	r3, r2
 8008dac:	693a      	ldr	r2, [r7, #16]
 8008dae:	7812      	ldrb	r2, [r2, #0]
 8008db0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	3301      	adds	r3, #1
 8008db6:	613b      	str	r3, [r7, #16]
    idx++;
 8008db8:	7dfb      	ldrb	r3, [r7, #23]
 8008dba:	3301      	adds	r3, #1
 8008dbc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008dbe:	7dfb      	ldrb	r3, [r7, #23]
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	701a      	strb	r2, [r3, #0]
    idx++;
 8008dc8:	7dfb      	ldrb	r3, [r7, #23]
 8008dca:	3301      	adds	r3, #1
 8008dcc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d1e7      	bne.n	8008da6 <USBD_GetString+0x52>
 8008dd6:	e000      	b.n	8008dda <USBD_GetString+0x86>
    return;
 8008dd8:	bf00      	nop
  }
}
 8008dda:	3718      	adds	r7, #24
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b085      	sub	sp, #20
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008de8:	2300      	movs	r3, #0
 8008dea:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008df0:	e005      	b.n	8008dfe <USBD_GetLen+0x1e>
  {
    len++;
 8008df2:	7bfb      	ldrb	r3, [r7, #15]
 8008df4:	3301      	adds	r3, #1
 8008df6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d1f5      	bne.n	8008df2 <USBD_GetLen+0x12>
  }

  return len;
 8008e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3714      	adds	r7, #20
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2202      	movs	r2, #2
 8008e24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	68ba      	ldr	r2, [r7, #8]
 8008e38:	2100      	movs	r1, #0
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f000 fe33 	bl	8009aa6 <USBD_LL_Transmit>

  return USBD_OK;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b084      	sub	sp, #16
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	60f8      	str	r0, [r7, #12]
 8008e52:	60b9      	str	r1, [r7, #8]
 8008e54:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	68ba      	ldr	r2, [r7, #8]
 8008e5a:	2100      	movs	r1, #0
 8008e5c:	68f8      	ldr	r0, [r7, #12]
 8008e5e:	f000 fe22 	bl	8009aa6 <USBD_LL_Transmit>

  return USBD_OK;
 8008e62:	2300      	movs	r3, #0
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3710      	adds	r7, #16
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2203      	movs	r2, #3
 8008e7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	68ba      	ldr	r2, [r7, #8]
 8008e94:	2100      	movs	r1, #0
 8008e96:	68f8      	ldr	r0, [r7, #12]
 8008e98:	f000 fe26 	bl	8009ae8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b084      	sub	sp, #16
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	60f8      	str	r0, [r7, #12]
 8008eae:	60b9      	str	r1, [r7, #8]
 8008eb0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	68ba      	ldr	r2, [r7, #8]
 8008eb6:	2100      	movs	r1, #0
 8008eb8:	68f8      	ldr	r0, [r7, #12]
 8008eba:	f000 fe15 	bl	8009ae8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3710      	adds	r7, #16
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2204      	movs	r2, #4
 8008ed4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ed8:	2300      	movs	r3, #0
 8008eda:	2200      	movs	r2, #0
 8008edc:	2100      	movs	r1, #0
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 fde1 	bl	8009aa6 <USBD_LL_Transmit>

  return USBD_OK;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3708      	adds	r7, #8
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b082      	sub	sp, #8
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2205      	movs	r2, #5
 8008efa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008efe:	2300      	movs	r3, #0
 8008f00:	2200      	movs	r2, #0
 8008f02:	2100      	movs	r1, #0
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 fdef 	bl	8009ae8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f0a:	2300      	movs	r3, #0
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008f18:	2200      	movs	r2, #0
 8008f1a:	4912      	ldr	r1, [pc, #72]	; (8008f64 <MX_USB_DEVICE_Init+0x50>)
 8008f1c:	4812      	ldr	r0, [pc, #72]	; (8008f68 <MX_USB_DEVICE_Init+0x54>)
 8008f1e:	f7fe fcdd 	bl	80078dc <USBD_Init>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d001      	beq.n	8008f2c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008f28:	f7f8 f842 	bl	8000fb0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008f2c:	490f      	ldr	r1, [pc, #60]	; (8008f6c <MX_USB_DEVICE_Init+0x58>)
 8008f2e:	480e      	ldr	r0, [pc, #56]	; (8008f68 <MX_USB_DEVICE_Init+0x54>)
 8008f30:	f7fe fd04 	bl	800793c <USBD_RegisterClass>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d001      	beq.n	8008f3e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008f3a:	f7f8 f839 	bl	8000fb0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008f3e:	490c      	ldr	r1, [pc, #48]	; (8008f70 <MX_USB_DEVICE_Init+0x5c>)
 8008f40:	4809      	ldr	r0, [pc, #36]	; (8008f68 <MX_USB_DEVICE_Init+0x54>)
 8008f42:	f7fe fbfb 	bl	800773c <USBD_CDC_RegisterInterface>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d001      	beq.n	8008f50 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008f4c:	f7f8 f830 	bl	8000fb0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008f50:	4805      	ldr	r0, [pc, #20]	; (8008f68 <MX_USB_DEVICE_Init+0x54>)
 8008f52:	f7fe fd29 	bl	80079a8 <USBD_Start>
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d001      	beq.n	8008f60 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008f5c:	f7f8 f828 	bl	8000fb0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008f60:	bf00      	nop
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	200000bc 	.word	0x200000bc
 8008f68:	2000065c 	.word	0x2000065c
 8008f6c:	20000024 	.word	0x20000024
 8008f70:	200000a8 	.word	0x200000a8

08008f74 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
	  // Circular FIFO initializations :
	  vcp_tx_fifo.data = UserTxBufferFS;  // Use the buffer generated by Cube
 8008f78:	4b11      	ldr	r3, [pc, #68]	; (8008fc0 <CDC_Init_FS+0x4c>)
 8008f7a:	4a12      	ldr	r2, [pc, #72]	; (8008fc4 <CDC_Init_FS+0x50>)
 8008f7c:	601a      	str	r2, [r3, #0]
	  vcp_tx_fifo.wr = 0;
 8008f7e:	4b10      	ldr	r3, [pc, #64]	; (8008fc0 <CDC_Init_FS+0x4c>)
 8008f80:	2200      	movs	r2, #0
 8008f82:	605a      	str	r2, [r3, #4]
	  vcp_tx_fifo.rd = 0;
 8008f84:	4b0e      	ldr	r3, [pc, #56]	; (8008fc0 <CDC_Init_FS+0x4c>)
 8008f86:	2200      	movs	r2, #0
 8008f88:	609a      	str	r2, [r3, #8]
	  vcp_tx_fifo.lb = 0;
 8008f8a:	4b0d      	ldr	r3, [pc, #52]	; (8008fc0 <CDC_Init_FS+0x4c>)
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	60da      	str	r2, [r3, #12]
	  vcp_rx_fifo.data = UserRxBufferFS;  // Use the buffer generated by Cube
 8008f90:	4b0d      	ldr	r3, [pc, #52]	; (8008fc8 <CDC_Init_FS+0x54>)
 8008f92:	4a0e      	ldr	r2, [pc, #56]	; (8008fcc <CDC_Init_FS+0x58>)
 8008f94:	601a      	str	r2, [r3, #0]
	  vcp_rx_fifo.wr = 0;
 8008f96:	4b0c      	ldr	r3, [pc, #48]	; (8008fc8 <CDC_Init_FS+0x54>)
 8008f98:	2200      	movs	r2, #0
 8008f9a:	605a      	str	r2, [r3, #4]
	  vcp_rx_fifo.rd = 0;
 8008f9c:	4b0a      	ldr	r3, [pc, #40]	; (8008fc8 <CDC_Init_FS+0x54>)
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	609a      	str	r2, [r3, #8]
	  vcp_rx_fifo.lb = 0;
 8008fa2:	4b09      	ldr	r3, [pc, #36]	; (8008fc8 <CDC_Init_FS+0x54>)
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	60da      	str	r2, [r3, #12]

  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008fa8:	2200      	movs	r2, #0
 8008faa:	4906      	ldr	r1, [pc, #24]	; (8008fc4 <CDC_Init_FS+0x50>)
 8008fac:	4808      	ldr	r0, [pc, #32]	; (8008fd0 <CDC_Init_FS+0x5c>)
 8008fae:	f7fe fbdf 	bl	8007770 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008fb2:	4906      	ldr	r1, [pc, #24]	; (8008fcc <CDC_Init_FS+0x58>)
 8008fb4:	4806      	ldr	r0, [pc, #24]	; (8008fd0 <CDC_Init_FS+0x5c>)
 8008fb6:	f7fe fbfd 	bl	80077b4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008fba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	20001938 	.word	0x20001938
 8008fc4:	20001138 	.word	0x20001138
 8008fc8:	20001948 	.word	0x20001948
 8008fcc:	20000938 	.word	0x20000938
 8008fd0:	2000065c 	.word	0x2000065c

08008fd4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008fd8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	4603      	mov	r3, r0
 8008fec:	6039      	str	r1, [r7, #0]
 8008fee:	71fb      	strb	r3, [r7, #7]
 8008ff0:	4613      	mov	r3, r2
 8008ff2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008ff4:	79fb      	ldrb	r3, [r7, #7]
 8008ff6:	2b23      	cmp	r3, #35	; 0x23
 8008ff8:	d84a      	bhi.n	8009090 <CDC_Control_FS+0xac>
 8008ffa:	a201      	add	r2, pc, #4	; (adr r2, 8009000 <CDC_Control_FS+0x1c>)
 8008ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009000:	08009091 	.word	0x08009091
 8009004:	08009091 	.word	0x08009091
 8009008:	08009091 	.word	0x08009091
 800900c:	08009091 	.word	0x08009091
 8009010:	08009091 	.word	0x08009091
 8009014:	08009091 	.word	0x08009091
 8009018:	08009091 	.word	0x08009091
 800901c:	08009091 	.word	0x08009091
 8009020:	08009091 	.word	0x08009091
 8009024:	08009091 	.word	0x08009091
 8009028:	08009091 	.word	0x08009091
 800902c:	08009091 	.word	0x08009091
 8009030:	08009091 	.word	0x08009091
 8009034:	08009091 	.word	0x08009091
 8009038:	08009091 	.word	0x08009091
 800903c:	08009091 	.word	0x08009091
 8009040:	08009091 	.word	0x08009091
 8009044:	08009091 	.word	0x08009091
 8009048:	08009091 	.word	0x08009091
 800904c:	08009091 	.word	0x08009091
 8009050:	08009091 	.word	0x08009091
 8009054:	08009091 	.word	0x08009091
 8009058:	08009091 	.word	0x08009091
 800905c:	08009091 	.word	0x08009091
 8009060:	08009091 	.word	0x08009091
 8009064:	08009091 	.word	0x08009091
 8009068:	08009091 	.word	0x08009091
 800906c:	08009091 	.word	0x08009091
 8009070:	08009091 	.word	0x08009091
 8009074:	08009091 	.word	0x08009091
 8009078:	08009091 	.word	0x08009091
 800907c:	08009091 	.word	0x08009091
 8009080:	08009091 	.word	0x08009091
 8009084:	08009091 	.word	0x08009091
 8009088:	08009091 	.word	0x08009091
 800908c:	08009091 	.word	0x08009091
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009090:	bf00      	nop
  }

  return (USBD_OK);
 8009092:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009094:	4618      	mov	r0, r3
 8009096:	370c      	adds	r7, #12
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	  // Update the write index for the next incoming packet
	  vcp_rx_fifo.wr += *Len;
 80090aa:	4b13      	ldr	r3, [pc, #76]	; (80090f8 <CDC_Receive_FS+0x58>)
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	461a      	mov	r2, r3
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4413      	add	r3, r2
 80090b6:	461a      	mov	r2, r3
 80090b8:	4b0f      	ldr	r3, [pc, #60]	; (80090f8 <CDC_Receive_FS+0x58>)
 80090ba:	605a      	str	r2, [r3, #4]
	  // Is the new value too close to the end of the FIFO ?
	  if (vcp_rx_fifo.wr >= RX_BUFFER_MAX_WRITE_INDEX)
 80090bc:	4b0e      	ldr	r3, [pc, #56]	; (80090f8 <CDC_Receive_FS+0x58>)
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	f5b3 6ff8 	cmp.w	r3, #1984	; 0x7c0
 80090c4:	d306      	bcc.n	80090d4 <CDC_Receive_FS+0x34>
	  {
	    // Solution : wrap-around (and save wr as lb)
	    vcp_rx_fifo.lb = vcp_rx_fifo.wr;
 80090c6:	4b0c      	ldr	r3, [pc, #48]	; (80090f8 <CDC_Receive_FS+0x58>)
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	4a0b      	ldr	r2, [pc, #44]	; (80090f8 <CDC_Receive_FS+0x58>)
 80090cc:	60d3      	str	r3, [r2, #12]
	    vcp_rx_fifo.wr = 0;
 80090ce:	4b0a      	ldr	r3, [pc, #40]	; (80090f8 <CDC_Receive_FS+0x58>)
 80090d0:	2200      	movs	r2, #0
 80090d2:	605a      	str	r2, [r3, #4]
	  }
	  // Tell the driver where to write the next incoming packet
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, vcp_rx_fifo.data + vcp_rx_fifo.wr);
 80090d4:	4b08      	ldr	r3, [pc, #32]	; (80090f8 <CDC_Receive_FS+0x58>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a07      	ldr	r2, [pc, #28]	; (80090f8 <CDC_Receive_FS+0x58>)
 80090da:	6852      	ldr	r2, [r2, #4]
 80090dc:	4413      	add	r3, r2
 80090de:	4619      	mov	r1, r3
 80090e0:	4806      	ldr	r0, [pc, #24]	; (80090fc <CDC_Receive_FS+0x5c>)
 80090e2:	f7fe fb67 	bl	80077b4 <USBD_CDC_SetRxBuffer>
	  // Receive the next packet
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80090e6:	4805      	ldr	r0, [pc, #20]	; (80090fc <CDC_Receive_FS+0x5c>)
 80090e8:	f7fe fbc2 	bl	8007870 <USBD_CDC_ReceivePacket>
	  return (USBD_OK);
 80090ec:	2300      	movs	r3, #0
  //USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
  //USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3708      	adds	r7, #8
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	20001948 	.word	0x20001948
 80090fc:	2000065c 	.word	0x2000065c

08009100 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009100:	b480      	push	{r7}
 8009102:	b087      	sub	sp, #28
 8009104:	af00      	add	r7, sp, #0
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	4613      	mov	r3, r2
 800910c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800910e:	2300      	movs	r3, #0
 8009110:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009112:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009116:	4618      	mov	r0, r3
 8009118:	371c      	adds	r7, #28
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr
	...

08009124 <vcp_service>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void vcp_service ()
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800912a:	4b21      	ldr	r3, [pc, #132]	; (80091b0 <vcp_service+0x8c>)
 800912c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009130:	607b      	str	r3, [r7, #4]
  // Test if the USB CDC is ready to transmit
  if (hcdc->TxState == 0)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009138:	2b00      	cmp	r3, #0
 800913a:	d134      	bne.n	80091a6 <vcp_service+0x82>
  {
    // Update the FIFO to reflect the completion of the last transmission
    vcp_tx_fifo.rd = vcp_tx_fifo.lb;
 800913c:	4b1d      	ldr	r3, [pc, #116]	; (80091b4 <vcp_service+0x90>)
 800913e:	68db      	ldr	r3, [r3, #12]
 8009140:	4a1c      	ldr	r2, [pc, #112]	; (80091b4 <vcp_service+0x90>)
 8009142:	6093      	str	r3, [r2, #8]
    // Compute how much data is in the FIFO
    int cap = vcp_tx_fifo.wr - vcp_tx_fifo.rd;
 8009144:	4b1b      	ldr	r3, [pc, #108]	; (80091b4 <vcp_service+0x90>)
 8009146:	685a      	ldr	r2, [r3, #4]
 8009148:	4b1a      	ldr	r3, [pc, #104]	; (80091b4 <vcp_service+0x90>)
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	1ad3      	subs	r3, r2, r3
 800914e:	603b      	str	r3, [r7, #0]
    if (cap != 0)  // The FIFO is empty : return immediately
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d027      	beq.n	80091a6 <vcp_service+0x82>
    {
      if (cap < 0)  // The FIFO contents wrap-around
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	da13      	bge.n	8009184 <vcp_service+0x60>
      {
        // Send only the tail of the FIFO
        USBD_CDC_SetTxBuffer(&hUsbDeviceFS, &vcp_tx_fifo.data[vcp_tx_fifo.rd], APP_TX_DATA_SIZE - vcp_tx_fifo.rd);
 800915c:	4b15      	ldr	r3, [pc, #84]	; (80091b4 <vcp_service+0x90>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a14      	ldr	r2, [pc, #80]	; (80091b4 <vcp_service+0x90>)
 8009162:	6892      	ldr	r2, [r2, #8]
 8009164:	1899      	adds	r1, r3, r2
 8009166:	4b13      	ldr	r3, [pc, #76]	; (80091b4 <vcp_service+0x90>)
 8009168:	689b      	ldr	r3, [r3, #8]
 800916a:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800916e:	461a      	mov	r2, r3
 8009170:	480f      	ldr	r0, [pc, #60]	; (80091b0 <vcp_service+0x8c>)
 8009172:	f7fe fafd 	bl	8007770 <USBD_CDC_SetTxBuffer>
        USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009176:	480e      	ldr	r0, [pc, #56]	; (80091b0 <vcp_service+0x8c>)
 8009178:	f7fe fb3a 	bl	80077f0 <USBD_CDC_TransmitPacket>
        vcp_tx_fifo.lb = 0;    // Lock the tail’s data
 800917c:	4b0d      	ldr	r3, [pc, #52]	; (80091b4 <vcp_service+0x90>)
 800917e:	2200      	movs	r2, #0
 8009180:	60da      	str	r2, [r3, #12]
        USBD_CDC_TransmitPacket(&hUsbDeviceFS);
        vcp_tx_fifo.lb = vcp_tx_fifo.wr; // lock the data
      }
    }
  }
}
 8009182:	e010      	b.n	80091a6 <vcp_service+0x82>
        USBD_CDC_SetTxBuffer(&hUsbDeviceFS, &vcp_tx_fifo.data[vcp_tx_fifo.rd], cap);
 8009184:	4b0b      	ldr	r3, [pc, #44]	; (80091b4 <vcp_service+0x90>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a0a      	ldr	r2, [pc, #40]	; (80091b4 <vcp_service+0x90>)
 800918a:	6892      	ldr	r2, [r2, #8]
 800918c:	4413      	add	r3, r2
 800918e:	683a      	ldr	r2, [r7, #0]
 8009190:	4619      	mov	r1, r3
 8009192:	4807      	ldr	r0, [pc, #28]	; (80091b0 <vcp_service+0x8c>)
 8009194:	f7fe faec 	bl	8007770 <USBD_CDC_SetTxBuffer>
        USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009198:	4805      	ldr	r0, [pc, #20]	; (80091b0 <vcp_service+0x8c>)
 800919a:	f7fe fb29 	bl	80077f0 <USBD_CDC_TransmitPacket>
        vcp_tx_fifo.lb = vcp_tx_fifo.wr; // lock the data
 800919e:	4b05      	ldr	r3, [pc, #20]	; (80091b4 <vcp_service+0x90>)
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	4a04      	ldr	r2, [pc, #16]	; (80091b4 <vcp_service+0x90>)
 80091a4:	60d3      	str	r3, [r2, #12]
}
 80091a6:	bf00      	nop
 80091a8:	3708      	adds	r7, #8
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	2000065c 	.word	0x2000065c
 80091b4:	20001938 	.word	0x20001938

080091b8 <vcp_init>:

void vcp_init ()
{
 80091b8:	b480      	push	{r7}
 80091ba:	af00      	add	r7, sp, #0
  while (vcp_tx_fifo.data == 0);		// Wait until the CDC library calls CDC_Init_FS, by checking for a non-null buffer pointer
 80091bc:	bf00      	nop
 80091be:	4b05      	ldr	r3, [pc, #20]	; (80091d4 <vcp_init+0x1c>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d0fb      	beq.n	80091be <vcp_init+0x6>
}
 80091c6:	bf00      	nop
 80091c8:	bf00      	nop
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr
 80091d2:	bf00      	nop
 80091d4:	20001938 	.word	0x20001938

080091d8 <vcp_send>:

//code to communicate with USB
int vcp_send (uint8_t* buf, uint16_t len)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	460b      	mov	r3, r1
 80091e2:	807b      	strh	r3, [r7, #2]
  // Step 1 : calculate the occupied space in the Tx FIFO
  int cap = vcp_tx_fifo.wr - vcp_tx_fifo.rd;   // occupied capacity
 80091e4:	4b2c      	ldr	r3, [pc, #176]	; (8009298 <vcp_send+0xc0>)
 80091e6:	685a      	ldr	r2, [r3, #4]
 80091e8:	4b2b      	ldr	r3, [pc, #172]	; (8009298 <vcp_send+0xc0>)
 80091ea:	689b      	ldr	r3, [r3, #8]
 80091ec:	1ad3      	subs	r3, r2, r3
 80091ee:	60fb      	str	r3, [r7, #12]
  if (cap < 0)    // FIFO contents wrap around
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	da03      	bge.n	80091fe <vcp_send+0x26>
    cap += APP_TX_DATA_SIZE;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091fc:	60fb      	str	r3, [r7, #12]
  cap = APP_TX_DATA_SIZE - cap;      // available capacity
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8009204:	60fb      	str	r3, [r7, #12]
  // Step 2 : compare with argument
  if (cap < len)
 8009206:	887b      	ldrh	r3, [r7, #2]
 8009208:	68fa      	ldr	r2, [r7, #12]
 800920a:	429a      	cmp	r2, r3
 800920c:	da02      	bge.n	8009214 <vcp_send+0x3c>
    return -1;   // Not enough room to copy "buf" into the FIFO => error
 800920e:	f04f 33ff 	mov.w	r3, #4294967295
 8009212:	e03c      	b.n	800928e <vcp_send+0xb6>
  // Step 3 : does buf fit in the tail ?
  int tail = APP_TX_DATA_SIZE - vcp_tx_fifo.wr;
 8009214:	4b20      	ldr	r3, [pc, #128]	; (8009298 <vcp_send+0xc0>)
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800921c:	60bb      	str	r3, [r7, #8]
  if (tail >= len)
 800921e:	887b      	ldrh	r3, [r7, #2]
 8009220:	68ba      	ldr	r2, [r7, #8]
 8009222:	429a      	cmp	r2, r3
 8009224:	db18      	blt.n	8009258 <vcp_send+0x80>
  {
    // Copy buf into the tail of the FIFO
    memcpy (&vcp_tx_fifo.data[vcp_tx_fifo.wr], buf, len);
 8009226:	4b1c      	ldr	r3, [pc, #112]	; (8009298 <vcp_send+0xc0>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a1b      	ldr	r2, [pc, #108]	; (8009298 <vcp_send+0xc0>)
 800922c:	6852      	ldr	r2, [r2, #4]
 800922e:	4413      	add	r3, r2
 8009230:	887a      	ldrh	r2, [r7, #2]
 8009232:	6879      	ldr	r1, [r7, #4]
 8009234:	4618      	mov	r0, r3
 8009236:	f000 fd45 	bl	8009cc4 <memcpy>
    // Update "wr" index
    vcp_tx_fifo.wr += len;
 800923a:	4b17      	ldr	r3, [pc, #92]	; (8009298 <vcp_send+0xc0>)
 800923c:	685a      	ldr	r2, [r3, #4]
 800923e:	887b      	ldrh	r3, [r7, #2]
 8009240:	4413      	add	r3, r2
 8009242:	4a15      	ldr	r2, [pc, #84]	; (8009298 <vcp_send+0xc0>)
 8009244:	6053      	str	r3, [r2, #4]
    // In case "len" == "tail", next write goes to the head
    if (vcp_tx_fifo.wr == APP_TX_DATA_SIZE)
 8009246:	4b14      	ldr	r3, [pc, #80]	; (8009298 <vcp_send+0xc0>)
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800924e:	d11d      	bne.n	800928c <vcp_send+0xb4>
      vcp_tx_fifo.wr = 0;
 8009250:	4b11      	ldr	r3, [pc, #68]	; (8009298 <vcp_send+0xc0>)
 8009252:	2200      	movs	r2, #0
 8009254:	605a      	str	r2, [r3, #4]
 8009256:	e019      	b.n	800928c <vcp_send+0xb4>
  }
  else
  {
    // Copy the head of "buf" to the tail of the FIFO
    memcpy (&vcp_tx_fifo.data[vcp_tx_fifo.wr], buf, tail);
 8009258:	4b0f      	ldr	r3, [pc, #60]	; (8009298 <vcp_send+0xc0>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a0e      	ldr	r2, [pc, #56]	; (8009298 <vcp_send+0xc0>)
 800925e:	6852      	ldr	r2, [r2, #4]
 8009260:	4413      	add	r3, r2
 8009262:	68ba      	ldr	r2, [r7, #8]
 8009264:	6879      	ldr	r1, [r7, #4]
 8009266:	4618      	mov	r0, r3
 8009268:	f000 fd2c 	bl	8009cc4 <memcpy>
    // Copy the tail of "buf" to the head of the FIFO :
    memcpy (vcp_tx_fifo.data, &buf[tail], len - tail);
 800926c:	4b0a      	ldr	r3, [pc, #40]	; (8009298 <vcp_send+0xc0>)
 800926e:	6818      	ldr	r0, [r3, #0]
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	18d1      	adds	r1, r2, r3
 8009276:	887a      	ldrh	r2, [r7, #2]
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	1ad3      	subs	r3, r2, r3
 800927c:	461a      	mov	r2, r3
 800927e:	f000 fd21 	bl	8009cc4 <memcpy>
    // Update the "wr" index
    vcp_tx_fifo.wr = len - tail;
 8009282:	887a      	ldrh	r2, [r7, #2]
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	4a03      	ldr	r2, [pc, #12]	; (8009298 <vcp_send+0xc0>)
 800928a:	6053      	str	r3, [r2, #4]
  }
  return 0;  // successful completion
 800928c:	2300      	movs	r3, #0
}
 800928e:	4618      	mov	r0, r3
 8009290:	3710      	adds	r7, #16
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	20001938 	.word	0x20001938

0800929c <vcp_recv>:


int vcp_recv (uint8_t* buf, uint16_t len)
{
 800929c:	b480      	push	{r7}
 800929e:	b085      	sub	sp, #20
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	460b      	mov	r3, r1
 80092a6:	807b      	strh	r3, [r7, #2]

  // Compute how much data is in the FIFO
  int cap = vcp_rx_fifo.wr - vcp_rx_fifo.rd;
 80092a8:	4b20      	ldr	r3, [pc, #128]	; (800932c <vcp_recv+0x90>)
 80092aa:	685a      	ldr	r2, [r3, #4]
 80092ac:	4b1f      	ldr	r3, [pc, #124]	; (800932c <vcp_recv+0x90>)
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	1ad3      	subs	r3, r2, r3
 80092b2:	60fb      	str	r3, [r7, #12]
  if (cap == 0)
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d101      	bne.n	80092be <vcp_recv+0x22>
    return 0;      // Empty FIFO, no data to read
 80092ba:	2300      	movs	r3, #0
 80092bc:	e030      	b.n	8009320 <vcp_recv+0x84>
  if (cap < 0)  // FIFO contents wrap around
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	da04      	bge.n	80092ce <vcp_recv+0x32>
    cap += vcp_rx_fifo.lb;  // Notice the use of lb
 80092c4:	4b19      	ldr	r3, [pc, #100]	; (800932c <vcp_recv+0x90>)
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	68fa      	ldr	r2, [r7, #12]
 80092ca:	4413      	add	r3, r2
 80092cc:	60fb      	str	r3, [r7, #12]
  // Limit the FIFO read to the available data
  if (len > cap)
 80092ce:	887b      	ldrh	r3, [r7, #2]
 80092d0:	68fa      	ldr	r2, [r7, #12]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	da01      	bge.n	80092da <vcp_recv+0x3e>
    len = cap;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	807b      	strh	r3, [r7, #2]
  // Save len : it'll be the return value
  int retval = len;
 80092da:	887b      	ldrh	r3, [r7, #2]
 80092dc:	60bb      	str	r3, [r7, #8]
  // Read the data
  while (len)
 80092de:	e01b      	b.n	8009318 <vcp_recv+0x7c>
  {
    len--;
 80092e0:	887b      	ldrh	r3, [r7, #2]
 80092e2:	3b01      	subs	r3, #1
 80092e4:	807b      	strh	r3, [r7, #2]
    *buf = vcp_rx_fifo.data[vcp_rx_fifo.rd];
 80092e6:	4b11      	ldr	r3, [pc, #68]	; (800932c <vcp_recv+0x90>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a10      	ldr	r2, [pc, #64]	; (800932c <vcp_recv+0x90>)
 80092ec:	6892      	ldr	r2, [r2, #8]
 80092ee:	4413      	add	r3, r2
 80092f0:	781a      	ldrb	r2, [r3, #0]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	701a      	strb	r2, [r3, #0]
    buf++;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	3301      	adds	r3, #1
 80092fa:	607b      	str	r3, [r7, #4]
    vcp_rx_fifo.rd++;    // Update read index
 80092fc:	4b0b      	ldr	r3, [pc, #44]	; (800932c <vcp_recv+0x90>)
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	3301      	adds	r3, #1
 8009302:	4a0a      	ldr	r2, [pc, #40]	; (800932c <vcp_recv+0x90>)
 8009304:	6093      	str	r3, [r2, #8]
    if (vcp_rx_fifo.rd == vcp_rx_fifo.lb)  // Check for wrap-around
 8009306:	4b09      	ldr	r3, [pc, #36]	; (800932c <vcp_recv+0x90>)
 8009308:	689a      	ldr	r2, [r3, #8]
 800930a:	4b08      	ldr	r3, [pc, #32]	; (800932c <vcp_recv+0x90>)
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	429a      	cmp	r2, r3
 8009310:	d102      	bne.n	8009318 <vcp_recv+0x7c>
      vcp_rx_fifo.rd = 0;      // Follow wrap-around
 8009312:	4b06      	ldr	r3, [pc, #24]	; (800932c <vcp_recv+0x90>)
 8009314:	2200      	movs	r2, #0
 8009316:	609a      	str	r2, [r3, #8]
  while (len)
 8009318:	887b      	ldrh	r3, [r7, #2]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d1e0      	bne.n	80092e0 <vcp_recv+0x44>
  }
  return retval;
 800931e:	68bb      	ldr	r3, [r7, #8]
}
 8009320:	4618      	mov	r0, r3
 8009322:	3714      	adds	r7, #20
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr
 800932c:	20001948 	.word	0x20001948

08009330 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	4603      	mov	r3, r0
 8009338:	6039      	str	r1, [r7, #0]
 800933a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	2212      	movs	r2, #18
 8009340:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009342:	4b03      	ldr	r3, [pc, #12]	; (8009350 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009344:	4618      	mov	r0, r3
 8009346:	370c      	adds	r7, #12
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr
 8009350:	200000e8 	.word	0x200000e8

08009354 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	4603      	mov	r3, r0
 800935c:	6039      	str	r1, [r7, #0]
 800935e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	2204      	movs	r2, #4
 8009364:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009366:	4b03      	ldr	r3, [pc, #12]	; (8009374 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009368:	4618      	mov	r0, r3
 800936a:	370c      	adds	r7, #12
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr
 8009374:	20000108 	.word	0x20000108

08009378 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	4603      	mov	r3, r0
 8009380:	6039      	str	r1, [r7, #0]
 8009382:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009384:	79fb      	ldrb	r3, [r7, #7]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d105      	bne.n	8009396 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800938a:	683a      	ldr	r2, [r7, #0]
 800938c:	4907      	ldr	r1, [pc, #28]	; (80093ac <USBD_FS_ProductStrDescriptor+0x34>)
 800938e:	4808      	ldr	r0, [pc, #32]	; (80093b0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009390:	f7ff fce0 	bl	8008d54 <USBD_GetString>
 8009394:	e004      	b.n	80093a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009396:	683a      	ldr	r2, [r7, #0]
 8009398:	4904      	ldr	r1, [pc, #16]	; (80093ac <USBD_FS_ProductStrDescriptor+0x34>)
 800939a:	4805      	ldr	r0, [pc, #20]	; (80093b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800939c:	f7ff fcda 	bl	8008d54 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093a0:	4b02      	ldr	r3, [pc, #8]	; (80093ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3708      	adds	r7, #8
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	20001958 	.word	0x20001958
 80093b0:	08009f04 	.word	0x08009f04

080093b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	4603      	mov	r3, r0
 80093bc:	6039      	str	r1, [r7, #0]
 80093be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80093c0:	683a      	ldr	r2, [r7, #0]
 80093c2:	4904      	ldr	r1, [pc, #16]	; (80093d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80093c4:	4804      	ldr	r0, [pc, #16]	; (80093d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80093c6:	f7ff fcc5 	bl	8008d54 <USBD_GetString>
  return USBD_StrDesc;
 80093ca:	4b02      	ldr	r3, [pc, #8]	; (80093d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3708      	adds	r7, #8
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}
 80093d4:	20001958 	.word	0x20001958
 80093d8:	08009f1c 	.word	0x08009f1c

080093dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	4603      	mov	r3, r0
 80093e4:	6039      	str	r1, [r7, #0]
 80093e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	221a      	movs	r2, #26
 80093ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80093ee:	f000 f855 	bl	800949c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80093f2:	4b02      	ldr	r3, [pc, #8]	; (80093fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3708      	adds	r7, #8
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	2000010c 	.word	0x2000010c

08009400 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af00      	add	r7, sp, #0
 8009406:	4603      	mov	r3, r0
 8009408:	6039      	str	r1, [r7, #0]
 800940a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800940c:	79fb      	ldrb	r3, [r7, #7]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d105      	bne.n	800941e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009412:	683a      	ldr	r2, [r7, #0]
 8009414:	4907      	ldr	r1, [pc, #28]	; (8009434 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009416:	4808      	ldr	r0, [pc, #32]	; (8009438 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009418:	f7ff fc9c 	bl	8008d54 <USBD_GetString>
 800941c:	e004      	b.n	8009428 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800941e:	683a      	ldr	r2, [r7, #0]
 8009420:	4904      	ldr	r1, [pc, #16]	; (8009434 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009422:	4805      	ldr	r0, [pc, #20]	; (8009438 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009424:	f7ff fc96 	bl	8008d54 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009428:	4b02      	ldr	r3, [pc, #8]	; (8009434 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800942a:	4618      	mov	r0, r3
 800942c:	3708      	adds	r7, #8
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	20001958 	.word	0x20001958
 8009438:	08009f30 	.word	0x08009f30

0800943c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	4603      	mov	r3, r0
 8009444:	6039      	str	r1, [r7, #0]
 8009446:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009448:	79fb      	ldrb	r3, [r7, #7]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d105      	bne.n	800945a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800944e:	683a      	ldr	r2, [r7, #0]
 8009450:	4907      	ldr	r1, [pc, #28]	; (8009470 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009452:	4808      	ldr	r0, [pc, #32]	; (8009474 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009454:	f7ff fc7e 	bl	8008d54 <USBD_GetString>
 8009458:	e004      	b.n	8009464 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800945a:	683a      	ldr	r2, [r7, #0]
 800945c:	4904      	ldr	r1, [pc, #16]	; (8009470 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800945e:	4805      	ldr	r0, [pc, #20]	; (8009474 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009460:	f7ff fc78 	bl	8008d54 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009464:	4b02      	ldr	r3, [pc, #8]	; (8009470 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009466:	4618      	mov	r0, r3
 8009468:	3708      	adds	r7, #8
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	20001958 	.word	0x20001958
 8009474:	08009f3c 	.word	0x08009f3c

08009478 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	4603      	mov	r3, r0
 8009480:	6039      	str	r1, [r7, #0]
 8009482:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	220c      	movs	r2, #12
 8009488:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800948a:	4b03      	ldr	r3, [pc, #12]	; (8009498 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800948c:	4618      	mov	r0, r3
 800948e:	370c      	adds	r7, #12
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr
 8009498:	200000fc 	.word	0x200000fc

0800949c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80094a2:	4b0f      	ldr	r3, [pc, #60]	; (80094e0 <Get_SerialNum+0x44>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80094a8:	4b0e      	ldr	r3, [pc, #56]	; (80094e4 <Get_SerialNum+0x48>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80094ae:	4b0e      	ldr	r3, [pc, #56]	; (80094e8 <Get_SerialNum+0x4c>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80094b4:	68fa      	ldr	r2, [r7, #12]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	4413      	add	r3, r2
 80094ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d009      	beq.n	80094d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80094c2:	2208      	movs	r2, #8
 80094c4:	4909      	ldr	r1, [pc, #36]	; (80094ec <Get_SerialNum+0x50>)
 80094c6:	68f8      	ldr	r0, [r7, #12]
 80094c8:	f000 f814 	bl	80094f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80094cc:	2204      	movs	r2, #4
 80094ce:	4908      	ldr	r1, [pc, #32]	; (80094f0 <Get_SerialNum+0x54>)
 80094d0:	68b8      	ldr	r0, [r7, #8]
 80094d2:	f000 f80f 	bl	80094f4 <IntToUnicode>
  }
}
 80094d6:	bf00      	nop
 80094d8:	3710      	adds	r7, #16
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	1ff0f420 	.word	0x1ff0f420
 80094e4:	1ff0f424 	.word	0x1ff0f424
 80094e8:	1ff0f428 	.word	0x1ff0f428
 80094ec:	2000010e 	.word	0x2000010e
 80094f0:	2000011e 	.word	0x2000011e

080094f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b087      	sub	sp, #28
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	60b9      	str	r1, [r7, #8]
 80094fe:	4613      	mov	r3, r2
 8009500:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009502:	2300      	movs	r3, #0
 8009504:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009506:	2300      	movs	r3, #0
 8009508:	75fb      	strb	r3, [r7, #23]
 800950a:	e027      	b.n	800955c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	0f1b      	lsrs	r3, r3, #28
 8009510:	2b09      	cmp	r3, #9
 8009512:	d80b      	bhi.n	800952c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	0f1b      	lsrs	r3, r3, #28
 8009518:	b2da      	uxtb	r2, r3
 800951a:	7dfb      	ldrb	r3, [r7, #23]
 800951c:	005b      	lsls	r3, r3, #1
 800951e:	4619      	mov	r1, r3
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	440b      	add	r3, r1
 8009524:	3230      	adds	r2, #48	; 0x30
 8009526:	b2d2      	uxtb	r2, r2
 8009528:	701a      	strb	r2, [r3, #0]
 800952a:	e00a      	b.n	8009542 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	0f1b      	lsrs	r3, r3, #28
 8009530:	b2da      	uxtb	r2, r3
 8009532:	7dfb      	ldrb	r3, [r7, #23]
 8009534:	005b      	lsls	r3, r3, #1
 8009536:	4619      	mov	r1, r3
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	440b      	add	r3, r1
 800953c:	3237      	adds	r2, #55	; 0x37
 800953e:	b2d2      	uxtb	r2, r2
 8009540:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	011b      	lsls	r3, r3, #4
 8009546:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009548:	7dfb      	ldrb	r3, [r7, #23]
 800954a:	005b      	lsls	r3, r3, #1
 800954c:	3301      	adds	r3, #1
 800954e:	68ba      	ldr	r2, [r7, #8]
 8009550:	4413      	add	r3, r2
 8009552:	2200      	movs	r2, #0
 8009554:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009556:	7dfb      	ldrb	r3, [r7, #23]
 8009558:	3301      	adds	r3, #1
 800955a:	75fb      	strb	r3, [r7, #23]
 800955c:	7dfa      	ldrb	r2, [r7, #23]
 800955e:	79fb      	ldrb	r3, [r7, #7]
 8009560:	429a      	cmp	r2, r3
 8009562:	d3d3      	bcc.n	800950c <IntToUnicode+0x18>
  }
}
 8009564:	bf00      	nop
 8009566:	bf00      	nop
 8009568:	371c      	adds	r7, #28
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr
	...

08009574 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b0ae      	sub	sp, #184	; 0xb8
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800957c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009580:	2200      	movs	r2, #0
 8009582:	601a      	str	r2, [r3, #0]
 8009584:	605a      	str	r2, [r3, #4]
 8009586:	609a      	str	r2, [r3, #8]
 8009588:	60da      	str	r2, [r3, #12]
 800958a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800958c:	f107 0314 	add.w	r3, r7, #20
 8009590:	2290      	movs	r2, #144	; 0x90
 8009592:	2100      	movs	r1, #0
 8009594:	4618      	mov	r0, r3
 8009596:	f000 fba3 	bl	8009ce0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095a2:	d151      	bne.n	8009648 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80095a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80095a8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80095aa:	2300      	movs	r3, #0
 80095ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80095b0:	f107 0314 	add.w	r3, r7, #20
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7fb fa09 	bl	80049cc <HAL_RCCEx_PeriphCLKConfig>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d001      	beq.n	80095c4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80095c0:	f7f7 fcf6 	bl	8000fb0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80095c4:	4b22      	ldr	r3, [pc, #136]	; (8009650 <HAL_PCD_MspInit+0xdc>)
 80095c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095c8:	4a21      	ldr	r2, [pc, #132]	; (8009650 <HAL_PCD_MspInit+0xdc>)
 80095ca:	f043 0301 	orr.w	r3, r3, #1
 80095ce:	6313      	str	r3, [r2, #48]	; 0x30
 80095d0:	4b1f      	ldr	r3, [pc, #124]	; (8009650 <HAL_PCD_MspInit+0xdc>)
 80095d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d4:	f003 0301 	and.w	r3, r3, #1
 80095d8:	613b      	str	r3, [r7, #16]
 80095da:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80095dc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80095e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095e4:	2302      	movs	r3, #2
 80095e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095ea:	2300      	movs	r3, #0
 80095ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80095f0:	2303      	movs	r3, #3
 80095f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80095f6:	230a      	movs	r3, #10
 80095f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80095fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009600:	4619      	mov	r1, r3
 8009602:	4814      	ldr	r0, [pc, #80]	; (8009654 <HAL_PCD_MspInit+0xe0>)
 8009604:	f7f9 f8ce 	bl	80027a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009608:	4b11      	ldr	r3, [pc, #68]	; (8009650 <HAL_PCD_MspInit+0xdc>)
 800960a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800960c:	4a10      	ldr	r2, [pc, #64]	; (8009650 <HAL_PCD_MspInit+0xdc>)
 800960e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009612:	6353      	str	r3, [r2, #52]	; 0x34
 8009614:	4b0e      	ldr	r3, [pc, #56]	; (8009650 <HAL_PCD_MspInit+0xdc>)
 8009616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800961c:	60fb      	str	r3, [r7, #12]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	4b0b      	ldr	r3, [pc, #44]	; (8009650 <HAL_PCD_MspInit+0xdc>)
 8009622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009624:	4a0a      	ldr	r2, [pc, #40]	; (8009650 <HAL_PCD_MspInit+0xdc>)
 8009626:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800962a:	6453      	str	r3, [r2, #68]	; 0x44
 800962c:	4b08      	ldr	r3, [pc, #32]	; (8009650 <HAL_PCD_MspInit+0xdc>)
 800962e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009630:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009634:	60bb      	str	r3, [r7, #8]
 8009636:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009638:	2200      	movs	r2, #0
 800963a:	2100      	movs	r1, #0
 800963c:	2043      	movs	r0, #67	; 0x43
 800963e:	f7f9 f87a 	bl	8002736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009642:	2043      	movs	r0, #67	; 0x43
 8009644:	f7f9 f893 	bl	800276e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009648:	bf00      	nop
 800964a:	37b8      	adds	r7, #184	; 0xb8
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}
 8009650:	40023800 	.word	0x40023800
 8009654:	40020000 	.word	0x40020000

08009658 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800966c:	4619      	mov	r1, r3
 800966e:	4610      	mov	r0, r2
 8009670:	f7fe f9e7 	bl	8007a42 <USBD_LL_SetupStage>
}
 8009674:	bf00      	nop
 8009676:	3708      	adds	r7, #8
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	460b      	mov	r3, r1
 8009686:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800968e:	78fa      	ldrb	r2, [r7, #3]
 8009690:	6879      	ldr	r1, [r7, #4]
 8009692:	4613      	mov	r3, r2
 8009694:	00db      	lsls	r3, r3, #3
 8009696:	4413      	add	r3, r2
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	440b      	add	r3, r1
 800969c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	78fb      	ldrb	r3, [r7, #3]
 80096a4:	4619      	mov	r1, r3
 80096a6:	f7fe fa21 	bl	8007aec <USBD_LL_DataOutStage>
}
 80096aa:	bf00      	nop
 80096ac:	3708      	adds	r7, #8
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}

080096b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b082      	sub	sp, #8
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
 80096ba:	460b      	mov	r3, r1
 80096bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 80096c4:	78fa      	ldrb	r2, [r7, #3]
 80096c6:	6879      	ldr	r1, [r7, #4]
 80096c8:	4613      	mov	r3, r2
 80096ca:	00db      	lsls	r3, r3, #3
 80096cc:	4413      	add	r3, r2
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	440b      	add	r3, r1
 80096d2:	334c      	adds	r3, #76	; 0x4c
 80096d4:	681a      	ldr	r2, [r3, #0]
 80096d6:	78fb      	ldrb	r3, [r7, #3]
 80096d8:	4619      	mov	r1, r3
 80096da:	f7fe faba 	bl	8007c52 <USBD_LL_DataInStage>
}
 80096de:	bf00      	nop
 80096e0:	3708      	adds	r7, #8
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b082      	sub	sp, #8
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7fe fbee 	bl	8007ed6 <USBD_LL_SOF>
}
 80096fa:	bf00      	nop
 80096fc:	3708      	adds	r7, #8
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009702:	b580      	push	{r7, lr}
 8009704:	b084      	sub	sp, #16
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800970a:	2301      	movs	r3, #1
 800970c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d102      	bne.n	800971c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009716:	2300      	movs	r3, #0
 8009718:	73fb      	strb	r3, [r7, #15]
 800971a:	e008      	b.n	800972e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	2b02      	cmp	r3, #2
 8009722:	d102      	bne.n	800972a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009724:	2301      	movs	r3, #1
 8009726:	73fb      	strb	r3, [r7, #15]
 8009728:	e001      	b.n	800972e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800972a:	f7f7 fc41 	bl	8000fb0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009734:	7bfa      	ldrb	r2, [r7, #15]
 8009736:	4611      	mov	r1, r2
 8009738:	4618      	mov	r0, r3
 800973a:	f7fe fb8e 	bl	8007e5a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009744:	4618      	mov	r0, r3
 8009746:	f7fe fb36 	bl	8007db6 <USBD_LL_Reset>
}
 800974a:	bf00      	nop
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
	...

08009754 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009762:	4618      	mov	r0, r3
 8009764:	f7fe fb89 	bl	8007e7a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	6812      	ldr	r2, [r2, #0]
 8009776:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800977a:	f043 0301 	orr.w	r3, r3, #1
 800977e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6a1b      	ldr	r3, [r3, #32]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d005      	beq.n	8009794 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009788:	4b04      	ldr	r3, [pc, #16]	; (800979c <HAL_PCD_SuspendCallback+0x48>)
 800978a:	691b      	ldr	r3, [r3, #16]
 800978c:	4a03      	ldr	r2, [pc, #12]	; (800979c <HAL_PCD_SuspendCallback+0x48>)
 800978e:	f043 0306 	orr.w	r3, r3, #6
 8009792:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009794:	bf00      	nop
 8009796:	3708      	adds	r7, #8
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}
 800979c:	e000ed00 	.word	0xe000ed00

080097a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7fe fb79 	bl	8007ea6 <USBD_LL_Resume>
}
 80097b4:	bf00      	nop
 80097b6:	3708      	adds	r7, #8
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	460b      	mov	r3, r1
 80097c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80097ce:	78fa      	ldrb	r2, [r7, #3]
 80097d0:	4611      	mov	r1, r2
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7fe fbd1 	bl	8007f7a <USBD_LL_IsoOUTIncomplete>
}
 80097d8:	bf00      	nop
 80097da:	3708      	adds	r7, #8
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b082      	sub	sp, #8
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	460b      	mov	r3, r1
 80097ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80097f2:	78fa      	ldrb	r2, [r7, #3]
 80097f4:	4611      	mov	r1, r2
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7fe fb8d 	bl	8007f16 <USBD_LL_IsoINIncomplete>
}
 80097fc:	bf00      	nop
 80097fe:	3708      	adds	r7, #8
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009812:	4618      	mov	r0, r3
 8009814:	f7fe fbe3 	bl	8007fde <USBD_LL_DevConnected>
}
 8009818:	bf00      	nop
 800981a:	3708      	adds	r7, #8
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800982e:	4618      	mov	r0, r3
 8009830:	f7fe fbe0 	bl	8007ff4 <USBD_LL_DevDisconnected>
}
 8009834:	bf00      	nop
 8009836:	3708      	adds	r7, #8
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d13c      	bne.n	80098c6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800984c:	4a20      	ldr	r2, [pc, #128]	; (80098d0 <USBD_LL_Init+0x94>)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	4a1e      	ldr	r2, [pc, #120]	; (80098d0 <USBD_LL_Init+0x94>)
 8009858:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800985c:	4b1c      	ldr	r3, [pc, #112]	; (80098d0 <USBD_LL_Init+0x94>)
 800985e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009862:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009864:	4b1a      	ldr	r3, [pc, #104]	; (80098d0 <USBD_LL_Init+0x94>)
 8009866:	2206      	movs	r2, #6
 8009868:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800986a:	4b19      	ldr	r3, [pc, #100]	; (80098d0 <USBD_LL_Init+0x94>)
 800986c:	2202      	movs	r2, #2
 800986e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009870:	4b17      	ldr	r3, [pc, #92]	; (80098d0 <USBD_LL_Init+0x94>)
 8009872:	2200      	movs	r2, #0
 8009874:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009876:	4b16      	ldr	r3, [pc, #88]	; (80098d0 <USBD_LL_Init+0x94>)
 8009878:	2202      	movs	r2, #2
 800987a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800987c:	4b14      	ldr	r3, [pc, #80]	; (80098d0 <USBD_LL_Init+0x94>)
 800987e:	2200      	movs	r2, #0
 8009880:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009882:	4b13      	ldr	r3, [pc, #76]	; (80098d0 <USBD_LL_Init+0x94>)
 8009884:	2200      	movs	r2, #0
 8009886:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009888:	4b11      	ldr	r3, [pc, #68]	; (80098d0 <USBD_LL_Init+0x94>)
 800988a:	2200      	movs	r2, #0
 800988c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800988e:	4b10      	ldr	r3, [pc, #64]	; (80098d0 <USBD_LL_Init+0x94>)
 8009890:	2200      	movs	r2, #0
 8009892:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009894:	4b0e      	ldr	r3, [pc, #56]	; (80098d0 <USBD_LL_Init+0x94>)
 8009896:	2200      	movs	r2, #0
 8009898:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800989a:	480d      	ldr	r0, [pc, #52]	; (80098d0 <USBD_LL_Init+0x94>)
 800989c:	f7f9 f961 	bl	8002b62 <HAL_PCD_Init>
 80098a0:	4603      	mov	r3, r0
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d001      	beq.n	80098aa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80098a6:	f7f7 fb83 	bl	8000fb0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80098aa:	2180      	movs	r1, #128	; 0x80
 80098ac:	4808      	ldr	r0, [pc, #32]	; (80098d0 <USBD_LL_Init+0x94>)
 80098ae:	f7fa fbdc 	bl	800406a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80098b2:	2240      	movs	r2, #64	; 0x40
 80098b4:	2100      	movs	r1, #0
 80098b6:	4806      	ldr	r0, [pc, #24]	; (80098d0 <USBD_LL_Init+0x94>)
 80098b8:	f7fa fb90 	bl	8003fdc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80098bc:	2280      	movs	r2, #128	; 0x80
 80098be:	2101      	movs	r1, #1
 80098c0:	4803      	ldr	r0, [pc, #12]	; (80098d0 <USBD_LL_Init+0x94>)
 80098c2:	f7fa fb8b 	bl	8003fdc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80098c6:	2300      	movs	r3, #0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3708      	adds	r7, #8
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}
 80098d0:	20001b58 	.word	0x20001b58

080098d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098dc:	2300      	movs	r3, #0
 80098de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098e0:	2300      	movs	r3, #0
 80098e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7f9 fa5d 	bl	8002daa <HAL_PCD_Start>
 80098f0:	4603      	mov	r3, r0
 80098f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098f4:	7bfb      	ldrb	r3, [r7, #15]
 80098f6:	4618      	mov	r0, r3
 80098f8:	f000 f97e 	bl	8009bf8 <USBD_Get_USB_Status>
 80098fc:	4603      	mov	r3, r0
 80098fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009900:	7bbb      	ldrb	r3, [r7, #14]
}
 8009902:	4618      	mov	r0, r3
 8009904:	3710      	adds	r7, #16
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}

0800990a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800990a:	b580      	push	{r7, lr}
 800990c:	b084      	sub	sp, #16
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
 8009912:	4608      	mov	r0, r1
 8009914:	4611      	mov	r1, r2
 8009916:	461a      	mov	r2, r3
 8009918:	4603      	mov	r3, r0
 800991a:	70fb      	strb	r3, [r7, #3]
 800991c:	460b      	mov	r3, r1
 800991e:	70bb      	strb	r3, [r7, #2]
 8009920:	4613      	mov	r3, r2
 8009922:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009924:	2300      	movs	r3, #0
 8009926:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009928:	2300      	movs	r3, #0
 800992a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009932:	78bb      	ldrb	r3, [r7, #2]
 8009934:	883a      	ldrh	r2, [r7, #0]
 8009936:	78f9      	ldrb	r1, [r7, #3]
 8009938:	f7f9 ff4a 	bl	80037d0 <HAL_PCD_EP_Open>
 800993c:	4603      	mov	r3, r0
 800993e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009940:	7bfb      	ldrb	r3, [r7, #15]
 8009942:	4618      	mov	r0, r3
 8009944:	f000 f958 	bl	8009bf8 <USBD_Get_USB_Status>
 8009948:	4603      	mov	r3, r0
 800994a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800994c:	7bbb      	ldrb	r3, [r7, #14]
}
 800994e:	4618      	mov	r0, r3
 8009950:	3710      	adds	r7, #16
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009956:	b580      	push	{r7, lr}
 8009958:	b084      	sub	sp, #16
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
 800995e:	460b      	mov	r3, r1
 8009960:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009962:	2300      	movs	r3, #0
 8009964:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009966:	2300      	movs	r3, #0
 8009968:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009970:	78fa      	ldrb	r2, [r7, #3]
 8009972:	4611      	mov	r1, r2
 8009974:	4618      	mov	r0, r3
 8009976:	f7f9 ff93 	bl	80038a0 <HAL_PCD_EP_Close>
 800997a:	4603      	mov	r3, r0
 800997c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800997e:	7bfb      	ldrb	r3, [r7, #15]
 8009980:	4618      	mov	r0, r3
 8009982:	f000 f939 	bl	8009bf8 <USBD_Get_USB_Status>
 8009986:	4603      	mov	r3, r0
 8009988:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800998a:	7bbb      	ldrb	r3, [r7, #14]
}
 800998c:	4618      	mov	r0, r3
 800998e:	3710      	adds	r7, #16
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	460b      	mov	r3, r1
 800999e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099a0:	2300      	movs	r3, #0
 80099a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099a4:	2300      	movs	r3, #0
 80099a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80099ae:	78fa      	ldrb	r2, [r7, #3]
 80099b0:	4611      	mov	r1, r2
 80099b2:	4618      	mov	r0, r3
 80099b4:	f7fa f86b 	bl	8003a8e <HAL_PCD_EP_SetStall>
 80099b8:	4603      	mov	r3, r0
 80099ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099bc:	7bfb      	ldrb	r3, [r7, #15]
 80099be:	4618      	mov	r0, r3
 80099c0:	f000 f91a 	bl	8009bf8 <USBD_Get_USB_Status>
 80099c4:	4603      	mov	r3, r0
 80099c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3710      	adds	r7, #16
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099d2:	b580      	push	{r7, lr}
 80099d4:	b084      	sub	sp, #16
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
 80099da:	460b      	mov	r3, r1
 80099dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099de:	2300      	movs	r3, #0
 80099e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099e2:	2300      	movs	r3, #0
 80099e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80099ec:	78fa      	ldrb	r2, [r7, #3]
 80099ee:	4611      	mov	r1, r2
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7fa f8b0 	bl	8003b56 <HAL_PCD_EP_ClrStall>
 80099f6:	4603      	mov	r3, r0
 80099f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099fa:	7bfb      	ldrb	r3, [r7, #15]
 80099fc:	4618      	mov	r0, r3
 80099fe:	f000 f8fb 	bl	8009bf8 <USBD_Get_USB_Status>
 8009a02:	4603      	mov	r3, r0
 8009a04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a06:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3710      	adds	r7, #16
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b085      	sub	sp, #20
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	460b      	mov	r3, r1
 8009a1a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a22:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009a24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	da0b      	bge.n	8009a44 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009a2c:	78fb      	ldrb	r3, [r7, #3]
 8009a2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a32:	68f9      	ldr	r1, [r7, #12]
 8009a34:	4613      	mov	r3, r2
 8009a36:	00db      	lsls	r3, r3, #3
 8009a38:	4413      	add	r3, r2
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	440b      	add	r3, r1
 8009a3e:	333e      	adds	r3, #62	; 0x3e
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	e00b      	b.n	8009a5c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009a44:	78fb      	ldrb	r3, [r7, #3]
 8009a46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a4a:	68f9      	ldr	r1, [r7, #12]
 8009a4c:	4613      	mov	r3, r2
 8009a4e:	00db      	lsls	r3, r3, #3
 8009a50:	4413      	add	r3, r2
 8009a52:	009b      	lsls	r3, r3, #2
 8009a54:	440b      	add	r3, r1
 8009a56:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009a5a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3714      	adds	r7, #20
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr

08009a68 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	460b      	mov	r3, r1
 8009a72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a74:	2300      	movs	r3, #0
 8009a76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a82:	78fa      	ldrb	r2, [r7, #3]
 8009a84:	4611      	mov	r1, r2
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7f9 fe7d 	bl	8003786 <HAL_PCD_SetAddress>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a90:	7bfb      	ldrb	r3, [r7, #15]
 8009a92:	4618      	mov	r0, r3
 8009a94:	f000 f8b0 	bl	8009bf8 <USBD_Get_USB_Status>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3710      	adds	r7, #16
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}

08009aa6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009aa6:	b580      	push	{r7, lr}
 8009aa8:	b086      	sub	sp, #24
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	60f8      	str	r0, [r7, #12]
 8009aae:	607a      	str	r2, [r7, #4]
 8009ab0:	603b      	str	r3, [r7, #0]
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aba:	2300      	movs	r3, #0
 8009abc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009ac4:	7af9      	ldrb	r1, [r7, #11]
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	687a      	ldr	r2, [r7, #4]
 8009aca:	f7f9 ff96 	bl	80039fa <HAL_PCD_EP_Transmit>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ad2:	7dfb      	ldrb	r3, [r7, #23]
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f000 f88f 	bl	8009bf8 <USBD_Get_USB_Status>
 8009ada:	4603      	mov	r3, r0
 8009adc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ade:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3718      	adds	r7, #24
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b086      	sub	sp, #24
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	607a      	str	r2, [r7, #4]
 8009af2:	603b      	str	r3, [r7, #0]
 8009af4:	460b      	mov	r3, r1
 8009af6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009af8:	2300      	movs	r3, #0
 8009afa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009afc:	2300      	movs	r3, #0
 8009afe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009b06:	7af9      	ldrb	r1, [r7, #11]
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	687a      	ldr	r2, [r7, #4]
 8009b0c:	f7f9 ff12 	bl	8003934 <HAL_PCD_EP_Receive>
 8009b10:	4603      	mov	r3, r0
 8009b12:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b14:	7dfb      	ldrb	r3, [r7, #23]
 8009b16:	4618      	mov	r0, r3
 8009b18:	f000 f86e 	bl	8009bf8 <USBD_Get_USB_Status>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b20:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3718      	adds	r7, #24
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}

08009b2a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b2a:	b580      	push	{r7, lr}
 8009b2c:	b082      	sub	sp, #8
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
 8009b32:	460b      	mov	r3, r1
 8009b34:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009b3c:	78fa      	ldrb	r2, [r7, #3]
 8009b3e:	4611      	mov	r1, r2
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7f9 ff42 	bl	80039ca <HAL_PCD_EP_GetRxCount>
 8009b46:	4603      	mov	r3, r0
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3708      	adds	r7, #8
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b082      	sub	sp, #8
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	460b      	mov	r3, r1
 8009b5a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009b5c:	78fb      	ldrb	r3, [r7, #3]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d002      	beq.n	8009b68 <HAL_PCDEx_LPM_Callback+0x18>
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d01f      	beq.n	8009ba6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8009b66:	e03b      	b.n	8009be0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6a1b      	ldr	r3, [r3, #32]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d007      	beq.n	8009b80 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009b70:	f000 f83c 	bl	8009bec <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b74:	4b1c      	ldr	r3, [pc, #112]	; (8009be8 <HAL_PCDEx_LPM_Callback+0x98>)
 8009b76:	691b      	ldr	r3, [r3, #16]
 8009b78:	4a1b      	ldr	r2, [pc, #108]	; (8009be8 <HAL_PCDEx_LPM_Callback+0x98>)
 8009b7a:	f023 0306 	bic.w	r3, r3, #6
 8009b7e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	6812      	ldr	r2, [r2, #0]
 8009b8e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009b92:	f023 0301 	bic.w	r3, r3, #1
 8009b96:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7fe f981 	bl	8007ea6 <USBD_LL_Resume>
    break;
 8009ba4:	e01c      	b.n	8009be0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	6812      	ldr	r2, [r2, #0]
 8009bb4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009bb8:	f043 0301 	orr.w	r3, r3, #1
 8009bbc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f7fe f958 	bl	8007e7a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6a1b      	ldr	r3, [r3, #32]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d005      	beq.n	8009bde <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009bd2:	4b05      	ldr	r3, [pc, #20]	; (8009be8 <HAL_PCDEx_LPM_Callback+0x98>)
 8009bd4:	691b      	ldr	r3, [r3, #16]
 8009bd6:	4a04      	ldr	r2, [pc, #16]	; (8009be8 <HAL_PCDEx_LPM_Callback+0x98>)
 8009bd8:	f043 0306 	orr.w	r3, r3, #6
 8009bdc:	6113      	str	r3, [r2, #16]
    break;
 8009bde:	bf00      	nop
}
 8009be0:	bf00      	nop
 8009be2:	3708      	adds	r7, #8
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}
 8009be8:	e000ed00 	.word	0xe000ed00

08009bec <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009bf0:	f7f7 f970 	bl	8000ed4 <SystemClock_Config>
}
 8009bf4:	bf00      	nop
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b085      	sub	sp, #20
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	4603      	mov	r3, r0
 8009c00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c02:	2300      	movs	r3, #0
 8009c04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009c06:	79fb      	ldrb	r3, [r7, #7]
 8009c08:	2b03      	cmp	r3, #3
 8009c0a:	d817      	bhi.n	8009c3c <USBD_Get_USB_Status+0x44>
 8009c0c:	a201      	add	r2, pc, #4	; (adr r2, 8009c14 <USBD_Get_USB_Status+0x1c>)
 8009c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c12:	bf00      	nop
 8009c14:	08009c25 	.word	0x08009c25
 8009c18:	08009c2b 	.word	0x08009c2b
 8009c1c:	08009c31 	.word	0x08009c31
 8009c20:	08009c37 	.word	0x08009c37
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009c24:	2300      	movs	r3, #0
 8009c26:	73fb      	strb	r3, [r7, #15]
    break;
 8009c28:	e00b      	b.n	8009c42 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c2a:	2303      	movs	r3, #3
 8009c2c:	73fb      	strb	r3, [r7, #15]
    break;
 8009c2e:	e008      	b.n	8009c42 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009c30:	2301      	movs	r3, #1
 8009c32:	73fb      	strb	r3, [r7, #15]
    break;
 8009c34:	e005      	b.n	8009c42 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009c36:	2303      	movs	r3, #3
 8009c38:	73fb      	strb	r3, [r7, #15]
    break;
 8009c3a:	e002      	b.n	8009c42 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009c3c:	2303      	movs	r3, #3
 8009c3e:	73fb      	strb	r3, [r7, #15]
    break;
 8009c40:	bf00      	nop
  }
  return usb_status;
 8009c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3714      	adds	r7, #20
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr

08009c50 <__errno>:
 8009c50:	4b01      	ldr	r3, [pc, #4]	; (8009c58 <__errno+0x8>)
 8009c52:	6818      	ldr	r0, [r3, #0]
 8009c54:	4770      	bx	lr
 8009c56:	bf00      	nop
 8009c58:	20000128 	.word	0x20000128

08009c5c <__libc_init_array>:
 8009c5c:	b570      	push	{r4, r5, r6, lr}
 8009c5e:	4d0d      	ldr	r5, [pc, #52]	; (8009c94 <__libc_init_array+0x38>)
 8009c60:	4c0d      	ldr	r4, [pc, #52]	; (8009c98 <__libc_init_array+0x3c>)
 8009c62:	1b64      	subs	r4, r4, r5
 8009c64:	10a4      	asrs	r4, r4, #2
 8009c66:	2600      	movs	r6, #0
 8009c68:	42a6      	cmp	r6, r4
 8009c6a:	d109      	bne.n	8009c80 <__libc_init_array+0x24>
 8009c6c:	4d0b      	ldr	r5, [pc, #44]	; (8009c9c <__libc_init_array+0x40>)
 8009c6e:	4c0c      	ldr	r4, [pc, #48]	; (8009ca0 <__libc_init_array+0x44>)
 8009c70:	f000 f93c 	bl	8009eec <_init>
 8009c74:	1b64      	subs	r4, r4, r5
 8009c76:	10a4      	asrs	r4, r4, #2
 8009c78:	2600      	movs	r6, #0
 8009c7a:	42a6      	cmp	r6, r4
 8009c7c:	d105      	bne.n	8009c8a <__libc_init_array+0x2e>
 8009c7e:	bd70      	pop	{r4, r5, r6, pc}
 8009c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c84:	4798      	blx	r3
 8009c86:	3601      	adds	r6, #1
 8009c88:	e7ee      	b.n	8009c68 <__libc_init_array+0xc>
 8009c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c8e:	4798      	blx	r3
 8009c90:	3601      	adds	r6, #1
 8009c92:	e7f2      	b.n	8009c7a <__libc_init_array+0x1e>
 8009c94:	08009f64 	.word	0x08009f64
 8009c98:	08009f64 	.word	0x08009f64
 8009c9c:	08009f64 	.word	0x08009f64
 8009ca0:	08009f68 	.word	0x08009f68

08009ca4 <malloc>:
 8009ca4:	4b02      	ldr	r3, [pc, #8]	; (8009cb0 <malloc+0xc>)
 8009ca6:	4601      	mov	r1, r0
 8009ca8:	6818      	ldr	r0, [r3, #0]
 8009caa:	f000 b88d 	b.w	8009dc8 <_malloc_r>
 8009cae:	bf00      	nop
 8009cb0:	20000128 	.word	0x20000128

08009cb4 <free>:
 8009cb4:	4b02      	ldr	r3, [pc, #8]	; (8009cc0 <free+0xc>)
 8009cb6:	4601      	mov	r1, r0
 8009cb8:	6818      	ldr	r0, [r3, #0]
 8009cba:	f000 b819 	b.w	8009cf0 <_free_r>
 8009cbe:	bf00      	nop
 8009cc0:	20000128 	.word	0x20000128

08009cc4 <memcpy>:
 8009cc4:	440a      	add	r2, r1
 8009cc6:	4291      	cmp	r1, r2
 8009cc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ccc:	d100      	bne.n	8009cd0 <memcpy+0xc>
 8009cce:	4770      	bx	lr
 8009cd0:	b510      	push	{r4, lr}
 8009cd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cda:	4291      	cmp	r1, r2
 8009cdc:	d1f9      	bne.n	8009cd2 <memcpy+0xe>
 8009cde:	bd10      	pop	{r4, pc}

08009ce0 <memset>:
 8009ce0:	4402      	add	r2, r0
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d100      	bne.n	8009cea <memset+0xa>
 8009ce8:	4770      	bx	lr
 8009cea:	f803 1b01 	strb.w	r1, [r3], #1
 8009cee:	e7f9      	b.n	8009ce4 <memset+0x4>

08009cf0 <_free_r>:
 8009cf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009cf2:	2900      	cmp	r1, #0
 8009cf4:	d044      	beq.n	8009d80 <_free_r+0x90>
 8009cf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cfa:	9001      	str	r0, [sp, #4]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	f1a1 0404 	sub.w	r4, r1, #4
 8009d02:	bfb8      	it	lt
 8009d04:	18e4      	addlt	r4, r4, r3
 8009d06:	f000 f8e3 	bl	8009ed0 <__malloc_lock>
 8009d0a:	4a1e      	ldr	r2, [pc, #120]	; (8009d84 <_free_r+0x94>)
 8009d0c:	9801      	ldr	r0, [sp, #4]
 8009d0e:	6813      	ldr	r3, [r2, #0]
 8009d10:	b933      	cbnz	r3, 8009d20 <_free_r+0x30>
 8009d12:	6063      	str	r3, [r4, #4]
 8009d14:	6014      	str	r4, [r2, #0]
 8009d16:	b003      	add	sp, #12
 8009d18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d1c:	f000 b8de 	b.w	8009edc <__malloc_unlock>
 8009d20:	42a3      	cmp	r3, r4
 8009d22:	d908      	bls.n	8009d36 <_free_r+0x46>
 8009d24:	6825      	ldr	r5, [r4, #0]
 8009d26:	1961      	adds	r1, r4, r5
 8009d28:	428b      	cmp	r3, r1
 8009d2a:	bf01      	itttt	eq
 8009d2c:	6819      	ldreq	r1, [r3, #0]
 8009d2e:	685b      	ldreq	r3, [r3, #4]
 8009d30:	1949      	addeq	r1, r1, r5
 8009d32:	6021      	streq	r1, [r4, #0]
 8009d34:	e7ed      	b.n	8009d12 <_free_r+0x22>
 8009d36:	461a      	mov	r2, r3
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	b10b      	cbz	r3, 8009d40 <_free_r+0x50>
 8009d3c:	42a3      	cmp	r3, r4
 8009d3e:	d9fa      	bls.n	8009d36 <_free_r+0x46>
 8009d40:	6811      	ldr	r1, [r2, #0]
 8009d42:	1855      	adds	r5, r2, r1
 8009d44:	42a5      	cmp	r5, r4
 8009d46:	d10b      	bne.n	8009d60 <_free_r+0x70>
 8009d48:	6824      	ldr	r4, [r4, #0]
 8009d4a:	4421      	add	r1, r4
 8009d4c:	1854      	adds	r4, r2, r1
 8009d4e:	42a3      	cmp	r3, r4
 8009d50:	6011      	str	r1, [r2, #0]
 8009d52:	d1e0      	bne.n	8009d16 <_free_r+0x26>
 8009d54:	681c      	ldr	r4, [r3, #0]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	6053      	str	r3, [r2, #4]
 8009d5a:	4421      	add	r1, r4
 8009d5c:	6011      	str	r1, [r2, #0]
 8009d5e:	e7da      	b.n	8009d16 <_free_r+0x26>
 8009d60:	d902      	bls.n	8009d68 <_free_r+0x78>
 8009d62:	230c      	movs	r3, #12
 8009d64:	6003      	str	r3, [r0, #0]
 8009d66:	e7d6      	b.n	8009d16 <_free_r+0x26>
 8009d68:	6825      	ldr	r5, [r4, #0]
 8009d6a:	1961      	adds	r1, r4, r5
 8009d6c:	428b      	cmp	r3, r1
 8009d6e:	bf04      	itt	eq
 8009d70:	6819      	ldreq	r1, [r3, #0]
 8009d72:	685b      	ldreq	r3, [r3, #4]
 8009d74:	6063      	str	r3, [r4, #4]
 8009d76:	bf04      	itt	eq
 8009d78:	1949      	addeq	r1, r1, r5
 8009d7a:	6021      	streq	r1, [r4, #0]
 8009d7c:	6054      	str	r4, [r2, #4]
 8009d7e:	e7ca      	b.n	8009d16 <_free_r+0x26>
 8009d80:	b003      	add	sp, #12
 8009d82:	bd30      	pop	{r4, r5, pc}
 8009d84:	20002060 	.word	0x20002060

08009d88 <sbrk_aligned>:
 8009d88:	b570      	push	{r4, r5, r6, lr}
 8009d8a:	4e0e      	ldr	r6, [pc, #56]	; (8009dc4 <sbrk_aligned+0x3c>)
 8009d8c:	460c      	mov	r4, r1
 8009d8e:	6831      	ldr	r1, [r6, #0]
 8009d90:	4605      	mov	r5, r0
 8009d92:	b911      	cbnz	r1, 8009d9a <sbrk_aligned+0x12>
 8009d94:	f000 f88c 	bl	8009eb0 <_sbrk_r>
 8009d98:	6030      	str	r0, [r6, #0]
 8009d9a:	4621      	mov	r1, r4
 8009d9c:	4628      	mov	r0, r5
 8009d9e:	f000 f887 	bl	8009eb0 <_sbrk_r>
 8009da2:	1c43      	adds	r3, r0, #1
 8009da4:	d00a      	beq.n	8009dbc <sbrk_aligned+0x34>
 8009da6:	1cc4      	adds	r4, r0, #3
 8009da8:	f024 0403 	bic.w	r4, r4, #3
 8009dac:	42a0      	cmp	r0, r4
 8009dae:	d007      	beq.n	8009dc0 <sbrk_aligned+0x38>
 8009db0:	1a21      	subs	r1, r4, r0
 8009db2:	4628      	mov	r0, r5
 8009db4:	f000 f87c 	bl	8009eb0 <_sbrk_r>
 8009db8:	3001      	adds	r0, #1
 8009dba:	d101      	bne.n	8009dc0 <sbrk_aligned+0x38>
 8009dbc:	f04f 34ff 	mov.w	r4, #4294967295
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	bd70      	pop	{r4, r5, r6, pc}
 8009dc4:	20002064 	.word	0x20002064

08009dc8 <_malloc_r>:
 8009dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dcc:	1ccd      	adds	r5, r1, #3
 8009dce:	f025 0503 	bic.w	r5, r5, #3
 8009dd2:	3508      	adds	r5, #8
 8009dd4:	2d0c      	cmp	r5, #12
 8009dd6:	bf38      	it	cc
 8009dd8:	250c      	movcc	r5, #12
 8009dda:	2d00      	cmp	r5, #0
 8009ddc:	4607      	mov	r7, r0
 8009dde:	db01      	blt.n	8009de4 <_malloc_r+0x1c>
 8009de0:	42a9      	cmp	r1, r5
 8009de2:	d905      	bls.n	8009df0 <_malloc_r+0x28>
 8009de4:	230c      	movs	r3, #12
 8009de6:	603b      	str	r3, [r7, #0]
 8009de8:	2600      	movs	r6, #0
 8009dea:	4630      	mov	r0, r6
 8009dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009df0:	4e2e      	ldr	r6, [pc, #184]	; (8009eac <_malloc_r+0xe4>)
 8009df2:	f000 f86d 	bl	8009ed0 <__malloc_lock>
 8009df6:	6833      	ldr	r3, [r6, #0]
 8009df8:	461c      	mov	r4, r3
 8009dfa:	bb34      	cbnz	r4, 8009e4a <_malloc_r+0x82>
 8009dfc:	4629      	mov	r1, r5
 8009dfe:	4638      	mov	r0, r7
 8009e00:	f7ff ffc2 	bl	8009d88 <sbrk_aligned>
 8009e04:	1c43      	adds	r3, r0, #1
 8009e06:	4604      	mov	r4, r0
 8009e08:	d14d      	bne.n	8009ea6 <_malloc_r+0xde>
 8009e0a:	6834      	ldr	r4, [r6, #0]
 8009e0c:	4626      	mov	r6, r4
 8009e0e:	2e00      	cmp	r6, #0
 8009e10:	d140      	bne.n	8009e94 <_malloc_r+0xcc>
 8009e12:	6823      	ldr	r3, [r4, #0]
 8009e14:	4631      	mov	r1, r6
 8009e16:	4638      	mov	r0, r7
 8009e18:	eb04 0803 	add.w	r8, r4, r3
 8009e1c:	f000 f848 	bl	8009eb0 <_sbrk_r>
 8009e20:	4580      	cmp	r8, r0
 8009e22:	d13a      	bne.n	8009e9a <_malloc_r+0xd2>
 8009e24:	6821      	ldr	r1, [r4, #0]
 8009e26:	3503      	adds	r5, #3
 8009e28:	1a6d      	subs	r5, r5, r1
 8009e2a:	f025 0503 	bic.w	r5, r5, #3
 8009e2e:	3508      	adds	r5, #8
 8009e30:	2d0c      	cmp	r5, #12
 8009e32:	bf38      	it	cc
 8009e34:	250c      	movcc	r5, #12
 8009e36:	4629      	mov	r1, r5
 8009e38:	4638      	mov	r0, r7
 8009e3a:	f7ff ffa5 	bl	8009d88 <sbrk_aligned>
 8009e3e:	3001      	adds	r0, #1
 8009e40:	d02b      	beq.n	8009e9a <_malloc_r+0xd2>
 8009e42:	6823      	ldr	r3, [r4, #0]
 8009e44:	442b      	add	r3, r5
 8009e46:	6023      	str	r3, [r4, #0]
 8009e48:	e00e      	b.n	8009e68 <_malloc_r+0xa0>
 8009e4a:	6822      	ldr	r2, [r4, #0]
 8009e4c:	1b52      	subs	r2, r2, r5
 8009e4e:	d41e      	bmi.n	8009e8e <_malloc_r+0xc6>
 8009e50:	2a0b      	cmp	r2, #11
 8009e52:	d916      	bls.n	8009e82 <_malloc_r+0xba>
 8009e54:	1961      	adds	r1, r4, r5
 8009e56:	42a3      	cmp	r3, r4
 8009e58:	6025      	str	r5, [r4, #0]
 8009e5a:	bf18      	it	ne
 8009e5c:	6059      	strne	r1, [r3, #4]
 8009e5e:	6863      	ldr	r3, [r4, #4]
 8009e60:	bf08      	it	eq
 8009e62:	6031      	streq	r1, [r6, #0]
 8009e64:	5162      	str	r2, [r4, r5]
 8009e66:	604b      	str	r3, [r1, #4]
 8009e68:	4638      	mov	r0, r7
 8009e6a:	f104 060b 	add.w	r6, r4, #11
 8009e6e:	f000 f835 	bl	8009edc <__malloc_unlock>
 8009e72:	f026 0607 	bic.w	r6, r6, #7
 8009e76:	1d23      	adds	r3, r4, #4
 8009e78:	1af2      	subs	r2, r6, r3
 8009e7a:	d0b6      	beq.n	8009dea <_malloc_r+0x22>
 8009e7c:	1b9b      	subs	r3, r3, r6
 8009e7e:	50a3      	str	r3, [r4, r2]
 8009e80:	e7b3      	b.n	8009dea <_malloc_r+0x22>
 8009e82:	6862      	ldr	r2, [r4, #4]
 8009e84:	42a3      	cmp	r3, r4
 8009e86:	bf0c      	ite	eq
 8009e88:	6032      	streq	r2, [r6, #0]
 8009e8a:	605a      	strne	r2, [r3, #4]
 8009e8c:	e7ec      	b.n	8009e68 <_malloc_r+0xa0>
 8009e8e:	4623      	mov	r3, r4
 8009e90:	6864      	ldr	r4, [r4, #4]
 8009e92:	e7b2      	b.n	8009dfa <_malloc_r+0x32>
 8009e94:	4634      	mov	r4, r6
 8009e96:	6876      	ldr	r6, [r6, #4]
 8009e98:	e7b9      	b.n	8009e0e <_malloc_r+0x46>
 8009e9a:	230c      	movs	r3, #12
 8009e9c:	603b      	str	r3, [r7, #0]
 8009e9e:	4638      	mov	r0, r7
 8009ea0:	f000 f81c 	bl	8009edc <__malloc_unlock>
 8009ea4:	e7a1      	b.n	8009dea <_malloc_r+0x22>
 8009ea6:	6025      	str	r5, [r4, #0]
 8009ea8:	e7de      	b.n	8009e68 <_malloc_r+0xa0>
 8009eaa:	bf00      	nop
 8009eac:	20002060 	.word	0x20002060

08009eb0 <_sbrk_r>:
 8009eb0:	b538      	push	{r3, r4, r5, lr}
 8009eb2:	4d06      	ldr	r5, [pc, #24]	; (8009ecc <_sbrk_r+0x1c>)
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	4604      	mov	r4, r0
 8009eb8:	4608      	mov	r0, r1
 8009eba:	602b      	str	r3, [r5, #0]
 8009ebc:	f7f7 f99c 	bl	80011f8 <_sbrk>
 8009ec0:	1c43      	adds	r3, r0, #1
 8009ec2:	d102      	bne.n	8009eca <_sbrk_r+0x1a>
 8009ec4:	682b      	ldr	r3, [r5, #0]
 8009ec6:	b103      	cbz	r3, 8009eca <_sbrk_r+0x1a>
 8009ec8:	6023      	str	r3, [r4, #0]
 8009eca:	bd38      	pop	{r3, r4, r5, pc}
 8009ecc:	20002068 	.word	0x20002068

08009ed0 <__malloc_lock>:
 8009ed0:	4801      	ldr	r0, [pc, #4]	; (8009ed8 <__malloc_lock+0x8>)
 8009ed2:	f000 b809 	b.w	8009ee8 <__retarget_lock_acquire_recursive>
 8009ed6:	bf00      	nop
 8009ed8:	2000206c 	.word	0x2000206c

08009edc <__malloc_unlock>:
 8009edc:	4801      	ldr	r0, [pc, #4]	; (8009ee4 <__malloc_unlock+0x8>)
 8009ede:	f000 b804 	b.w	8009eea <__retarget_lock_release_recursive>
 8009ee2:	bf00      	nop
 8009ee4:	2000206c 	.word	0x2000206c

08009ee8 <__retarget_lock_acquire_recursive>:
 8009ee8:	4770      	bx	lr

08009eea <__retarget_lock_release_recursive>:
 8009eea:	4770      	bx	lr

08009eec <_init>:
 8009eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eee:	bf00      	nop
 8009ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ef2:	bc08      	pop	{r3}
 8009ef4:	469e      	mov	lr, r3
 8009ef6:	4770      	bx	lr

08009ef8 <_fini>:
 8009ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009efa:	bf00      	nop
 8009efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009efe:	bc08      	pop	{r3}
 8009f00:	469e      	mov	lr, r3
 8009f02:	4770      	bx	lr
